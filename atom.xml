<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LinJunzhu's Blog]]></title>
  <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/atom.xml" rel="self"/>
  <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/"/>
  <updated>2015-04-14T12:53:52+08:00</updated>
  <id>https://github.com/linjunzhu/linjunzhu.github.io.git/</id>
  <author>
    <name><![CDATA[林俊柱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Ruby生成二维码]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/03/06/shi-yong-rubysheng-cheng-er-wei-ma/"/>
    <updated>2015-03-06T15:53:15+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/03/06/shi-yong-rubysheng-cheng-er-wei-ma</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>偶尔项目中会用到二维码，这时生成二维码有几种方式：</p>

<ol>
<li>自己动手，丰衣足食，自己来生成</li>
<li>通过调用网络API来拉取二维码</li>
</ol>


<p>但是，由于担心网络的不稳定 或者 项目只能对内部开放，此时就需要第一种方式来实现了。</p>

<h2>所需 Gem</h2>

<ol>
<li>gem &lsquo;qrencoder&rsquo;</li>
<li>gem &lsquo;rqrencoder-magick&rsquo;</li>
<li>gem &lsquo;rqrcode_png&rsquo;</li>
</ol>


<h2>Begin</h2>

<h3>1. 先安装本机库 <code>qrencode</code></h3>

<p>Mac 用户：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install qrencode</span></code></pre></td></tr></table></div></figure>


<p>Linux 用户：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install qrencode</span></code></pre></td></tr></table></div></figure>


<h3>2. 安装 <code>qrencoder</code> 这个 gem</h3>

<p>项目主页： <a href="https://github.com/harrisj/qrencoder">https://github.com/harrisj/qrencoder</a></p>

<p>安装之前需要先安装依赖库，否则会安装不上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install libqrencode-dev python-qrencode qrencode
</span></code></pre></td></tr></table></div></figure>


<p>安装时需要指定路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install qrencoder –with-opt-include<span class="o">=</span>/usr/local/include –with-opt-lib<span class="o">=</span>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


<p><code>gem qrencoder</code></p>

<h3>3. 安装 <code>rqrencoder-magick</code> 和 <code>rqrencoder</code></h3>

<p>前者是利用了<code>RMagick</code>来生成二维码，因此需要事先安装 <code>RMagick</code>，安装方法就不说了。</p>

<p>在 <code>gemfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;rqrencoder-magick&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>shell</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install rqrencoder –with-opt-include<span class="o">=</span>/usr/local/include –with-opt-lib<span class="o">=</span>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


<h3>4. 安装<code>rqrcode_png</code></h3>

<p><code>gem rqrcode_png</code></p>

<p>这个 Gem 可以为生成的二维码指定<code>宽度</code>和<code>高度</code></p>

<h3>5. <code>DEMO</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 生成二维码</span>
</span><span class='line'><span class="nv">qr</span> <span class="o">=</span> RQRCode::QRCode.new<span class="o">(</span> self.code, :size <span class="o">=</span>&gt; 1, :level <span class="o">=</span>&gt; :l <span class="o">)</span>
</span><span class='line'><span class="nv">png</span> <span class="o">=</span> qr.to_img
</span><span class='line'>png.resize<span class="o">(</span>300, 300<span class="o">)</span>.save<span class="o">(</span>path<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 不足</h3>

<p>这种方式生成的二维码图片会比现今网上提供的api所生成的二维码要「难扫」「复杂」，所以如果对二维码的扫描难度有要求的话，就&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Mosquitto]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/shi-yong-mosquitto/"/>
    <updated>2015-01-30T16:04:40+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/shi-yong-mosquitto</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>这段时间团队需要跟 Google Glass 进行交互，因此要做一个推送机制。而 MQTT 协议的推送是当今最火热的一个。</p>

<p>Mosquitto 则是实现了 MQTT 协议的服务。</p>

<h2>安装</h2>

<p>在 Ubuntu 下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">add</span><span class="o">-</span><span class="n">repository</span> <span class="ss">ppa</span><span class="p">:</span><span class="n">mosquitto</span><span class="o">-</span><span class="n">dev</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">-</span><span class="n">ppa</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果显示<code>apt-add-repository</code>没有识别，则可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">software</span><span class="o">-</span><span class="n">properties</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p>安装完成后，所有配置都会在 <code>/etc/mosquitto</code>目录下。其中最重要的则是<code>mosquitto.conf</code> 文件，以下则是配置文件内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># General configuration</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端心跳的间隔时间</span>
</span><span class='line'><span class="c1">#retry_interval 20</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 系统状态的刷新时间</span>
</span><span class='line'><span class="c1">#sys_interval 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 系统资源的回收时间，0表示尽快处理</span>
</span><span class='line'><span class="c1">#store_clean_interval 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务进程的PID</span>
</span><span class='line'><span class="c1">#pid_file /var/run/mosquitto.pid</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务进程的系统用户</span>
</span><span class='line'><span class="c1">#user mosquitto</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端心跳消息的最大并发数</span>
</span><span class='line'><span class="c1">#max_inflight_messages 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端心跳消息缓存队列</span>
</span><span class='line'><span class="c1">#max_queued_messages 100</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 用于设置客户端长连接的过期时间，默认永不过期</span>
</span><span class='line'><span class="c1">#persistent_client_expiration</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Default listener</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务绑定的IP地址</span>
</span><span class='line'><span class="c1">#bind_address</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务绑定的端口号</span>
</span><span class='line'><span class="c1">#port 1883</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 允许的最大连接数，-1表示没有限制</span>
</span><span class='line'><span class="c1">#max_connections -1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cafile：CA证书文件</span>
</span><span class='line'><span class="c1"># capath：CA证书目录</span>
</span><span class='line'><span class="c1"># certfile：PEM证书文件</span>
</span><span class='line'><span class="c1"># keyfile：PEM密钥文件</span>
</span><span class='line'><span class="c1">#cafile</span>
</span><span class='line'><span class="c1">#capath</span>
</span><span class='line'><span class="c1">#certfile</span>
</span><span class='line'><span class="c1">#keyfile</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 必须提供证书以保证数据安全性</span>
</span><span class='line'><span class="c1">#require_certificate false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 若require_certificate值为true，use_identity_as_username也必须为true</span>
</span><span class='line'><span class="c1">#use_identity_as_username false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 启用PSK（Pre-shared-key）支持</span>
</span><span class='line'><span class="c1">#psk_hint</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</span>
</span><span class='line'><span class="c1"># as the output of that command.</span>
</span><span class='line'><span class="c1">#ciphers</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Persistence</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 消息自动保存的间隔时间</span>
</span><span class='line'><span class="c1">#autosave_interval 1800</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 消息自动保存功能的开关</span>
</span><span class='line'><span class="c1">#autosave_on_changes false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 持久化功能的开关</span>
</span><span class='line'><span class="n">persistence</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 持久化DB文件</span>
</span><span class='line'><span class="c1">#persistence_file mosquitto.db</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 持久化DB文件目录</span>
</span><span class='line'><span class="c1">#persistence_location /var/lib/mosquitto/</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Logging</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 4种日志模式：stdout、stderr、syslog、topic</span>
</span><span class='line'><span class="c1"># none 则表示不记日志，此配置可以提升些许性能</span>
</span><span class='line'><span class="n">log_dest</span> <span class="n">none</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#还有一种写入文件的模式</span>
</span><span class='line'><span class="n">log_dest</span> <span class="n">file</span> <span class="s1">&#39;/var/lib/mosquitto/mosquitto.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 选择日志的级别（可设置多项）</span>
</span><span class='line'><span class="c1">#log_type error</span>
</span><span class='line'><span class="c1">#log_type warning</span>
</span><span class='line'><span class="c1">#log_type notice</span>
</span><span class='line'><span class="c1">#log_type information</span>
</span><span class='line'><span class="c1">#log_type all</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是否记录客户端连接信息</span>
</span><span class='line'><span class="c1">#connection_messages true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是否记录日志时间</span>
</span><span class='line'><span class="c1">#log_timestamp true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Security</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端ID的前缀限制，可用于保证安全性</span>
</span><span class='line'><span class="c1">#clientid_prefixes</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 允许匿名用户</span>
</span><span class='line'><span class="c1">#allow_anonymous true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 用户/密码文件，默认格式：username:password</span>
</span><span class='line'><span class="c1">#password_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PSK格式密码文件，默认格式：identity:key</span>
</span><span class='line'><span class="c1">#psk_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># pattern write sensor/%u/data</span>
</span><span class='line'><span class="c1"># ACL权限配置，常用语法如下：</span>
</span><span class='line'><span class="c1"># 用户限制：user &lt;username&gt;</span>
</span><span class='line'><span class="c1"># 话题限制：topic [read|write] &lt;topic&gt;</span>
</span><span class='line'><span class="c1"># 正则限制：pattern write sensor/%u/data</span>
</span><span class='line'><span class="c1">#acl_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Bridges</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 允许服务之间使用“桥接”模式（可用于分布式部署）</span>
</span><span class='line'><span class="c1">#connection &lt;name&gt;</span>
</span><span class='line'><span class="c1">#address &lt;host&gt;[:&lt;port&gt;]</span>
</span><span class='line'><span class="c1">#topic &lt;topic&gt; [[[out | in | both] qos-level] local-prefix remote-prefix]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设置桥接的客户端ID</span>
</span><span class='line'><span class="c1">#clientid</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接断开时，是否清除远程服务器中的消息</span>
</span><span class='line'><span class="c1">#cleansession false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是否发布桥接的状态信息</span>
</span><span class='line'><span class="c1">#notifications true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设置桥接模式下，消息将会发布到的话题地址</span>
</span><span class='line'><span class="c1"># $SYS/broker/connection/&lt;clientid&gt;/state</span>
</span><span class='line'><span class="c1">#notification_topic</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设置桥接的keepalive数值</span>
</span><span class='line'><span class="c1">#keepalive_interval 60</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接模式，目前有三种：automatic、lazy、once</span>
</span><span class='line'><span class="c1">#start_type automatic</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接模式automatic的超时时间</span>
</span><span class='line'><span class="c1">#restart_timeout 30</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接模式lazy的超时时间</span>
</span><span class='line'><span class="c1">#idle_timeout 60</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接客户端的用户名</span>
</span><span class='line'><span class="c1">#username</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接客户端的密码</span>
</span><span class='line'><span class="c1">#password</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># bridge_cafile：桥接客户端的CA证书文件</span>
</span><span class='line'><span class="c1"># bridge_capath：桥接客户端的CA证书目录</span>
</span><span class='line'><span class="c1"># bridge_certfile：桥接客户端的PEM证书文件</span>
</span><span class='line'><span class="c1"># bridge_keyfile：桥接客户端的PEM密钥文件</span>
</span><span class='line'><span class="c1">#bridge_cafile</span>
</span><span class='line'><span class="c1">#bridge_capath</span>
</span><span class='line'><span class="c1">#bridge_certfile</span>
</span><span class='line'><span class="c1">#bridge_keyfile</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 自己的配置可以放到以下目录中</span>
</span><span class='line'><span class="n">include_dir</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>权限</h2>

<p>为了避免任何人都可以往服务器去 pull&amp;push，我们需要设置权限。</p>

<p>使用自带工具进行设置账号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#add a count and then will ask you to enter a passwd</span>
</span><span class='line'><span class="n">mosquitto_passwd</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">passwd</span> <span class="n">glassx</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># delete</span>
</span><span class='line'><span class="n">mosquitto_passwd</span> <span class="o">-</span><span class="n">D</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">passwd</span> <span class="n">glassx</span>
</span></code></pre></td></tr></table></div></figure>


<h2>启动</h2>

<p>启动服务很简单，直接运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mosquitto</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">.</span><span class="n">conf</span> <span class="o">-</span><span class="n">d</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#-c 表示加载指定配置文件</span>
</span><span class='line'><span class="c1">#-d 表示以后台服务运行</span>
</span><span class='line'><span class="c1">#-p 表示监听某个端口（默认为1883)</span>
</span><span class='line'><span class="c1">#-v 表示亢长的日志记录模式，相当于设置 log_type all</span>
</span></code></pre></td></tr></table></div></figure>


<p>mosquitto 是个异步 IO 框架，经过测试可以处理 20000 个以上的客户端连接。</p>

<h2>推送</h2>

<p>上面所创建的只是服务器， MQTT 有三个角色， 发布角色，服务器角色，消费角色。 此时我们便使用 Ruby 来实现发布角色。</p>

<p>我们会使用到一个叫做 <code>mqtt</code> 的 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mqtt&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Publish example</span>
</span><span class='line'><span class="no">MQTT</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mqtt://glassx:glassxpw@127.0.0.1&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">c</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s1">&#39;topic&#39;</span><span class="p">,</span> <span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># # Subscribe example</span>
</span><span class='line'><span class="c1"># MQTT::Client.connect(&#39;test.mosquitto.org&#39;) do |c|</span>
</span><span class='line'><span class="c1">#   # If you pass a block to the get method, then it will loop</span>
</span><span class='line'><span class="c1">#   c.get(&#39;test&#39;) do |topic,message|</span>
</span><span class='line'><span class="c1">#     puts &quot;#{topic}: #{message}&quot;</span>
</span><span class='line'><span class="c1">#   end</span>
</span><span class='line'><span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>接收</h2>

<p>接收则是各个客户端的实现了，这里就不写了。</p>

<h2>引用</h2>

<p>官网：<a href="http://mosquitto.org/">http://mosquitto.org/</a></p>

<p>简要教程：<a href="http://blog.csdn.net/shagoo/article/details/7910598">http://blog.csdn.net/shagoo/article/details/7910598</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部署 RabbitMQ 经验]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/bu-shu-rabbitmq-jing-yan/"/>
    <updated>2015-01-30T16:04:25+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/bu-shu-rabbitmq-jing-yan</id>
    <content type="html"><![CDATA[<h2>引用</h2>

<p>在项目中，将一些无需即时返回且耗时的操作提取出来，放入消息队列，进行异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。</p>

<p>RabbitMQ 是一个在 AMQP 基础上完整的，可复用的企业消息系统。他遵循Mozilla Public License开源协议。</p>

<h2>安装</h2>

<p>Ubuntu 下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">rabbitmq</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">debian</span><span class="o">/</span> <span class="n">testing</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="n">wget</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">rabbitmq</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rabbitmq</span><span class="o">-</span><span class="n">signing</span><span class="o">-</span><span class="n">key</span><span class="o">-</span><span class="kp">public</span><span class="o">.</span><span class="n">asc</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">key</span> <span class="n">add</span> <span class="n">rabbitmq</span><span class="o">-</span><span class="n">signing</span><span class="o">-</span><span class="n">key</span><span class="o">-</span><span class="kp">public</span><span class="o">.</span><span class="n">asc</span>
</span><span class='line'>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">rabbitmq</span><span class="o">-</span><span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#/etc/default/rabbitmq-server</span>
</span><span class='line'><span class="n">ulimit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">1024</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 开启服务</span>
</span><span class='line'><span class="n">invoke</span><span class="o">-</span><span class="n">rc</span><span class="o">.</span><span class="n">d</span> <span class="n">rabbitmq</span><span class="o">-</span><span class="n">server</span> <span class="n">stop</span><span class="o">/</span><span class="n">start</span><span class="o">/</span><span class="n">etc</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 开启 WEB 管理</span>
</span><span class='line'><span class="n">rabbitmq</span><span class="o">-</span><span class="n">plugins</span> <span class="n">enable</span> <span class="n">rabbitmq_management</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意事项</h2>

<ol>
<li>要自己添加 /etc/rabbitmq/rabbitmq.config 才行</li>
<li>默认只有本机才能用 guest/guest 账号登陆。否则需要在rabbitmq.config 添加<code>[{rabbit, [{loopback_users, []}]}].</code></li>
<li>rabbitq.config 的格式是：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 就算删除了里面的参数配置，也不能删除这个格式。</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'><span class="o">].</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可能出现的错误</h2>

<ol>
<li>总是提示</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="ss">ls</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">access</span> <span class="sr">/etc/</span><span class="n">rabbitmq</span><span class="o">/</span><span class="n">rabbitmq</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="p">:</span> <span class="no">No</span> <span class="n">such</span> <span class="n">file</span> <span class="ow">or</span> <span class="n">directory</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因： 妈蛋是缺了目录啊！手动创建就可以了，之前一直以为是缺了文件，原来是目录，注意了 <code>conf.d</code> <code>.d</code> 这个结尾的一般都是目录</p>

<h2>懒</h2>

<p>具体就不写了，不过有篇文章写得很好，看看就明白了。</p>

<p><a href="https://ruby-china.org/topics/22332">https://ruby-china.org/topics/22332</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Ruby 中用 SSH 来跟服务器进行通信]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/zai-ruby-zhong-yong-ssh-lai-gen-fu-wu-qi-jin-xing-tong-xin/"/>
    <updated>2014-12-26T15:01:21+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/zai-ruby-zhong-yong-ssh-lai-gen-fu-wu-qi-jin-xing-tong-xin</id>
    <content type="html"><![CDATA[<h1>在Ruby中用SSH跟服务器进行交流</h1>

<h2>前言</h2>

<p>Net::SSH和Net::SCP是两个Ruby操作SSH的gem包。</p>

<p>Net::SSH相当于cmd，专门用于执行命令；</p>

<p>Net::SCP专门用于传输文件。</p>

<p>它们俩结合，可以做任何SSH client能做的事情。</p>

<h2>所需 Gem</h2>

<ol>
<li>gem &lsquo;net-ssh&rsquo;</li>
<li>gem &lsquo;net-scp&rsquo;</li>
</ol>


<h2>Begin</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Net</span><span class="o">::</span><span class="no">SSH</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_ip&quot;</span><span class="o">]</span><span class="p">,</span> <span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_user&quot;</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ssh</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 创建文件夹</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">exec!</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;if [ ! -d </span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> ]; then</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">\</span>
</span><span class='line'>          <span class="s2">&quot;mkdir </span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">;&quot;</span> <span class="p">\</span>
</span><span class='line'>          <span class="s2">&quot;fi&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 开始上传</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">scp</span><span class="o">.</span><span class="n">upload!</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">backup_sql_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">backup_sql_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 客户端开始还原</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">exec!</span><span class="p">(</span><span class="s2">&quot;mysql -u&quot;</span> <span class="o">+</span> <span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_mysql_user&quot;</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s2">&quot; -p&quot;</span> <span class="o">+</span> <span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_mysql_pwd&quot;</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s2">&quot; red_mansions &lt; </span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">backup_sql_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>引用</h2>

<p><a href="http://rubyer.me/blog/1133/">http://rubyer.me/blog/1133/</a></p>

<p><a href="http://www.infoq.com/cn/articles/ruby-file-upload-ssh-intro">http://www.infoq.com/cn/articles/ruby-file-upload-ssh-intro</a></p>

<p><a href="https://gist.github.com/lajunta/7305741">https://gist.github.com/lajunta/7305741</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 rsync]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-rsync/"/>
    <updated>2014-12-26T15:00:40+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-rsync</id>
    <content type="html"><![CDATA[<h1>使用rsync</h1>

<h2>1. 服务器端</h2>

<p><code>/etc/rsyncd.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">uid</span> <span class="o">=</span> deploy
</span><span class='line'><span class="nv">gid</span> <span class="o">=</span> deploy
</span><span class='line'>use <span class="nv">chroot</span> <span class="o">=</span> no
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 4
</span><span class='line'>pid <span class="nv">file</span> <span class="o">=</span> /var/run/rsyncd.pid
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/run/rsyncd.lock
</span><span class='line'>log <span class="nv">file</span> <span class="o">=</span> /var/log/rsyncd.log
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="nb">test</span><span class="o">]</span>
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /var/test
</span><span class='line'>ignore errors
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">list</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>auth <span class="nv">users</span> <span class="o">=</span> fuck
</span><span class='line'>secrets <span class="nv">file</span> <span class="o">=</span> /etc/backserver.pas
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>/etc/backserver.pas</code> （ 需要设置权限400）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hello:world   <span class="o">(</span>该账号密码最好不跟服务器一样）
</span></code></pre></td></tr></table></div></figure>


<p><code>usr/bin/rsync --daemon</code> 启动服务</p>

<p><code>echo "/usr/local/rsync/bin/rsync --daemon" &gt;&gt; /etc/rc.local</code> 开机自启动</p>

<h2>2. 客户端</h2>

<h3>2.1 同步方式</h3>

<h4>2.1.1. 第一种方式是 服务器–客户端方式。</h4>

<p>这种方式，服务器启动 daemon 守护线程，监听端口 873，并配置需要同步的模块，然后客户端连接 873 端口，认证并同步。</p>

<p>其中，同步所使用的账号密码是 rsync  单独配置的，与系统无关。</p>

<p>服务端运行rsync进程在daemon模式下， 客户端是普通的rsync进程。</p>

<h4>2.1.2. 使用 ssh 方式</h4>

<p>本机 rsync 进程 直接通过 ssh 通道连接到远程， 并在远程ssh通道执行命令</p>

<p>两者是走不同协议，不同端口的，因此第一种方式服务器是不需要启动 rsync 服务的，当然还是需要安装这个程序</p>

<h3>2.2 使用账号密码登录（此时服务器需要启动 rsync &ndash;daemon 服务）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USER@HOST::MODE  <span class="c"># mode 是服务器设置好的模块名，这里不能用路径,注意两个冒号</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/etc/rsync_client.pas</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>glassx <span class="c"># 只需要配置连接时使用的密码即可，必须与A服务器上定义的密码相同.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>chmod 600 /etc/rsync_client.pas</code></p>

<p><code>usr/bin/rsync -vzrtopg --progress --delete --password-file=/etc/rsync_client.secrets  hello@192.168.10.240::test   /var/rsync/test</code></p>

<p>跟在IP后的<code>test</code> 是指服务端配置的模块</p>

<h3>2.3 使用SSH （ 此时服务器不需要启动 rsync &ndash;daemon 服务）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USER@HOST:Folder <span class="c"># 注意只有一个冒号,rsync由此判断使用ssh通道。而不是直接连接远端的873端口。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 使用了SSH后，就不能再用 :test 了，而是要跟纯路径。</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>usr/bin/rsync -vzrtopg --progress --delete -e ssh deploy@192.168.10.240:/home/deploy/test   /home/deploy/test</code></p>

<p>注意权限的问题，本地文件夹要有足够权限去同步文件（也不能在该命令前加 sudo, 这样用ssh时会错乱，如果用密码连接则可以）</p>

<h3>2.4 参考</h3>

<p><a href="http://blog.sina.com.cn/s/blog_544f183101013zlo.html">http://blog.sina.com.cn/s/blog_544f183101013zlo.html</a></p>

<p><a href="http://tech.huweishen.com/gongju/1529.html">http://tech.huweishen.com/gongju/1529.html</a></p>

<p><a href="http://www.cszhi.com/20120312/rsync-simple.html">http://www.cszhi.com/20120312/rsync-simple.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mina 简介使用]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/mina-jian-jie-shi-yong/"/>
    <updated>2014-12-26T15:00:12+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/mina-jian-jie-shi-yong</id>
    <content type="html"><![CDATA[<h1>说下 Mina</h1>

<h2>一、基本使用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;ruby&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mina</span> <span class="n">init</span>    <span class="o">=&gt;</span>  <span class="err">生成</span> <span class="n">config</span><span class="o">/</span><span class="n">deploy</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/deploy.rb</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span>  <span class="c1"># 部署用户</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="s1">&#39;your.server.com&#39;</span>   <span class="c1"># 域名</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/var/www/flipstack.com&#39;</span> <span class="c1"># 部署路径</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span> <span class="s1">&#39;git@github.......xxx&#39;</span> <span class="c1">#git 仓库</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span> <span class="c1">#分支</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:shared_paths</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;config/database.yml&#39;</span><span class="p">,</span> <span class="s1">&#39;public/system&#39;</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span> <span class="c1">#共享文件夹</span>
</span><span class='line'>
</span><span class='line'><span class="err">然后：</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span>
</span><span class='line'><span class="ss">task</span><span class="p">:</span> <span class="n">environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">invoke</span> <span class="ss">:&#39;rvm:use[ruby-2.0.0@rails4.0.4]&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">.</span>
</span><span class='line'><span class="c1"># 主要为 deploy 做准备，创建各个文件夹</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:setup</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/log&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/log&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/config&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/config&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/qrcodes&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/qrcodesZip&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/uploads&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/system&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/coupons&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/coupons&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/couponsZip&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/couponsZip&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[touch &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/config/database.yml&quot;]</span>
</span><span class='line'>  <span class="n">queue</span>  <span class="sx">%[echo &quot;-----&gt; Be sure to edit &#39;shared/config/database.yml&#39;.&quot;]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 编写部署任务</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:deploy</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">deploy</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Put things that will set up an empty directory into a fully set-up</span>
</span><span class='line'>    <span class="c1"># instance of your project.</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;sidekiq:quiet&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;git:clone&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;deploy:link_shared_paths&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;bundle:install&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;rails:db_migrate&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;rails:assets_precompile&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">to</span> <span class="ss">:launch</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">queue</span> <span class="s2">&quot;if [ -d </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp ]</span>
</span><span class='line'><span class="s2">      then</span>
</span><span class='line'><span class="s2">        touch </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp/restart.txt</span>
</span><span class='line'><span class="s2">      else</span>
</span><span class='line'><span class="s2">        mkdir </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp</span>
</span><span class='line'><span class="s2">        touch </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp/restart.txt </span>
</span><span class='line'><span class="s2">      fi&quot;</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:&#39;sidekiq:restart&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>终端执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mina</span> <span class="n">setup</span>
</span><span class='line'>
</span><span class='line'><span class="n">mina</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<h2>二、应该要注意的 <code>point</code></h2>

<p>1、我们可以自己写 task 任务</p>

<p>2、queue 命令用在执行 bash 命令，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:logs</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">queue</span> <span class="s1">&#39;echo &quot;Contents of the log file are as follows:&quot;&#39;</span>
</span><span class='line'>     <span class="n">queue</span> <span class="s2">&quot;tail -f /var/log/apache.log&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、invoke 命令用在引用已经写好的 task 任务，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:down</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">invoke</span> <span class="ss">:maintenance</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:maintenance</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">queue</span> <span class="s1">&#39;touch maintenance.txt&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>4、Mina 已经有一些已经写好的 task 任务，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">invoke</span> <span class="ss">:&#39;git:clone&#39;</span>
</span><span class='line'><span class="n">invoke</span> <span class="ss">:&#39;bundle:install&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#我一开始以为这是执行 bash 命令，让我理不清 invoke 跟 queue 的关系</span>
</span></code></pre></td></tr></table></div></figure>


<p>5、<code>run!</code> 这个命令是指 SSH 进主机，然后执行所有已经 queue 的命令。这个命令会在 Rake 退出前，自动调用。</p>

<p>6、<code>command</code> 包含所有已经 queue 的任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queue</span> <span class="s2">&quot;sudo restart&quot;</span>
</span><span class='line'><span class="n">queue</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">to</span> <span class="ss">:clean</span> <span class="k">do</span>     <span class="c1"># 这里 clean 的queue 会被放到 :clean 命名空间下</span>
</span><span class='line'>  <span class="n">queue</span> <span class="s2">&quot;rm&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;sudo restart&quot;</span><span class="p">,</span> <span class="s2">&quot;true&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">commands</span><span class="p">(</span><span class="ss">:clean</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;rm&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>7、<code>isolate</code> 命令会开辟一个新的 block，包含 queue 的任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queue</span> <span class="s2">&quot;sudo restart&quot;</span>
</span><span class='line'><span class="n">queue</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;sudo restart&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="s2">&quot;reload&quot;</span>
</span><span class='line'>  <span class="n">commands</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;reload&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;sudo restart&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>8、已被 invoke 的 task, 再次被 invoke 时，是不会再次被执行的。</p>

<h2>三、多机部署</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;multi deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:multi_deploy</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">domains</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="n">run!</span>    <span class="o">=&gt;</span> <span class="c1"># 注意这里一定要加上 run! ，才会立即运行命令</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;finish to deploy&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>自己写的一个 task, 这时候遇到一个难题，发现 invoke :deploy ，当第一次循环的时候正常，第二次循环的时候，会部署两次。</p>

<p>效果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>  <span class="p">(</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我的 domains  是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么效果会是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>  <span class="p">(</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>发觉最终总是会多部署最后一个server</p>

<p>于是我用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="s2">&quot;命令集合：</span><span class="si">#{</span><span class="n">commands</span><span class="p">(</span><span class="ss">:default</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>来查看，也没有什么异常。</p>

<p>然后我又做了下实验：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy_primary</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;begin to deploy primary </span><span class="si">#{</span><span class="n">primary_domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">primary_domain</span>
</span><span class='line'>  <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>  <span class="n">invoke</span> <span class="ss">:mysql_sync</span>
</span><span class='line'>  <span class="n">run!</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;finish to deploy primary </span><span class="si">#{</span><span class="n">primary_domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">commands</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>发觉这样子也会重复部署两次，看来这是跟<code>invoke :deploy</code>这个特殊 task 有关了。</p>

<h3>解决方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;multi deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:multi_deploy</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">isolate</span> <span class="k">do</span>   <span class="c1"># =&gt;  开辟一个新的 block ( 不过为何能解决我还没弄懂）</span>
</span><span class='line'>    <span class="n">domains</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="n">run!</span>    <span class="o">=&gt;</span> <span class="c1"># 注意这里一定要加上 run! ，才会立即运行命令</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;finish to deploy&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结点</h2>

<p>第一次 invoke :deploy 的时候， mina 会去处理很多东西，第二次的时候就不会去处理了。因此如果这样子做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy_primary</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">primary_domain</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">other_domain</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个 :deploy 是不会生效的，会出毛病。因此如果要连续 invoke :deploy 的话，必须要放在同一个 isolate 下才行。</p>

<h2>单独执行命令</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:mysql_sync</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="sx">%[cd </span><span class="si">#{</span><span class="n">deploy_to!</span><span class="si">}</span><span class="sx">/current &amp;&amp; whenever -i &#39;mysql_sync&#39;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当初单独执行这个 task  的时候，一直提示找不到 whenever 这个命令，令人纳闷，最终发现需要加上环境。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:mysql_sync</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="sx">%[cd </span><span class="si">#{</span><span class="n">deploy_to!</span><span class="si">}</span><span class="sx">/current &amp;&amp; whenever -i &#39;mysql_sync&#39;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>重复的 queue</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;multi deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:multi_deploy</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">isolate</span> <span class="k">do</span>   <span class="c1"># =&gt;  开辟一个新的 block ( 不过为何能解决我还没弄懂）</span>
</span><span class='line'>    <span class="n">domains</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>         <span class="n">queue</span> <span class="s1">&#39;do something one&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>         <span class="n">queue</span> <span class="s1">&#39;do something two&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">run!</span>    <span class="o">=&gt;</span> <span class="c1"># 注意这里一定要加上 run! ，才会立即运行命令</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;finish to deploy&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子的话，当第二次循环时，会执行 <code>one</code> 和 <code>two</code> 两个 queue, 因为第一次循环时， <code>one</code> 已经 queued 了，进入了 commands，因此第二次循环时，会执行这个命令 （  执行所有 commands)</p>

<p>这是个难点。我还没找到解决方法。只能说分开来执行</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Capistrano 来部署应用]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-capistrano-lai-bu-shu-ying-yong/"/>
    <updated>2014-12-26T14:58:57+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-capistrano-lai-bu-shu-ying-yong</id>
    <content type="html"><![CDATA[<h1>使用 Capistrano 部署应用</h1>

<h2>前言</h2>

<p>由于 Mina 一直以简单好用为著称，因此一直都是用 Mina 来部署应用。但是  Mina 也有局限性，之前的多机部署就遇到了难题，于是学习下如何用 Capistrano 来部署 Rails 应用</p>

<h2>使用环境</h2>

<ol>
<li>Capistrano 3.x</li>
<li>Rails4.1</li>
<li>Ruby2.0</li>
<li>RVM</li>
</ol>


<h2>安装</h2>

<p>在<code>gemfile</code>中添加支持的 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-bundler&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rvm&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cap</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中有几个比较重要的文件：</p>

<ol>
<li>Capfile用来配置Capistrano</li>
<li>deploy.rb是一些共用task的定义</li>
<li>production.rb / staging.rb用来定义具体的stage的tasks。</li>
</ol>


<p>通过 <code>cap -vT</code> 可以查看当前可用的 task</p>

<h2>配置</h2>

<p><code>capfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Load DSL and Setup Up Stages</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/setup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Includes default deployment tasks</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/deploy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 配置支持的插件</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Loads custom tasks from `lib/capistrano/tasks&#39; if you have any defined.</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;lib/capistrano/tasks/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>deploy.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config valid only for Capistrano 3.1</span>
</span><span class='line'><span class="n">lock</span> <span class="s1">&#39;3.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;student_lottery&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@bitbucket.org:linjunzhugg/student_lottery.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default branch is :master</span>
</span><span class='line'><span class="c1"># ask :branch, proc { `git rev-parse --abbrev-ref HEAD`.chomp }.call</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default deploy_to directory is /var/www/my_app</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/student_lottery&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :scm is :git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :format is :pretty</span>
</span><span class='line'><span class="c1"># set :format, :pretty</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :log_level is :debug</span>
</span><span class='line'><span class="c1"># set :log_level, :debug</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :pty is false</span>
</span><span class='line'><span class="c1"># set :pty, true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :linked_files is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for linked_dirs is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_ruby_version</span><span class="p">,</span> <span class="s1">&#39;ruby-2.0.0-p481@rails4.0.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for default_env is {}</span>
</span><span class='line'><span class="c1"># set :default_env, { path: &quot;/opt/ruby/bin:$PATH&quot; }</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for keep_releases is 5</span>
</span><span class='line'><span class="c1"># set :keep_releases, 5</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Restart application&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Your restart mechanism here, for example:</span>
</span><span class='line'>      <span class="c1"># execute :touch, release_path.join(&#39;tmp/restart.txt&#39;)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 就是这里插入的任务</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:clear_cache</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">10</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Here we can do anything such as:</span>
</span><span class='line'>      <span class="c1"># within release_path do</span>
</span><span class='line'>      <span class="c1">#   execute :rake, &#39;cache:clear&#39;</span>
</span><span class='line'>      <span class="c1"># end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>config/production.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;192.168.0.13&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;deploy&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{web}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure>


<h2>开始部署</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span>  <span class="c1"># 开始部署</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时有人疑惑了，咦？这条命令的 task 在哪呢？我要如何定义自己的task 呢？</p>

<p>根据官方文档：一旦运行 <code>cap production deploy</code> ，就默认有以下这些任务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">starting</span>    <span class="o">-</span> <span class="n">start</span> <span class="n">a</span> <span class="n">deployment</span><span class="p">,</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">everything</span> <span class="n">is</span> <span class="n">ready</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">started</span>     <span class="o">-</span> <span class="n">started</span> <span class="n">hook</span> <span class="p">(</span><span class="k">for</span> <span class="n">custom</span> <span class="n">tasks</span><span class="p">)</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">updating</span>    <span class="o">-</span> <span class="n">update</span> <span class="n">server</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">with</span> <span class="n">a</span> <span class="kp">new</span> <span class="n">release</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">updated</span>     <span class="o">-</span> <span class="n">updated</span> <span class="n">hook</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">publishing</span>  <span class="o">-</span> <span class="n">publish</span> <span class="n">the</span> <span class="kp">new</span> <span class="n">release</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">published</span>   <span class="o">-</span> <span class="n">published</span> <span class="n">hook</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">finishing</span>   <span class="o">-</span> <span class="n">finish</span> <span class="n">the</span> <span class="n">deployment</span><span class="p">,</span> <span class="n">clean</span> <span class="n">up</span> <span class="n">everything</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">finished</span>    <span class="o">-</span> <span class="n">finished</span> <span class="n">hook</span>
</span></code></pre></td></tr></table></div></figure>


<p>而我们之前在 <code>capfile</code> 中添加了以下的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 配置支持的插件</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些会自动在 starting  updating 等任务中插入 before after 任务，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deploy</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">starting</span>
</span><span class='line'>    <span class="o">[</span><span class="n">before</span><span class="o">]</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">ensure_stage</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">set_shared_assets</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="n">check</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">started</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">updating</span>
</span><span class='line'>    <span class="ss">git</span><span class="p">:</span><span class="n">create_release</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="ss">symlink</span><span class="p">:</span><span class="n">shared</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">updated</span>
</span><span class='line'>    <span class="o">[</span><span class="n">before</span><span class="o">]</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">bundle</span>
</span><span class='line'>    <span class="o">[</span><span class="n">after</span><span class="o">]</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">migrate</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">compile_assets</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">normalize_assets</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">publishing</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="ss">symlink</span><span class="p">:</span><span class="n">release</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">published</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">finishing</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="n">cleanup</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">finished</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="n">log_revision</span>
</span></code></pre></td></tr></table></div></figure>


<p>从中我们可以看到里面有 bundle   migrate 等任务。</p>

<h2>其他插件</h2>

<p>比如 sidekiq 的自动重启，可以加上 <code>capistrano-sidekiq</code>  gem</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 使用 LVM 来进行硬盘扩容]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/linux-shi-yong-lvm-lai-jin-xing-ying-pan-kuo-rong/"/>
    <updated>2014-12-26T14:56:45+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/linux-shi-yong-lvm-lai-jin-xing-ying-pan-kuo-rong</id>
    <content type="html"><![CDATA[<h1>Linux 使用 LVM 进行硬盘扩容</h1>

<h2>前言</h2>

<p>这阵子某个项目的服务器硬盘爆了，导致服务出现了异常，汗，现在用着 Google 和 阿里云 的云服务器，但发现两者都没有直接扩容的功能。因此需要用到 LVM 来对硬盘进行动态扩容，不过并不能在云服务器的默认硬盘上，需要另外购置一块硬盘</p>

<h2>什么是 LVM？</h2>

<p>LVM 的全名是 Logical Volumn Manager，逻辑卷轴管理员，其中有几个概念： PV VG LV PE</p>

<p>PV 指将硬盘转成 <code>Linux LVM</code> 格式</p>

<p>PE 是 LVM 的最小存储区块。</p>

<p><img src="http://linux.vbird.org/linux_basic/0420quota/pe_vg.gif" alt="" /></p>

<h2>对硬盘进行分区</h2>

<p>先切换到 root 用户</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">su</span> <span class="o">-</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看系统已经识别的硬盘</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="o">-</span><span class="n">l</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 显示主要信息，会发现有两块硬盘，sdb 则是我们刚刚购置的硬盘</span>
</span><span class='line'><span class="no">Disk</span> <span class="sr">/dev/s</span><span class="ss">da</span><span class="p">:</span> <span class="mi">10</span><span class="o">.</span><span class="mi">7</span> <span class="no">GB</span><span class="p">,</span> <span class="mi">10737418240</span> <span class="n">bytes</span>
</span><span class='line'><span class="no">Disk</span> <span class="sr">/dev/s</span><span class="ss">db</span><span class="p">:</span> <span class="mi">75</span><span class="o">.</span><span class="mi">2</span> <span class="no">GB</span><span class="p">,</span> <span class="mi">75161927680</span> <span class="n">bytes</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="sr">/dev/s</span><span class="n">db</span>      <span class="c1"># 对硬盘进行操作</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>  <span class="nb">p</span><span class="p">(</span><span class="err">显示分区情况</span><span class="p">)</span>
</span><span class='line'>   <span class="n">n</span><span class="p">(</span><span class="err">新建分区</span><span class="p">)</span>
</span><span class='line'>   <span class="n">e</span><span class="p">(</span><span class="err">创建扩展分区</span><span class="p">)</span>
</span><span class='line'>   <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="p">(</span><span class="err">创建逻辑分区</span><span class="p">)</span>
</span><span class='line'>   <span class="n">t</span><span class="p">(</span><span class="err">设置磁盘</span><span class="no">Hex</span> <span class="n">code</span><span class="p">)</span><span class="err">——</span><span class="o">&gt;</span><span class="c1">#8e(LinuxLVM)——&gt;#w(保存操作)</span>
</span><span class='line'> <span class="sb">```</span>
</span><span class='line'>
</span><span class='line'><span class="sb"> ```</span><span class="n">ruby</span>
</span><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="sr">/dev/s</span><span class="n">db</span>
</span><span class='line'><span class="err">$</span> <span class="nb">p</span>
</span><span class='line'>
</span><span class='line'><span class="err">会发现：</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Device</span> <span class="no">Boot</span>      <span class="no">Start</span>     <span class="no">End</span>      <span class="no">Blocks</span>      <span class="no">Id</span>     <span class="no">System</span>
</span><span class='line'>    <span class="sr">/dev/s</span><span class="n">db1</span>          <span class="mi">1</span>       <span class="mi">2080</span>     <span class="mi">1048288</span><span class="o">+</span>     <span class="mi">5</span>     <span class="no">Extended</span>
</span><span class='line'>    <span class="sr">/dev/s</span><span class="n">db5</span>          <span class="mi">1</span>       <span class="mi">2080</span>     <span class="mi">1048257</span>      <span class="mi">8</span><span class="n">e</span>    <span class="no">Linux</span> <span class="no">LVM</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的逻辑分区 sdb5 已经成功的成为了 <code>Linux LVM</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">partprobe</span> <span class="p">(</span> <span class="err">让</span> <span class="n">kernel</span> <span class="err">重新读取磁盘分区表，即刻生效）</span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装 LVM</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">lvm2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建 PV</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">pvcreate</span> <span class="sr">/dev/s</span><span class="n">db5</span>      <span class="c1"># 将此分区转换成为 PV</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">pvs</span>    <span class="c1"># 显示所有 PV 情况</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">PV</span>         <span class="no">VG</span>   <span class="no">Fmt</span>  <span class="no">Attr</span> <span class="no">PSize</span>  <span class="no">PFree</span>
</span><span class='line'>  <span class="sr">/dev/s</span><span class="n">db5</span>       <span class="n">lvm2</span> <span class="n">a</span><span class="o">-</span>   <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时发现还没有一个VG</p>

<h2>创建 VG</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vgcreate</span> <span class="n">vg_data</span> <span class="sr">/dev/s</span><span class="n">db5</span>     <span class="c1"># 这里的 vg_data 是自定义的</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">vgs</span>   <span class="c1"># 显示所有 VG </span>
</span><span class='line'>
</span><span class='line'>  <span class="no">VG</span>      <span class="c1">#PV #LV #SN Attr   VSize  VFree</span>
</span><span class='line'>  <span class="n">vg_data</span>   <span class="mi">1</span>   <span class="mi">0</span>   <span class="mi">0</span> <span class="n">wz</span><span class="o">--</span><span class="n">n</span><span class="o">-</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">pvs</span>  <span class="c1"># 显示所有 PV</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">PV</span>         <span class="no">VG</span>      <span class="no">Fmt</span>  <span class="no">Attr</span> <span class="no">PSize</span>  <span class="no">PFree</span>
</span><span class='line'>  <span class="sr">/dev/s</span><span class="n">db5</span>  <span class="n">vg_data</span> <span class="n">lvm2</span> <span class="n">a</span><span class="o">-</span>   <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 会发现 PV 下有个 VG 了  </span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建 LV</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">lvcreate</span> <span class="o">-</span><span class="n">n</span> <span class="n">lv_data</span> <span class="o">-</span><span class="n">L</span> <span class="mi">69</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span> <span class="n">vg_data</span>  <span class="c1"># 另外的 0.5 G 需要用于其他用途</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">lvs</span>  <span class="c1"># 显示所有 LV</span>
</span><span class='line'>
</span><span class='line'><span class="no">LV</span>      <span class="no">VG</span>      <span class="no">Attr</span>   <span class="no">LSize</span>  <span class="no">Origin</span> <span class="no">Snap</span><span class="o">%</span>  <span class="no">Move</span> <span class="no">Log</span> <span class="no">Copy</span><span class="o">%</span>  <span class="no">Convert</span>
</span><span class='line'>  <span class="n">lv_data</span> <span class="n">vg_data</span> <span class="o">-</span><span class="n">wi</span><span class="o">-</span><span class="n">a</span><span class="o">-</span> <span class="mi">69</span><span class="o">.</span><span class="mi">50</span><span class="n">g</span>
</span></code></pre></td></tr></table></div></figure>


<h2>格式化分区</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">mkfs</span><span class="o">.</span><span class="n">ext4</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>
</span><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="o">-</span><span class="n">l</span>
</span><span class='line'><span class="err">$</span> <span class="n">mount</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span> <span class="sr">/mnt/</span>   <span class="c1"># 挂到 mnt 下</span>
</span></code></pre></td></tr></table></div></figure>


<h2>以后如何动态扩容？</h2>

<ol>
<li>用 fdisk 設定新的具有 8e system ID 的 partition</li>
<li>利用 pvcreate 建置 PV</li>
<li>利用 vgextend 將 PV 加入我們的 vg_data</li>
<li>用 lvresize 將新加入的 PV 內的 PE 加入 lv_data 中</li>
<li>透過 resize2fs 將檔案系統的容量確實增加！</li>
</ol>


<h3>实际操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="sr">/dev/s</span><span class="n">db10</span>   <span class="o">=&gt;</span> <span class="err">其他动作参考上面</span>
</span><span class='line'><span class="err">$</span> <span class="n">partprobe</span>
</span><span class='line'><span class="err">$</span> <span class="n">pvcreate</span> <span class="sr">/dev/s</span><span class="n">db10</span>
</span><span class='line'><span class="err">$</span> <span class="n">vgextend</span> <span class="n">vg_data</span> <span class="sr">/dev/s</span><span class="n">db10</span>
</span><span class='line'><span class="err">$</span> <span class="n">vgdisplay</span> <span class="c1"># 显示 VG 的具体信息，会看到剩余的 PE ，假设为 90个</span>
</span><span class='line'><span class="err">$</span> <span class="n">lvresize</span> <span class="o">-</span><span class="n">l</span> <span class="o">+</span><span class="mi">90</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>    <span class="c1"># 放大 LV</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时 LVM 扩容了，但是档案系统还显示原先的大小</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resize2fs</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>  <span class="c1"># 完整将 LV 容量扩充到整个 filesystem</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># df /mnt/lvm   # 查看大小</span>
</span></code></pre></td></tr></table></div></figure>


<h2>机子重启后自动挂载</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$blkid</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>  <span class="c1"># 查看该设备的 UUID</span>
</span><span class='line'><span class="err">$</span> <span class="n">vim</span> <span class="sr">/etc/</span><span class="n">fstab</span>   <span class="c1"># 编辑自动挂载的名单</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="err">》</span><span class="no">UUID</span><span class="o">=</span><span class="mi">1</span><span class="n">eb099f3</span><span class="o">-</span><span class="mi">5332</span><span class="o">-</span><span class="mi">43</span><span class="n">d7</span><span class="o">-</span><span class="n">a98d</span><span class="o">-</span><span class="mi">6</span><span class="n">c1238572cd5</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span><span class="n">red_mansions</span>        <span class="n">ext4</span>    <span class="n">defaults</span> <span class="mi">0</span>   <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">df</span> <span class="o">-</span><span class="no">TH</span>  <span class="c1"># 查看下所有设备</span>
</span><span class='line'>
</span><span class='line'><span class="no">Filesystem</span>     <span class="no">Type</span>      <span class="no">Size</span>  <span class="no">Used</span> <span class="no">Avail</span> <span class="no">Use</span><span class="o">%</span> <span class="no">Mounted</span> <span class="n">on</span>
</span><span class='line'><span class="sr">/dev/s</span><span class="n">da1</span>      <span class="n">ext4</span>       <span class="mi">11</span><span class="n">G</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="n">G</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span>  <span class="mi">27</span><span class="o">%</span> <span class="o">/</span>
</span><span class='line'><span class="n">udev</span>           <span class="n">devtmpfs</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>  <span class="mi">8</span><span class="o">.</span><span class="mi">2</span><span class="n">k</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">1</span><span class="o">%</span> <span class="sr">/dev</span>
</span><span class='line'><span class="sr">tmpfs          tmpfs     389M  242k  388M   1% /</span><span class="n">run</span>
</span><span class='line'><span class="n">none</span>           <span class="n">tmpfs</span>     <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>     <span class="mi">0</span>  <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/</span><span class="n">lock</span>
</span><span class='line'><span class="n">none</span>           <span class="n">tmpfs</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>     <span class="mi">0</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/s</span><span class="n">hm</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>  <span class="n">mount</span> <span class="o">-</span><span class="n">a</span> <span class="c1"># 按照 fstab 文件重新挂载一遍</span>
</span><span class='line'><span class="err">$</span>  <span class="n">df</span> <span class="o">-</span><span class="no">TH</span>
</span><span class='line'>
</span><span class='line'><span class="no">Filesystem</span>                  <span class="no">Type</span>      <span class="no">Size</span>  <span class="no">Used</span> <span class="no">Avail</span> <span class="no">Use</span><span class="o">%</span> <span class="no">Mounted</span> <span class="n">on</span>
</span><span class='line'><span class="sr">/dev/s</span><span class="n">da1</span>                   <span class="n">ext4</span>       <span class="mi">11</span><span class="n">G</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="n">G</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span>  <span class="mi">27</span><span class="o">%</span> <span class="o">/</span>
</span><span class='line'><span class="n">udev</span>                        <span class="n">devtmpfs</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>  <span class="mi">8</span><span class="o">.</span><span class="mi">2</span><span class="n">k</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">1</span><span class="o">%</span> <span class="sr">/dev</span>
</span><span class='line'><span class="sr">tmpfs                       tmpfs     389M  242k  388M   1% /</span><span class="n">run</span>
</span><span class='line'><span class="n">none</span>                        <span class="n">tmpfs</span>     <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>     <span class="mi">0</span>  <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/</span><span class="n">lock</span>
</span><span class='line'><span class="n">none</span>                        <span class="n">tmpfs</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>     <span class="mi">0</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/s</span><span class="n">hm</span>
</span><span class='line'><span class="sr">/dev/m</span><span class="n">apper</span><span class="o">/</span><span class="n">vg_data</span><span class="o">-</span><span class="n">lv_data</span> <span class="n">ext4</span>       <span class="mi">74</span><span class="n">G</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span>   <span class="mi">63</span><span class="n">G</span>  <span class="mi">11</span><span class="o">%</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span><span class="n">red_mansions</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 会发现设备已经挂载上去了。</span>
</span></code></pre></td></tr></table></div></figure>


<h2>给 设备 赋予授权</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">chown</span> <span class="o">-</span><span class="n">R</span> <span class="ss">deploy</span><span class="p">:</span><span class="n">deploy</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span>  <span class="c1"># 因为默认属于 root 权限</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://linux.vbird.org/linux_basic/0420quota.php#lvm">http://linux.vbird.org/linux_basic/0420quota.php#lvm</a>
<a href="http://www.ichiayi.com/wiki/tech/lvm">http://www.ichiayi.com/wiki/tech/lvm</a>
<a href="http://allen7111382.blog.51cto.com/202304/268562">http://allen7111382.blog.51cto.com/202304/268562</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[后台任务 VS 消息队列 -「译」]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/hou-tai-ren-wu-vs-xiao-xi-dui-lie-%5Byi-%5D/"/>
    <updated>2014-12-26T14:56:25+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/hou-tai-ren-wu-vs-xiao-xi-dui-lie-[yi-]</id>
    <content type="html"><![CDATA[<h1>后台任务 VS 消息队列</h1>

<p>一件常见的事情，我看到工程师们认为消息队列跟后台任务是相等的。这是他们所忽略的：消息队列是一个后台任务的超集。所有的信息进程都在后台完成，但是后台任务并没有通过消息队列来完成。</p>

<p>拿一个简单的使用例子：当一个用户注册时，我想要去发一条欢迎 email，正常你会想在后台发送这封 Email，因此不影响用户的使用体验，但你真的需要去安装 ActiveMQ，RabbitMQ 或者 Resque 去做这些吗？显然不需要。</p>

<p>在建造一个复杂的系统时消息队列是一个基本的建筑模式。你的许多系统组件也许被不同团队所编写，但是他们用队列实现消息发送来通信，一个组件可以发送消息给另外一个组件说：“请发送这封邮件”。但是消息队列系统有它们的代价：它们是复杂的，因为他们被设计成你的分发系统的地基，他们必须被部署和监控，他们必须是可靠并且高可用的。</p>

<p>很多人安装消息队列去运行简单的后台程序，我认为并不需要这么复杂，我有一个简单的问题：“我是在让两个不同的子系统进行通信还是仅仅在衍生相同的工作？”几乎每一个网站都会立即面临注册邮件案例。想想在用户的浏览器投票结果中，执行一些操作可能需要30-60秒的时间，衍生出单独的线程去运行这些工程是完全充足且太过于简单的，这也是我 girl_friday 项目背后的原因，我想要一个简单并且可靠的方式去运行后台任务，而不需要复杂的消息队列系统。</p>

<h2>总结</h2>

<p>总的来说， 简单的任务用 sidekiq 等后台任务来处理即可。</p>

<p>MQ 适用于比较大型的，异构系统，多个系统间的相互通信。</p>

<p>MQ 是 sidekiq 的超集。</p>

<p>Sidekiq 背后的原理是将任务都放入队列，然后用多个线程去运行任务。</p>

<h2>Sidekiq 使用场景</h2>

<p>比如发邮件，完成一些耗时的任务等。</p>

<p>代码大概是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/workers/hard_worker.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HardWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1"># 这里系统会不断将任务压入队列，然后启动线程去执行任务</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Doing hard work&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>MQ 使用场景</h2>

<p>将一堆任务压入消息队列，然后让其他系统取出任务进行实现。</p>

<p>虽然我也可以将「发邮件」压入消息队列，然后在系统内取出进行发邮件，不过总归大材小用</p>

<p>代码大概是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 发布者</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Publisher</span>
</span><span class='line'>  <span class="c1"># In order to publish message we need a exchange name.</span>
</span><span class='line'>  <span class="c1"># Note that RabbitMQ does not care about the payload -</span>
</span><span class='line'>  <span class="c1"># we will be using JSON-encoded strings</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">exchange</span><span class="p">,</span> <span class="n">message</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="c1"># grab the fanout exchange</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">fanout</span><span class="p">(</span><span class="s2">&quot;blog.</span><span class="si">#{</span><span class="n">exchange</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># and simply publish message</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">channel</span>
</span><span class='line'>    <span class="vi">@channel</span> <span class="o">||=</span> <span class="n">connection</span><span class="o">.</span><span class="n">create_channel</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We are using default settings here</span>
</span><span class='line'>  <span class="c1"># The `Bunny.new(...)` is a place to</span>
</span><span class='line'>  <span class="c1"># put any specific RabbitMQ settings</span>
</span><span class='line'>  <span class="c1"># like host or port</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">||=</span> <span class="no">Bunny</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 消费者</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># dashboard/app/workers/posts_worker.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sneakers</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="c1"># This worker will connect to &quot;dashboard.posts&quot; queue</span>
</span><span class='line'>  <span class="c1"># env is set to nil since by default the actuall queue name would be</span>
</span><span class='line'>  <span class="c1"># &quot;dashboard.posts_development&quot;</span>
</span><span class='line'>  <span class="n">from_queue</span> <span class="s2">&quot;dashboard.posts&quot;</span><span class="p">,</span> <span class="ss">env</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># work method receives message payload in raw format</span>
</span><span class='line'>  <span class="c1"># in our case it is JSON encoded string</span>
</span><span class='line'>  <span class="c1"># which we can pass to RecentPosts service without</span>
</span><span class='line'>  <span class="c1"># changes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">raw_post</span><span class="p">)</span>
</span><span class='line'>    <span class="no">RecentPosts</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">raw_post</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ack!</span> <span class="c1"># we need to let queue know that message was received</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">然后还有</span> <span class="no">Exchange</span> <span class="n">queue</span> <span class="err">绑定啊之类的</span>
</span></code></pre></td></tr></table></div></figure>


<p>相信看完代码会对两者的区别更清晰点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dalli -「译」]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/dalli-%5Byi-%5D/"/>
    <updated>2014-12-26T14:55:59+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/dalli-[yi-]</id>
    <content type="html"><![CDATA[<h1>Dalli</h1>

<p>Dalli 对于 memcached 服务是一个高性能的纯Ruby 客户端，它工作于 1.4+ 版本的 memcached，因为它使用了较新的二进制协议。它被认为是 memcache-client gem 的替代品。</p>

<p>  这个名字是一位葡萄牙画家的有名画作的变种。</p>

<p>  Dalli的最初版本是 CouchBase 赞助的，非常感谢他！</p>

<h2>设计</h2>

<p>在维护 memcache-client 两年后，因为一些特殊的原因我决定去写 Dalli。</p>

<ol>
<li>代码太过老旧以及粗糙，大部分的代码是单独的 1000 行 .rb 文件</li>
<li>它的许多参数都很少被使用并且复杂化了代码库</li>
<li>实施监控钩子的时候没有单独的店</li>
<li>使用太旧的文本协议，降低了未处理的性能</li>
</ol>


<p>所以有一些笔记，Dailli:</p>

<ol>
<li>使用确切相同的算法去选择一个服务，因此存在的 memcached集群运行起 TB级的数据跟 memcache-client 一样</li>
<li>在 Ruby 1.9.2 中大约比 memcache-client 快百分之20</li>
<li>包含详细的“阻塞点”方法，能够处理所有请求；这些通过检测工具能够被 hook 来追踪 memcached的使用情况</li>
<li>在管理环境下支持 SASL</li>
<li>提供正确的故障切换和可调控的超时</li>
</ol>


<h1>支持 Ruby 版本</h1>

<p>Dalli应该工作于：</p>

<ol>
<li>JRuby 1.6+</li>
<li>Ruby 1.9.3+</li>
<li>Rubinius 2.0</li>
</ol>


<p>如果你有问题，请提 issue</p>

<h1>安装和使用</h1>

<p>记住，Dalli要求 memcached 1.4+，你可以通过 <code>memcached -h</code> 来检查版本。请注意 memcached 1.2.8 版本和 Mac OS X Snow Leopadrd 不兼容。通过 Homebrew 来安装 memacached 1.4.x</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">memcached</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Ubuntu 上你可以通过运行以下命令来安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">memcached</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用下面这段代码来确认安装情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">dalli</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;dalli&#39;</span>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="s2">&quot;app_v1&quot;</span><span class="p">,</span> <span class="ss">:compress</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="n">dc</span> <span class="o">=</span> <span class="no">Dalli</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;localhost:11211&#39;</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="n">dc</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="n">dc</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这测试套件要求 memcached 1.4.3+ 和激活的 SASL。Dalli 没有运行时依赖并且以后也不会有。你可以自定义安装 &lsquo;kgio&rsquo; gem 去给 Dalli 提升 百分之20到30的运行提升。</p>

<h2>在 Rails3.X 和 Rails4.X 的使用</h2>

<p>在你的 gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;dalli&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>config/environments/production.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里是一个更全面的例子，在这个 Rails App 中，设置了一天内的最大缓存，压缩过大的数据和对所有记录进行命名空间规划，如果你有多个 APP 并且要共享缓存的值，可以移除命名空间。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="s1">&#39;cache-1.example.com&#39;</span><span class="p">,</span> <span class="s1">&#39;cache-2.example.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="no">NAME_OF_RAILS_APP</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:compress</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的服务器在<code>ENV["MEMCACHE_SERVERS"]</code>有特别的设置（比如在 Heroku使用第三方缓存服务时），在服务器中简单的提供<code>nil</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="no">NAME_OF_RAILS_APP</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:compress</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 Dalli 为了20分钟后 Rails 的 session 存储过期， 在<code>config/initializers/session_store.rb</code>中：</p>

<p>针对 Rails >= 3.2.4 :</p>

<pre><code class="`ruby"> Rails.application.config.session_store ActionDispatch::Session::CacheStore, :expire_after =&gt; 20.minutes
</code></pre>

<p>针对 Rails 3.X :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_dispatch/middleware/session/dalli_store&#39;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">session_store</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="ss">:memcache_server</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;host1&#39;</span><span class="p">,</span> <span class="s1">&#39;host2&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions&#39;</span><span class="p">,</span> <span class="ss">:key</span> <span class="o">=&gt;</span> <span class="s1">&#39;_foundation_session&#39;</span><span class="p">,</span> <span class="ss">:expire_after</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="o">.</span><span class="n">minutes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dalli 不支持 Rails 2.X。</p>

<h1>Rails 和多线程</h1>

<p>如果你使用 Puma 或者其他的多线程 APP SERVER，在 Dalli 2.7 中，你可以使用Dalli 客户端池，并且确认 Rails.cache 并不会变成多线程的资源。你必须添加 <code>gem 'connection_pool</code> 到你的 gemfile 中，以及加上 <code>:pool_size</code> 到 <code>dalli_store</code> 配置中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="s1">&#39;cache-1.example.com&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:pool_size</span> <span class="o">=&gt;</span> <span class="mi">5</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后你可以像平常一样使用 Rails 的 cache，并且 Rails.cache 会使用连接池，或者你可以检验 Dalli 客户端指向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">300</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="s1">&#39;bar&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">dalli</span><span class="o">.</span><span class="n">with</span> <span class="k">do</span> <span class="o">|</span><span class="n">client</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># client is a Dalli::Client instance which you can</span>
</span><span class='line'>  <span class="c1"># use ONLY within this block</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>配置</h1>

<p><code>Dalli:Client</code>接受以下的参数，所有的时间都在几秒内。</p>

<p><code>expires_in</code> : 全局默认 TTL 的 key 为 0，意味着不过期</p>

<p><code>namespace</code> : 如果有规定，预先考虑每一个key和它的值提供一个简单的命名空间，默认是 nil</p>

<p><code>failover</code> ：boolean 值，如果为 true 并且当主要的服务崩溃时，Daill 将会切换到另一个服务，默认为 true</p>

<p><code>threadsafe</code> : boolean 值，如果为 true，Dalli 会确保只有一个线程在给定的时间内使用socket，默认为 true, 设置为 false 是很危险的。</p>

<p><code>serializer</code> : 能够使对象进行存储。</p>

<p><code>compress</code> : boolean  值， 如果为true, Dalli 将会用 gzip 来压缩超过 1K 的数据，默认为 false</p>

<p><code>compression_min_size</code>  ：当超过这个数值时就尝试压缩，默认为1K</p>

<p><code>compression_max_size</code> ：低于这个数值时才尝试压缩，默认为无限</p>

<p><code>compressor</code> : 被压缩的对象将被存储，默认为 zlib，通过<code>Dalli::Compressor</code>来实现。如果正被压缩的数据使用 nginx 的 HttpMemcachedModule， 设置</p>

<p><code>memcached_gzip_flag 2</code> 并且使用 <code>Dalli::GzipCompressor</code></p>

<p><code>keepalive</code> : boolean值，如果为 true, Dalli 将会使 socket 长久连接，默认为 true</p>

<p><code>socket_timeout</code> : 所有的 socket 操作超时时间，默认为 0.5</p>

<p><code>socket_max_failures</code> : 当socket 超时后，socket 操作失败，一个相同的操作将会重试，当处于一个非常缓慢的网络问题时，并不会即时去执行，默认为2</p>

<p><code>socket_failure_delay</code> : 重试一个 socket 操作之前，这段时间进程将会睡眠，默认为 0.01，设置为 nil 将无延迟</p>

<p><code>down_retry_delay</code> : 当一个服务因为许多失败明显的崩溃了，仅仅会在这段时间服务将会再次检查以求正常运行。不要将这个值设置得太低，不然每一个到达崩溃服务的请求也许会固定在最大的 socket_timeout，默认为 1 秒</p>

<h1>监控</h1>

<p><code>telnet 127.0.0.1 11211</code>  连接上 memcache</p>

<p>输入 <code>stats</code> 获得状态</p>

<h1>反省</h1>

<p>第一次翻译，翻译得太生硬太渣了。。。</p>

<h1>疑惑</h1>

<p>看了官方文档，写着：“使用 memcached 来存储缓存时， Rails 会使用默认附带安装的 Dalli gem。” 但是我并没有看到有 Dalli gem 的安装，而且配置也跟 Dalli 有差别。</p>

<p>自带：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:mem_cache_store</span><span class="p">,</span> <span class="s2">&quot;cache-1.example.com&quot;</span><span class="p">,</span> <span class="s2">&quot;cache-2.example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dalli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="s2">&quot;cache-1.example.com&quot;</span><span class="p">,</span> <span class="s2">&quot;cache-2.example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是为毛- -！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- 恢复撤销篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git%20copy/"/>
    <updated>2014-10-24T23:13:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git copy</id>
    <content type="html"><![CDATA[<h3>1、取消本地修改，恢复到上一次的commit</h3>

<p>如果你的本地文件修改得一团乱，但是还没有提交，可以通过下面的命令恢复到上次提交时的状态( 其实就是恢复到上次的 commit，因此这次的本地修改自然没了）（<code>注意是修改，不包括添加文件</code>）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard</span></code></pre></td></tr></table></div></figure>


<p>这条命令将会取消掉本地的所有修改，恢复到上一次我们的commit信息</p>

<h3>2、取消 git add 的文件</h3>

<p>有时我们会不小心git add . 所有文件，想反悔，取消某些add的文件。那么可以(还原暂存区)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset HEAD xxxx</span></code></pre></td></tr></table></div></figure>


<h3>3、取消对文件的修改</h3>

<p>如果觉得刚才对XX文件的修改没有必要，想要恢复，那么:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- xxx</span></code></pre></td></tr></table></div></figure>


<h3>4、取消已经提交的修改</h3>

<p>如果已经做了一个提交(commit),并且马上后悔了。那么可以创建一个新的提交，在新提交里撤销老的提交所做的修改</p>

<p>创建一个新的，撤销(revert)了前期修改的提交(commit)是很容易的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git revert HEAD</span></code></pre></td></tr></table></div></figure>


<p>这样就创建了一个撤销了上次提交(HEAD)的新提交</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gir revert HEAD^</span></code></pre></td></tr></table></div></figure>


<p>撤销上上次</p>

<h3>5、Tips</h3>

<h4>回滚到某一次 commit</h4>

<p><code>git reset --hard aa89cd6bcc</code></p>

<p>这样会回滚到某个commit状态，只要知道commit id 就可以</p>

<h4>回滚后反悔怎么办？</h4>

<p><code>git reflog</code> 记录了我们的每一次命令（ commit、merge 等信息）</p>

<p>根据这命令来查出我们的历史 commit id，然后 <code>git reset</code>即可</p>

<ol>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset &ndash;hard commit_id。</p></li>
<li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p></li>
<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</li>
<li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout &ndash; file。</p></li>
<li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p></li>
</ol>


<h3>6. 取消已经 push 的行为（重建分支）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 备份到另一分支，以防万一</span>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="n">old_master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 推送备份分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="ss">old_master</span><span class="p">:</span><span class="n">old_master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 本地仓库回退到某一版本</span>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">-</span><span class="n">hard</span> <span class="n">xxxx</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 删除远程分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="ss">:master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 推送本地还原后的分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 取消已经 push 的行为（强制 PUSH）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 本地仓库回退到某一版本</span>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">-</span><span class="n">hard</span> <span class="n">xxxx</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 强制 PUSH，此时远程分支已经恢复成指定的 commit 了</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="o">--</span><span class="n">force</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000">廖雪峰 Git 教程</a></p>

<p><a href="http://git-scm.com">Git 官方</a></p>

<p><a href="http://git-scm.com/book/zh">Git 官方教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- rebase 篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-rebase/"/>
    <updated>2014-10-24T22:12:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-rebase</id>
    <content type="html"><![CDATA[<h2>git merge 和 git rebase</h2>

<p>两者都是合并分支的功能，但是区别在于:</p>

<p>假如合并前是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>D---E master
</span><span class='line'>     /
</span><span class='line'>A---B---C---F origin/master</span></code></pre></td></tr></table></div></figure>


<p>使用merge后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  D--------E  
</span><span class='line'> /          \
</span><span class='line'>A---B---C---F----G   master, origin/master</span></code></pre></td></tr></table></div></figure>


<p>使用rebase后，就不会有G这个结点</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A---B---C---F---D'---E'   master, origin/master</span></code></pre></td></tr></table></div></figure>


<h4>Tips</h4>

<p>1、D’, E’ 的 commit SHA 序號跟本來 D, E 是不同的，因為算是砍掉重新 commit 了。</p>

<p>2、因为使用<code>rebase</code>算是砍掉 D E 重新commit ,那么这里就可能会造成两次冲突，需要修改两次。而merge只需要修改一次</p>

<p>3、因此如果是小规模改动，冲突不会太大的话，建议使用rebase,否则使用merge。</p>

<p>使用reabse的好处是可以让分支不会那么乱，呈线性。</p>

<h4>进行合并</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">两条分支：</span> <span class="n">dev</span> <span class="err">和</span> <span class="n">master</span><span class="err">，此时</span> <span class="n">dev</span> <span class="err">需要合并回</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rebase 方式</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span> <span class="n">git</span> <span class="n">rebase</span> <span class="n">master</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">master</span><span class="p">)</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">dev</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># merge 方式</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">master</span><span class="p">)</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">dev</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rebase 方式，此时dev和master的指针都是同时指向最新的commit点</span>
</span><span class='line'><span class="c1"># 但是返回 dev 时，如果要继续使用 dev, 需要先 pull 一下</span>
</span><span class='line'><span class="c1"># 此时 dev 分支的 nerwork 图是：</span>
</span><span class='line'><span class="c1"># * b6fa04b (HEAD, master, dev) dev01 ( 10 seconds ago )</span>
</span><span class='line'><span class="c1"># 这点我还很疑惑。</span>
</span></code></pre></td></tr></table></div></figure>


<h4>解决冲突</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 解决冲突后</span>
</span><span class='line'><span class="o">-------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># merge 方式</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s1">&#39;xx&#39;</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rebase 方式</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">rebase</span> <span class="o">--</span><span class="n">continue</span>
</span></code></pre></td></tr></table></div></figure>


<h4>pull 时使用 rebase 方式</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="o">--</span><span class="n">rebase</span> <span class="p">(</span> <span class="err">适合同个分支</span> <span class="err">）</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&ndash;no-ff</h4>

<p><code>git merge --no-ff</code>这参数的作用跟<code>rebase</code>恰恰相反，是故意弄出一条分支线，表明某些 commit 是为了实现某个功能的。</p>

<p>适用于分支间的合并</p>

<h3>Tips</h3>

<p>一般分支间的 rebase 合并使用场景是：</p>

<p>1、我自己需要实现某个功能，于是开个分支 new_menu，不提交到远程分支。开发完毕用 rebase 弄回 dev 分支</p>

<p>2、一旦分支提交到远程分支，最好不要使用 rebase 进行分支间的合并了，会造成混乱。</p>

<p>3、一般来说，使用 rebase 后的 new_menu 分支就当做废弃了，如果还需要重新使用的话，继续从 dev 分支 new 出一条分支来。</p>

<h2>整理 commit</h2>

<p>在一个 branch 上开发一段时间后，commit 看起来会很杂乱，或者很多无谓的 commit 点，那么我们可以使用 rabase 来将多个 commit 合并成一个。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">log</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">b1</span>
</span><span class='line'><span class="n">b2</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span><span class="err">要变成</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 拿到 a 的 SHA-1 后</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="mi">49687</span><span class="n">a0a646954afdf3f4dae1f914ea793341ea2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pick</span> <span class="mo">033</span><span class="n">beb4</span> <span class="n">b1</span>
</span><span class='line'><span class="n">pick</span> <span class="n">d426a8a</span> <span class="n">b2</span>
</span><span class='line'><span class="c1"># Rebase 49687a0..d426a8a onto 49687a0</span>
</span><span class='line'><span class="c1"># pick = use commit </span>
</span><span class='line'><span class="c1"># squash = use commit, but meld into previous commit</span>
</span><span class='line'><span class="c1"># pick 会执行该 commit, squash 则将该 commit 合并到前一个 commit</span>
</span></code></pre></td></tr></table></div></figure>


<p>于是我们修改成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pick</span> <span class="mo">033</span><span class="n">beb4</span> <span class="n">b1</span>
</span><span class='line'><span class="n">squash</span> <span class="n">d426a8a</span> <span class="n">b2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 保存退出后会要求输入新的 commit 信息，后可通过 git log 查看。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<p>1、这功能的使用场景是 commit 还没有 push 到远程分支，一旦 push 到远程分支就不要用了。( 虽然可以用 &ndash;force 强制 push，视情况而定 )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- Push 和 Pull 篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-push-pull/"/>
    <updated>2014-10-24T21:12:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-push-pull</id>
    <content type="html"><![CDATA[<h2>git push</h2>

<h4>将本地仓库的更新推送到远程仓库 remote</h4>

<p><code>git push [remote-name] [branch-name]</code></p>

<p><code>git push origin master</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果当前分支跟远程分支有 tracking 关系，那么将会自动推送当前分支到对应的远程分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 如果主机名只有一个 origin，那么连 origin 都可以省略</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span>
</span></code></pre></td></tr></table></div></figure>


<h4>查看 tracking 关系：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">.</span><span class="n">/</span><span class="o">.</span><span class="n">git</span><span class="o">/</span><span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 此时没有 tracking 关系</span>
</span><span class='line'><span class="o">==&gt;</span>
</span><span class='line'><span class="o">[</span><span class="n">core</span><span class="o">]</span>
</span><span class='line'>  <span class="n">repositoryformatversion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">filemode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">bare</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">logallrefupdates</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">ignorecase</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">precomposeunicode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:linjunzhu</span><span class="o">/</span><span class="n">test_branch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/*</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">origin</span><span class="o">/*</span>
</span></code></pre></td></tr></table></div></figure>


<h4>添加 tracking 关系</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">dev</span>  <span class="p">(</span><span class="err">这句同时指定了</span> <span class="n">origin</span> <span class="err">为默认主机</span><span class="p">)</span>
</span><span class='line'><span class="err">或者</span>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">u</span> <span class="n">dev</span> <span class="n">origin</span><span class="o">/</span><span class="n">dev</span>
</span><span class='line'><span class="err">或者</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">set</span><span class="o">-</span><span class="n">upstream</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h4>查看 tracking 关系</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">.</span><span class="n">/</span><span class="o">.</span><span class="n">git</span><span class="o">/</span><span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 此时有 tracking 关系</span>
</span><span class='line'><span class="o">==&gt;</span>
</span><span class='line'><span class="o">[</span><span class="n">core</span><span class="o">]</span>
</span><span class='line'>  <span class="n">repositoryformatversion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">filemode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">bare</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">logallrefupdates</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">ignorecase</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">precomposeunicode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:linjunzhu</span><span class="o">/</span><span class="n">test_branch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/*</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">origin</span><span class="o">/*</span>
</span><span class='line'><span class="o">[</span><span class="n">branch</span> <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">remote</span> <span class="o">=</span> <span class="n">origin</span>
</span><span class='line'>  <span class="n">merge</span> <span class="o">=</span> <span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h2>git pull</h2>

<h3>拉取更新</h3>

<p>将远程仓库的更新拉取到本地的「远程仓库」并且进行「merge」操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 相当于两步操作</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<p>如果当前分支跟远程分支是没有 tracking 关系的，那么执行<code>git pull</code>后，会 download 远程仓库的所有分支代码到本地的 origin/分支上，但是不会合并，相当于 <code>git fetch</code> 命令一样。</p>

<h2>git pull 和 git fetch 的使用区别</h2>

<ol>
<li><p><code>git pull origin master</code>: 意思是从远程端下载最新版本到当前分支，并且自动合并</p></li>
<li><p><code>git fetch origin master</code>: 意思是从远程端下载最新版本到当前分支，但是并不合并。因此如果是git fetch 的话，就需要做两步操作。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">log</span> <span class="o">-</span><span class="nb">p</span> <span class="n">master</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>   <span class="p">(</span><span class="err">查看修改内容</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span>  <span class="n">merge</span> <span class="n">orgin</span><span class="o">/</span><span class="n">master</span>    <span class="p">(</span><span class="err">合并分支</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">或者进行</span> <span class="n">rebase</span>
</span><span class='line'>
</span><span class='line'><span class="err">下章讲解</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tips</h2>

<h4>一、<code>不带任何参数的 git push</code>有两种模式</h4>

<ol>
<li><code>matching</code>模式，会推送所有<code>对应远程分支</code>的<code>本地分支</code>。</li>
<li><code>simple</code>模式，只推送当前分支 (如果有 tracking 关系的话)</li>
</ol>


<p>默认没有设置，需要打下命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">push</span><span class="o">.</span><span class="n">default</span> <span class="n">simple</span>
</span></code></pre></td></tr></table></div></figure>


<h4>二、关于<code>push</code>and<code>pull</code></h4>

<p>一般如果没把握，最好写全。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">dev</span>
</span><span class='line'><span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- 基础篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-base/"/>
    <updated>2014-10-24T20:12:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-base</id>
    <content type="html"><![CDATA[<h2>Git 和 SVN 的区别</h2>

<p>Git 和  SVN 最大的区别概念在于：Git 是分布式，而 SVN 是集中式管理。</p>

<h3>一、SVN</h3>

<p>所谓集中式版本控制工具，总有一个中心服务器，提供一个项目仓库，大家的代码的提交都是统一提交到这个中心服务器上的</p>

<p>SVN 的模式：</p>

<ol>
<li>写代码。</li>
<li>从服务器拉回服务器的当前版本库，并解决服务器版本库与本地代码的冲突。</li>
<li>将本地代码提交到服务器。</li>
</ol>


<p>每个人的 commit 都是直接提交到服务器。容易造成与其他人的冲突</p>

<h3>二、Git</h3>

<p>分布式版本控制工具类似Git，可以有多个代码仓库，比如可以在本地。同时它可以方便的进行代码仓库合并</p>

<p>Git 的模式：</p>

<ol>
<li>写代码。</li>
<li>提交到本地版本库。</li>
<li>从服务器拉回服务器的当前版本库，并解决服务器版本库与本地代码的冲突。</li>
<li>将远程库与本地代码合并结果提交到本地版本库。</li>
<li>将本地版本库推到服务器。</li>
</ol>


<h3>三、总结</h3>

<p>虽然  Git 和 SVN 看起来很像，都有一个服务器库，但其实 Git 是没有中心服务器这个概念的，尽管每个人平时都是先将代码统一提交到中央服务器再统一 pull 其他人的代码，但实际情况是我们可以先 pull 张三的库，再 push 给李四等等操作，只要知道对方的IP地址仓库地址即可( 不过很少这么做)</p>

<p>在 Github 上，你可以任意 fork 别人的仓库，按照自己的需求进行改造，或者提出 pull request 请原作者 merge 你所修改的代码。这里面没有‘中心’这个概念。</p>

<p>每一次的 commit，SVN 都需要网络，而 Git 则不用，因为有本地仓库的概念，这样的好处是，即使你短时间断网都无所谓，还是可以不断的 commit，来追踪版本。</p>

<p>分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>

<h2>Git 基础知识</h2>

<h3>Git 的对象模型</h3>

<p><a href="https://ruby-china.org/topics/20723">https://ruby-china.org/topics/20723</a>
这帖子讲得很好。
总共分为：</p>

<ol>
<li>commit</li>
<li>tree</li>
<li>blog</li>
</ol>


<p>commit ： 提交信息</p>

<p>tree ：指向其他的 tree / blog</p>

<p>blog：文件的内容</p>

<h3>Git 的结构</h3>

<p><img src="http://data-storage.qiniudn.com/git_struct.png" alt="" />
分为工作区，暂存区，以及本地仓库</p>

<h3>基本操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 将文件加入暂存区</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 将文件提交到本地仓库（HEAD)</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s1">&#39;First commit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="err">将改动推送到远程仓库</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h3>关于 -am 的解释</h3>

<p><code>git commit -am 'message'</code>: git add（只针对已知的文件) 和 git commit同时执行，并且会自动移除掉不在工作区的文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 看下 commit 命令带 -a 参数的文档</span>
</span><span class='line'><span class="n">by</span> <span class="n">using</span> <span class="n">the</span> <span class="o">-</span><span class="n">a</span> <span class="n">switch</span> <span class="n">with</span> <span class="n">the</span> <span class="n">commit</span> <span class="n">command</span> <span class="n">to</span> <span class="n">automatically</span> <span class="s2">&quot;add&quot;</span> <span class="n">changes</span> <span class="n">from</span> <span class="n">all</span> <span class="n">known</span> <span class="n">files</span> <span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">e</span><span class="o">.</span> <span class="n">all</span> <span class="n">files</span> <span class="n">that</span> <span class="n">are</span>
</span><span class='line'> <span class="n">already</span> <span class="n">listed</span> <span class="k">in</span> <span class="n">the</span> <span class="n">index</span><span class="p">)</span> <span class="ow">and</span> <span class="n">to</span> <span class="n">automatically</span> <span class="s2">&quot;rm&quot;</span> <span class="n">files</span> <span class="k">in</span> <span class="n">the</span> <span class="n">index</span> <span class="n">that</span>
</span><span class='line'>  <span class="n">have</span> <span class="n">been</span> <span class="n">removed</span> <span class="n">from</span> <span class="n">the</span> <span class="n">working</span> <span class="n">tree</span><span class="p">,</span> <span class="ow">and</span> <span class="k">then</span> <span class="n">perform</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">commit</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>删除文件有两种操作</p>

<p>1、手动 rm，但此时文件还存在于 Git 控制下，需要<code>git commit -am'msg'</code>
2、<code>git rm file_name</code>， 然后<code>git commit -m “xx”</code> 即可。</p>

<p>因此，平常只要  git add .  （提交新增、更改后的文件），然后git commit -am “xx” （保存新增，更改后的文件，以及删除的文件），然后push即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中的 Assets Pipeline 机制]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/07/rails-zhong-de-assets-pipeline-ji-zhi/"/>
    <updated>2014-10-07T21:59:06+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/07/rails-zhong-de-assets-pipeline-ji-zhi</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>我以前一直认为，Rails 的预编译就是把所有 css 和 js 分别整合成一个文件，并且进行压缩等操作。</p>

<p>其实并不是，Rails 预编译的意思，就只是预先编译那些 scss, coffee 等文件为 css, js 的意思。</p>

<p>而给文件名加上 hash 值得，整合成一个文件，压缩等等所有操作，都是Rails 中一个叫做 <code>Assets Pipeline</code> 功能实现的</p>

<h2>Asset Pipeline</h2>

<p><code>Asset Pipeline</code> 提供了一个框架，用于连接、压缩 JavaScript 和 CSS 文件。还允许使用其他语言和预处理器编写 JavaScript 和 CSS，例如 CoffeeScript、Sass 和 ERB。</p>

<p><code>Asset Pipeline</code>在Rails4中已经从框架中提取出来成为：<code>sprockets-rails</code> gem</p>

<p><code>Asset Pipeline</code>有三个主要功能：</p>

<ol>
<li>连接所有静态资源，分别成为一个js css文件</li>
<li>压缩静态资源</li>
<li>允许使用高级语言编写静态资源，如 sass coffee</li>
</ol>


<p>Rails 4 会自动把 sass-rails、coffee-rails 和 uglifier 三个 gem 加入 Gemfile。Sprockets 使用这三个 gem 压缩静态资源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认情况下，在生产环境中，Rails 会把预先编译好的文件保存到 public/assets 文件夹中，网页服务器会把这些文件视为静态资源。在生产环境中，不会直接伺服 app/assets 文件夹中的文件。</p>

<p>默认编译的文件包括 application.js、application.css 以及 gem 中 app/assets 文件夹中的所有非 JS/CSS 文件（会自动加载所有图片）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="p">,</span> <span class="n">fn</span><span class="o">|</span> <span class="n">fn</span> <span class="o">=~</span> <span class="sr">/app\/assets/</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="sx">%w(.js .css)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">path</span><span class="p">))</span> <span class="p">},</span>
</span><span class='line'><span class="sr">/application.(css|js)$/</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个正则表达式表示最终要编译的文件</p>

<p>最终会编译成： application-adfea1231s.js ,   application-sfef234df.css， xxx-sdfsdfe.png  等</p>

<p>因此如果我们想要自己添加单独编译出来的文件的话：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;admin.js&#39;</span><span class="p">,</span> <span class="s1">&#39;admin.css&#39;</span><span class="p">,</span> <span class="s1">&#39;swfObject.js&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，即便想添加 Sass 或 CoffeeScript 文件，也要把希望编译的文件名设为 .js 或 .css。（ 因为 sass 最终也是要解析成 .css 的）</p>

<h2>对 Bootstrap 遇到的坑</h2>

<p>之前引入了 Bootstrap 后，预编译一直出现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sass</span><span class="o">::</span><span class="ss">SyntaxError</span><span class="p">:</span> <span class="no">Undefined</span> <span class="ss">variable</span><span class="p">:</span> <span class="s2">&quot;$alert-padding&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后折腾了许久，才发现我在 assets.rb 里设置了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[*.</span><span class="n">js</span><span class="o">]</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[*.</span><span class="n">css</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为我把所有 js css 都单独编译了，而 bootstrap 有两份 css 文件，其中一份定义了 bootstrap 的变量，如: <code>$alert-padding</code>，而这个变量在第二个 css 文件中被引用，因此，当第二个文件单独编译时，就会发现找不到这个变量了。</p>

<p>解决方法：</p>

<ol>
<li><p>按需加入自己要的文件</p></li>
<li><p>编译所有静态资源，但是去除bootstrap相关的( 这里还没去除 )</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/application.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">&lt;&lt;</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">path</span> <span class="o">=~</span> <span class="sr">/\.(css|js)\z/</span>
</span><span class='line'>    <span class="n">full_path</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">resolve</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">to_path</span>
</span><span class='line'>    <span class="n">app_assets_path</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_path</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">full_path</span><span class="o">.</span><span class="n">starts_with?</span> <span class="n">app_assets_path</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;including asset: &quot;</span> <span class="o">+</span> <span class="n">full_path</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;excluding asset: &quot;</span> <span class="o">+</span> <span class="n">full_path</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>静态资源优化</h2>

<h3>1. 设置过期时间</h3>

<p>编译好的静态资源存放在服务器的文件系统中，直接由网页服务器伺服。默认情况下，没有为这些文件设置一个很长的过期时间。为了能充分发挥指纹的作用，需要修改服务器的设置，添加相关的报头。</p>

<p>针对 Nginx</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">location</span> <span class="o">~</span> <span class="o">^/</span><span class="n">assets</span><span class="o">/</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">expires</span> <span class="mi">1</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">add_header</span> <span class="no">Cache</span><span class="o">-</span><span class="no">Control</span> <span class="kp">public</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">add_header</span> <span class="no">ETag</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 使用 gzip 压缩</h3>

<p>Sprockets 预编译文件时还会创建静态资源的 gzip 版本（.gz）。网页服务器一般使用中等压缩比例，不过因为预编译只发生一次，所以 Sprockets 会使用最大的压缩比例，尽量减少传输的数据大小。网页服务器可以设置成直接从硬盘伺服压缩版文件，无需直接压缩文件本身。</p>

<p>在 Nginx 中启动 gzip_static 模块后就能自动实现这一功能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">location</span> <span class="o">~</span> <span class="o">^/</span><span class="p">(</span><span class="n">assets</span><span class="p">)</span><span class="o">/</span>  <span class="p">{</span>
</span><span class='line'>  <span class="n">root</span> <span class="sr">/path/</span><span class="n">to</span><span class="o">/</span><span class="kp">public</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_static</span> <span class="n">on</span><span class="p">;</span> <span class="c1"># to serve pre-gzipped version</span>
</span><span class='line'>  <span class="n">expires</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>  <span class="n">add_header</span> <span class="no">Cache</span><span class="o">-</span><span class="no">Control</span> <span class="kp">public</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果编译 Nginx 时加入了 gzip_static 模块，就能使用这个指令。Nginx 针对 Ubuntu/Debian 的安装包，以及 nginx-light 都会编译这个模块。否则就要手动编译：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">/configure</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">http_gzip_static_module</span> <span class="p">(</span> <span class="err">还没试过）</span>
</span></code></pre></td></tr></table></div></figure>


<h2>本地预编译</h2>

<p>为什么要在本地预编译静态文件呢？原因如下：</p>

<ol>
<li>可能无权限访问生产环境服务器的文件系统；</li>
<li>可能要部署到多个服务器，避免重复编译；</li>
<li>可能会经常部署，但静态资源很少改动；</li>
</ol>


<p>不过有两点要注意：</p>

<ol>
<li>一定不能运行 Capistrano 部署任务来预编译静态资源；</li>
<li>必须修改下面这个设置；</li>
</ol>


<p>在 config/environments/development.rb 中加入下面这行代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">prefix</span> <span class="o">=</span> <span class="s2">&quot;/dev-assets&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改 prefix 后，在开发环境中 Sprockets 会使用其他的 URL 伺服静态资源，把请求都交给 Sprockets 处理。但在生产环境中 prefix 仍是 /assets。如果没作上述修改，在生产环境中还是会从 /assets 伺服静态资源，但是除非再次编译，否则看不到文件的变化。</p>

<p>但为什么部署的时候不会再次编译呢？明明文件内容都发生变化了，奇怪？</p>

<p>之前预编译后，public下有/assets文件夹（production环境），但是请求的静态资源却全部都是 development 下的请求方式，（不带hash值的文件名)，奇怪- - 以后有空好好研究下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下修改Mysql5.5中文编码]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/07/ubuntuxia-xiu-gai-mysql5-dot-5zhong-wen-bian-ma/"/>
    <updated>2014-10-07T13:58:12+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/07/ubuntuxia-xiu-gai-mysql5-dot-5zhong-wen-bian-ma</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>由于之前在 Ubuntu 下安装 Mysql时，忘记选择编码，于是全部都是 Latin 编码，折腾了一阵子搞定了</p>

<h2>Begin</h2>

<p>在网上搜了一阵教程，明白 Mysql 安装后的一系列目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">mysql</span>  <span class="p">(</span> <span class="err">启动脚本）</span>
</span><span class='line'><span class="sr">/etc/m</span><span class="n">ysql</span><span class="o">/</span><span class="n">my</span><span class="o">.</span><span class="n">cnf</span> <span class="p">(</span> <span class="no">MySQL</span> <span class="err">的配置文件</span> <span class="p">)</span>
</span><span class='line'><span class="sr">/var/</span><span class="n">lib</span><span class="o">/</span><span class="n">mysql</span>   <span class="p">(</span> <span class="err">数据库文件存放路径）</span>
</span><span class='line'><span class="sr">/usr/</span><span class="n">lib</span><span class="o">/</span><span class="n">mysql</span>  <span class="err">（</span><span class="no">Mysql</span> <span class="err">安装路径</span>
</span><span class='line'>
</span><span class='line'><span class="err">命令：</span><span class="n">service</span> <span class="n">mysql</span> <span class="n">start</span> <span class="o">/</span> <span class="n">stop</span> <span class="o">/</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mysql 版本： 5.5以上</p>

<h2>Doing</h2>

<p>按照网上教程，打开 <code>my.cnf</code>，在[client] [mysqld] 下加上
<code>default-character-set=utf8</code></p>

<p>结果启动mysql报错，于是我查看了<code>/var/log/mysql/error.log</code>的日志，这里用<code>cat</code>命令load不出东西，要直接vim进去才行，奇怪。</p>

<p>报错原因：<code>unknown variable 'default-set-server=utf8'</code></p>

<p>最终解决：
Mysql 版本5.5 以上，需要这么做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">在</span><span class="o">[</span><span class="n">client</span><span class="o">]</span><span class="err">下添加：</span>
</span><span class='line'>
</span><span class='line'><span class="n">default</span><span class="o">-</span><span class="n">character</span><span class="o">-</span><span class="n">set</span><span class="o">=</span><span class="n">utf8</span>
</span><span class='line'>
</span><span class='line'><span class="err">在</span><span class="o">[</span><span class="n">mysqld</span><span class="o">]</span> <span class="err">下添加：</span>
</span><span class='line'>
</span><span class='line'><span class="n">character</span><span class="o">-</span><span class="n">set</span><span class="o">-</span><span class="n">server</span><span class="o">=</span><span class="n">utf8</span>
</span><span class='line'>
</span><span class='line'><span class="err">在</span><span class="o">[</span><span class="n">mysql</span><span class="o">]</span> <span class="err">下添加</span>
</span><span class='line'>
</span><span class='line'><span class="n">default</span><span class="o">-</span><span class="n">character</span><span class="o">-</span><span class="n">set</span><span class="o">=</span><span class="n">utf8</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重启mysql</p>

<p><code>sudo service mysql restart</code></p>

<p>进入mysql终端</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">show</span> <span class="n">variables</span> <span class="n">like</span> <span class="s1">&#39;%character%&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">#会有如下显示：</span>
</span><span class='line'><span class="o">+--------------------------+----------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Variable_name</span>            <span class="o">|</span> <span class="no">Value</span>                      <span class="o">|</span>
</span><span class='line'><span class="o">+--------------------------+----------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_client</span>     <span class="o">|</span> <span class="n">utf8</span>                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_connection</span> <span class="o">|</span> <span class="n">utf8</span>                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_database</span>   <span class="o">|</span> <span class="n">utf8</span>                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_filesystem</span> <span class="o">|</span> <span class="n">binary</span>                     <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_results</span>    <span class="o">|</span> <span class="n">utf8</span>                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_server</span>     <span class="o">|</span> <span class="n">utf8</span>                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_set_system</span>     <span class="o">|</span> <span class="n">utf8</span>                       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">character_sets_dir</span>       <span class="o">|/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">mysql</span><span class="o">/</span><span class="n">charsets</span><span class="o">/</span> <span class="o">|</span>
</span><span class='line'><span class="o">+--------------------------+----------------------------+</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails中的缓存机制]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/05/railszhong-de-huan-cun-ji-zhi/"/>
    <updated>2014-10-05T11:43:10+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/05/railszhong-de-huan-cun-ji-zhi</id>
    <content type="html"><![CDATA[<h2>1、前言</h2>

<p>之前一直对缓存处于模模糊糊的概念，昨天下定决心好好恶补一下，因此写下這篇文章做下总结，只有简单的知识点，木有高深内容:  )</p>

<h2>2、前端缓存</h2>

<p>我们平常所使用的浏览器，是有带缓存区的。</p>

<p><img src="http://data-storage.qiniudn.com/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E5%9B%BE.png" alt="" /></p>

<p>图不太好画啊，泪流满面。</p>

<p>图中的“文字太长，下面解释”：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>浏览器会附带`If-None-Match`属性（内容id ) 或 `If-Modified-Since`（修改内容时间戳）
</span><span class='line'>
</span><span class='line'>服务器的响应头会附带：
</span><span class='line'>
</span><span class='line'>1. ETag ： 对应请求的 `If-None-Match`属性
</span><span class='line'>2. Last-modified：对应请求的`If-modified-Since`属性
</span><span class='line'>
</span><span class='line'>两者有一个相同就返回 `304`</span></code></pre></td></tr></table></div></figure>


<h3>2.1、静态文件请求</h3>

<p>当使用 WEB 服务器时，如： Nginx，是会自动处理静态文件的缓存的，而不会通过服务器。当然，也是根据 <code>ETag</code> 和 <code>Last-modified</code> 来判断</p>

<h3>2.2、动态文件请求(这里其实不算前端范畴了）</h3>

<p>当请求动态文件时，就需要通过服务器来处理了，在 Rails 中默认使用<code>Rack::ETag middleware</code>中间件，它会自动给无 ETag 的 response 加上 ETag，再根据 ETag 来判断资源是否更改，从而返回 200 / 304。</p>

<p><code>注意</code>: 返回304并不是说服务器没有处理资源直接就返回304，而是完成的处理完了资源，生成了response准备响应了，才进行生成 ETag，然后进行判断，这样虽然也会消耗服务器的资源，但是可以大大减少客户端传输网络的时间。</p>

<p>之前有个疑惑：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>为什么要等到生成完整 response 再加上 ETag 进行判断呢？我的想法是：因为判断
</span><span class='line'>资源是否有变化，所以需要判断`response内的某些资源`是否有变化，因此迟早都要生成response，
</span><span class='line'>所以是否等到生成完整response再加上ETag是无所谓的</span></code></pre></td></tr></table></div></figure>


<p>补充几点 :</p>

<ol>
<li>发送「条件GET请求」是需要服务器的支持的。</li>
<li>HTTP在传输的时候是先给状态再给内容</li>
</ol>


<h3>2.3、条件GET请求简介</h3>

<p>如果浏览器缓存中已经有一个 HTML 内容元素的副本，却不能保证该缓存是否有效，这时，一个条件 GET 请求就出现了。</p>

<p>通常情况下，缓存是否有效取决于最后一次修改时间，而浏览器是根据返回报头中的 Last-Mofidied 属性来获取到这个时间，浏览器则会在请求报头中加入 If-Modified-Since 属性到服务端。
<img src="http://data-storage.qiniudn.com/%E6%9D%A1%E4%BB%B6get%E8%AF%B7%E6%B1%82.png" alt="" />
如果时间点一致，则直接303，跳过响应的内容体。</p>

<h2>3、Rails的缓存机制</h2>

<p>服务器端缓存区存储有两种方式：</p>

<ol>
<li>硬盘</li>
<li>内存</li>
</ol>


<p>运行流程图：</p>

<p><img src="http://data-storage.qiniudn.com/%E5%90%8E%E7%AB%AF%E7%BC%93%E5%AD%98.png" alt="" /></p>

<p>画得有点呵呵，将就着看吧。</p>

<p>说明几点：</p>

<ol>
<li>每次请求都会重新计算<code>cache_key</code>，而计算<code>cache_key</code>则会进入到数据库去查询，比如<code>products</code>需要查询<code>products.max(&amp;:updated_at)</code>。</li>
<li>缓存本质倒不是查不查，而是把一个长查询转化成短查询。</li>
<li>当资源更新时，对应缓存区的缓存会过期，但过期不是删除，缓存还是会存在缓存区中，只是不再命中，<code>所以基于 file 的缓存方案会产生许多重复的垃圾，dhh 推荐使用 memcache 就是把删除缓存的操作交给 memcache 来做。</code></li>
</ol>


<h2>4、Rails中使用缓存</h2>

<p>在 Rails 中使用缓存是个大学问</p>

<h3>4.1、fresh_when</h3>

<p>前文说到，Rails 默认的中间件<code>Rack::ETag middleware</code>会自动给无<code>ETag</code>的<code>response</code>加上<code>ETag</code>，那么，有没办法在生成完整的response之前（节省资源）我们自己加上<code>ETag</code>呢？ Rails 提供了 <code>fresh_when</code> helper</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticlesController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fresh_when</span> <span class="ss">:last_modified</span> <span class="o">=&gt;</span> <span class="vi">@article</span><span class="o">.</span><span class="n">updated_at</span><span class="o">.</span><span class="n">utc</span><span class="p">,</span> <span class="ss">:etag</span> <span class="o">=&gt;</span> <span class="vi">@article</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>下次用户再访问的时候，会对比request header里面的If-Modified-Since和If-None-Match，如果相符合，就直接返回304，而不再生成response body。</p>

<p>但是这样会遇到一个问题，假设我们的网站导航有用户信息，一个用户在未登陆专题访问了一下，然后登陆以后再访问，会发现页面上显示的还是未登陆状态。或者在app访问一篇文章，做了一下收藏，下次再进入这篇文章，还是显示未收藏状态。解决这个问题的方法很简单，将用户相关的变量也加入到etag的计算里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">fresh_when</span> <span class="ss">:etag</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="vi">@article</span><span class="o">.</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="o">]</span>
</span><span class='line'> <span class="n">fresh_when</span> <span class="ss">:etag</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="vi">@article</span><span class="o">.</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">current_user_favorited</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>和fresh_when相比，自动etag能够节省的只是客户端时间</code></p>

<h3>4.2  Fragment Caching</h3>

<p>Rails  中有几种 cache，这种是最常见使用最多的。</p>

<p>如下，有个项目页面：
<img src="http://data-storage.qiniudn.com/%E5%A5%97%E5%A8%83%E6%9C%BA%E5%88%B6.jpg" alt="" /></p>

<p>接下来我们看看，如果这个页面的某一条数据，比如「任务 A-1」 的内容被改变了，会发生什么。</p>

<p>首先，这条任务自己对应的 L4 Todo Item 缓存失效了，所以在拼装外面的 L3 级「任务清单A」缓存的时候，会从缓存里获取任务 A-2、A-3 的缓存，速度嗖嗖快，快到可以忽略不计，然后对任务 A-1 重新渲染一次，放入缓存，这样「任务清单A」通过直接从缓存里读取两条任务（A-2 和 A-3），以及渲染一条新的（ A-1 ）生成了整个 L3 Todolist Item 的页面片段。剩下的「任务清单B」和「任务清单C」，都没有变化，因此由在生成「任务清单」Section 缓存的时候，直接拼装即可。</p>

<p>其它几个 Section 片段因为和任务没有任何关系，所有缓存都不会过期，因此这几个 Section 的页面片段都是直接从缓存里捞出来，同样嗖嗖快。</p>

<p>最后，整个项目详情页把这几个 Section 拼装起来，返回给客户。从上面的过程可以看出，只有「任务 A-1」 这个片段的页面被重新渲染了。</p>

<p>所以，这种套娃式的缓存，能够保证页面缓存利用率的最大化，任何数据的更新，只会导致某一个片段的缓存失效，这样在组装完整页面的时候，由于大量的页面片段都是直接从缓存里读取，所以页面生成的时间开销就很小。</p>

<p>那么，套娃是如何在缓存中存取页面片段的呢？主要是靠一个叫做 cache_key 的东西来决定的。</p>

<h3>4.2.1、cache_key</h3>

<p>代码初级版：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@project</span> <span class="k">do</span>  <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= @project.name %&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Section</span> <span class="no">Topics</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@top3_topics</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;topics/topic&#39;, collection: @top3_topics %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section todolists --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@todolists</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;todolists/todolist&#39;, collection: @todolists %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section uploads --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@uploads</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;uploads/upload&#39;, collection: @uploads %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section documents --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@documents</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;documents/document&#39;, collection: @documents %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section calendar_events --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@calendar_events</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;calendar_events/calendar_event&#39;, collection: @calendar_events %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>单个资源</h3>

<p>可以看到，最外层有个<code>&lt;% cache @project %&gt;</code>，这个<code>cache</code>使用<code>@project</code>作为参数，cache内部会对该对象进行处理，计算出<code>cache_key</code></p>

<p>大概是：<code>views/projects/1-20140906112338</code></p>

<p>Rails 会使用该<code>cache_key</code> 作为<code>key</code>,将包含的所有东西（包括数据和html）通通放入缓存区。每次有请求到来时，就会重新计算 cache_key，然后到缓存区进行查找，命中则返回，不命中则服务器查询资源，重新将资源放入缓存区。</p>

<p>当资源更新时，<code>cache_key</code> 也随之变化（注意，<code>cache_key</code> 大部分需要自己设计)，因此就不会命中缓存，缓存自然过期。</p>

<p><code>注意：</code> 如果不生成<code>cache_key</code>，缓存永远都不会变！！！无论资源是否更新
<code>注意：</code> 缓存过期不代表缓存被删除，因为缓存区会存在大量垃圾，需要memcached来解决。</p>

<h3>多个资源</h3>

<p>那如果是资源列表呢？如果我们直接把 <code>@top3_topics</code> 对象作为 cache 的参数 <code>&lt;% cache @top3_topics %&gt;</code>，得到的 <code>cache_key</code> 实际上会是这样的形式：</p>

<p><code>views/topics/3-20140906112338/topics/2-20140906102338/topics/3-20140906092338</code></p>

<p>显然，这样做不太好，因此我们可以取这组数据内最新一个被更新的数据的updated_at时间戳，这样会生成：</p>

<p><code>views/20140906112338</code></p>

<p>但这样会出现一个问题，假如此时<code>@top_topics</code>为空，那么我们此时是对 nil 进行缓存，不幸的是，所有 nil 的 <code>cache_key</code> 都一模一样，这样就会造成混乱。再加上，加入任务清单 Section 和讨论 Section 最后更新的那条数据的 updated_at 时间戳恰好一样，也会造成两个缓存片混淆的问题。</p>

<p>解决方法就是给每个cache都加上model名
<code>&lt;% cache [:topics, @top3_topics.max(&amp;:updated_at)] %&gt;</code></p>

<p>代码更新版：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@project</span> <span class="k">do</span>  <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= @project.name %&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Section</span> <span class="no">Topics</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="o">[</span><span class="ss">:topics</span><span class="p">,</span> <span class="vi">@top3_topics</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span><span class="o">]</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;topics/topic&#39;, collection: @top3_topics %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section todolists --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="o">[</span><span class="p">:</span> <span class="n">todolists</span><span class="p">,</span>  <span class="vi">@todolists</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span><span class="o">]</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;todolists/todolist&#39;, collection: @todolists %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section uploads --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="o">[</span><span class="p">:</span> <span class="n">uploads</span><span class="p">,</span>  <span class="vi">@uploads</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span><span class="o">]</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;uploads/upload&#39;, collection: @uploads %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section documents --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="o">[</span><span class="p">:</span> <span class="n">documents</span><span class="p">,</span>  <span class="vi">@documents</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span><span class="o">]</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;documents/document&#39;, collection: @documents %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Section calendar_events --&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache </span><span class="o">[</span><span class="p">:</span> <span class="n">calendar_events</span><span class="p">,</span>  <span class="vi">@calendar_events</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:updated_at</span><span class="p">)</span><span class="o">]</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= render partial: &#39;calendar_events/calendar_event&#39;, collection: @calendar_events %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.2.2 touch!机制</h3>

<p>我们回过头来再看看套娃缓存的读取机制，访问项目详情页的时候，首先读取最外层的大套娃 &lt;% cache @project %> ，如果这个缓存片对应的 <code>cache_key</code>在缓存里能找到，则直接取出来并且返回，如果缓存过期，则读取第二级套娃 — 几个列表 Section 缓存，这些缓存根据列表里最新一条数据的更新时间生成 cache_key，如果最新一条数据的更新时间没有变化，则缓存不过期，直接取出来供页面拼装用，如果缓存过期，则继续读取各自的第三级套娃。</p>

<p>等等，这里有个问题，如果我改变了一条任务的内容，也就是作废了任务 partial 自己的缓存，但是包裹任务的任务清单，以及包裹任务清单的项目都没有变化，这样当页面加载的时候，读取到的第一个大套娃 &ndash; &lt;% cache @project %> 都没有更新，会直接返回被缓存了的整个项目详情页，所以根本不会走到渲染更新的任务 partial 那里去。对于这个问题的解决方案，是 Rails 模型层的 touch 机制。</p>

<p>简单的说，我们需要让里面的子套娃在数据更新了以后，touch 一下处在外面的套娃，告诉它，嘿，我更新了，你也得更新才行。我们直接看看这个代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Project</span> <span class="o">&lt;</span> <span class="no">ActiveRecode</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Todolist</span> <span class="o">&lt;</span> <span class="no">ActiveRecode</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:project</span><span class="p">,</span> <span class="ss">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span> <span class="o">&lt;</span> <span class="no">ActiveRecode</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:todolist</span><span class="p">,</span> <span class="ss">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于 touch 的存在，当 todo 的某条任务修改时，会自动通知到 todolist, 让其修改 updated_at 属性，而 todolist 也会修改到 project，一层层保证整个缓存系统的正常运作。</p>

<h2>5、Rails 里使用缓存的坑</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@project</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% cache [:todolists, @todolists.max(&amp;:updated_at)] do %&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="err">清单所属项目：</span> <span class="o">&lt;</span><span class="sx">%= @project.name %&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="sx">     &lt;%=</span> <span class="n">render</span> <span class="ss">partial</span><span class="p">:</span> <span class="s1">&#39;todolists/todolsit&#39;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@todolists</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
当出现以上情况时，属于父级cache的属性出现在子级cache内，当@project的内容更改了，这时 @todolists 的 cache_key 并没有改变，也就是说这段缓存没有过期，<code>&lt;%= @project.name %&gt;</code> 显示的还是过去的 name</p>

<p>解决方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@project</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% cache [:todolists, @project, @todolists.max(&amp;:updated_at)] do %&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="err">清单所属项目：</span> <span class="o">&lt;</span><span class="sx">%= @project.name %&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="sx">     &lt;%=</span> <span class="n">render</span> <span class="ss">partial</span><span class="p">:</span> <span class="s1">&#39;todolists/todolsit&#39;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@todolists</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@project</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% cache [:todolists, @project.name, @todolists.max(&amp;:updated_at)] do %&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="err">清单所属项目：</span> <span class="o">&lt;</span><span class="sx">%= @project.name %&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="sx">     &lt;%=</span> <span class="n">render</span> <span class="ss">partial</span><span class="p">:</span> <span class="s1">&#39;todolists/todolsit&#39;</span><span class="p">,</span> <span class="ss">collection</span><span class="p">:</span> <span class="vi">@todolists</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这样子当修改@project时，也会修改子级的 cache_key</p>

<h2>6、注意</h2>

<p>当请求过来时，还是会经过controller,进行lazy select,再经过erb,再进行真正的 cache_key 计算，当然，此时 controller 中查询的那些还没有真正的查询，因为是 lazy select</p>

<p>分割好粒度，否则会得不偿失</p>

<p>还有第二个坑，写得脑仁疼，不写啦，看下面参考文</p>

<h2>参考</h2>

<p>总结 web 应用中常用的各种 cache: <a href="https://ruby-china.org/topics/19389">https://ruby-china.org/topics/19389</a></p>

<p>Cache 在 Ruby China 里面的应用:  <a href="https://ruby-china.org/topics/19436">https://ruby-china.org/topics/19436</a></p>

<p>说说 Rails 的套娃缓存机制:  <a href="https://ruby-china.org/topics/21488?page=1#replies">https://ruby-china.org/topics/21488?page=1#replies</a></p>

<p>官方缓存讲解：<a href="http://guides.ruby-china.org/caching_with_rails.html">http://guides.ruby-china.org/caching_with_rails.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx的反向代理]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/04/nginxde-fan-xiang-dai-li/"/>
    <updated>2014-10-04T18:28:48+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/04/nginxde-fan-xiang-dai-li</id>
    <content type="html"><![CDATA[<p>最近需要在微信、Google Glass 上开发，需要两者服务器上的回调信息，因此需要正式服务器来让两者回调，但是这样的话我总需要在服务器上调试，是非常麻烦的。因此反向代理就正中红心。</p>

<h3>1、什么是反向代理？</h3>

<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>

<h3>2、使用方式</h3>

<p>WEB服务器： Nginx</p>

<h4>步骤一</h4>

<p>用自己熟悉的编辑器打开 Nginx 的配置文件 <code>nginx.conf</code> / <code>/etc/nginx/sites-available/default</code></p>

<p>开始配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="n">server_name</span> <span class="n">linjunzhu</span><span class="o">.</span><span class="n">com</span><span class="p">;</span>
</span><span class='line'>    <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">9090</span><span class="p">;</span>
</span><span class='line'>        <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class='line'>        <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>        <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>proxy_pass</code>为反向代理地址，意思是，当接受到 <code>80</code>端口的<code>linjunzhu.com</code>地址时，就自动将请求转发给服务器本地的<code>9090</code>端口</p>

<h4>步骤二</h4>

<p>打开本地的 shell 工具</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ssh</span> <span class="n">deploy</span><span class="err">@服务器</span><span class="n">ip</span> <span class="o">-</span><span class="n">R</span> <span class="mi">9090</span><span class="p">:</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">3000</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样本地的<code>3000</code>端口就会跟服务器的<code>9090</code>端口进行绑定，当服务器转发请求到服务器本地的<code>9090</code>端口时，又会将请求转发给本地的<code>3000</code>端口</p>

<p>完成，Enjoy it : )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doorkeeper使用简介]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/09/21/doorkeepershi-yong-jian-jie/"/>
    <updated>2014-09-21T21:39:25+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/09/21/doorkeepershi-yong-jian-jie</id>
    <content type="html"><![CDATA[<h3>1、doorkeeper 是什么？</h3>

<p>最近在项目里需要构建自己的一套 Oauth2.0，而doorkeeper正是帮助我们构建 Oauth2.0 的gem</p>

<h3>2、安装</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;doorkeeper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then run the order</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will install the doorkeeper initializer into <code>doorkeeper.rb</code></p>

<p>And next step If U use <code>Active Record</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">migration</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3、配置</h3>

<p>这时你会发现在你的routes.rb里添加了这样一段话：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">use_doorkeeper</span>
</span><span class='line'>  <span class="c1"># your routes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应生成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GET</span>       <span class="sr">/oauth/</span><span class="n">authorize</span><span class="o">/</span><span class="ss">:code</span>
</span><span class='line'><span class="no">GET</span>       <span class="sr">/oauth/</span><span class="n">authorize</span>
</span><span class='line'><span class="no">POST</span>      <span class="sr">/oauth/</span><span class="n">authorize</span>
</span><span class='line'><span class="no">PUT</span>       <span class="sr">/oauth/</span><span class="n">authorize</span>
</span><span class='line'><span class="no">DELETE</span>    <span class="sr">/oauth/</span><span class="n">authorize</span>
</span><span class='line'><span class="no">POST</span>      <span class="sr">/oauth/</span><span class="n">token</span>
</span><span class='line'><span class="no">POST</span>      <span class="sr">/oauth/</span><span class="n">revoke</span>
</span><span class='line'><span class="n">resources</span> <span class="sr">/oauth/</span><span class="n">applications</span>
</span><span class='line'><span class="no">GET</span>       <span class="sr">/oauth/</span><span class="n">authorized_applications</span>
</span><span class='line'><span class="no">DELETE</span>    <span class="sr">/oauth/</span><span class="n">authorized_applications</span><span class="o">/</span><span class="ss">:id</span>
</span><span class='line'><span class="no">GET</span>       <span class="sr">/oauth/</span><span class="n">token</span><span class="o">/</span><span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4、权限</h3>

<p>为了使用户访问 API 时，有权限，需要：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Doorkeeper</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resource_owner_authenticator</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:current_user_id</span><span class="o">]</span><span class="p">)</span> <span class="o">||</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">login_url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果使用<code>devise</code>，可以添加下面这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resource_owner_authenticator</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">current_user</span> <span class="o">||</span> <span class="n">warden</span><span class="o">.</span><span class="n">authenticate!</span><span class="p">(</span><span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5、保护API</h3>

<p>It needs to add the follow block for protecting API</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">ProductsController</span> <span class="o">&lt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">ApiController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:doorkeeper_authorize!</span> <span class="c1"># Require access token for all actions</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># your actions</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6、访问不同权限的API</h3>

<p>在 <code>doorkeeper.rb</code>中设置权限范围</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Doorkeeper</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">default_scopes</span> <span class="ss">:public</span> <span class="c1"># if no scope was requested, this will be the default</span>
</span><span class='line'>  <span class="n">optional_scopes</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">:write</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>要求不同action需要不同权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">ProductsController</span> <span class="o">&lt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">ApiController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">doorkeeper_authorize!</span> <span class="ss">:public</span> <span class="p">},</span> <span class="ss">only</span><span class="p">:</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">doorkeeper_authorize!</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">:write</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>7、开始使用</h3>

<p>我们的 Authorization Server 已经盖好了，此时我们申请个 client 来使用。
访问<code>/oauth/applications</code>来申请client</p>

<h4>7.1 开client</h4>

<p>其中 Client 的 redierct URI 填入 <code>http://localhost:12345/auth/demo/callback</code> ，實際上沒有跑 Web server 在 localhost:12345 也沒關係，最終目的是拿到 code 或 token
<img src="http://user-image.logdown.io/user/2580/blog/2567/post/145023/1wLQZN9CS9SixjFgRaq1_oauth2-new-client.png" alt="" /></p>

<h4>7.2 获取 access token</h4>

<p>首先打開剛剛生的 Client 的 show 頁面，會看到有 Application ID 、 Secret 等資訊的頁面。最下面有一個 Authorize 的連結，點下去會打開到這個網址</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">9999</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">authorize</span>
</span><span class='line'>    <span class="p">?</span><span class="n">client_id</span><span class="o">=</span><span class="mi">4</span><span class="n">a407c6a8d3c75e17a5560d0d0e4507c77b047940db6df882c86aaeac2c788d6</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">redirect_uri</span><span class="o">=</span><span class="n">http</span><span class="o">%</span><span class="mi">3</span><span class="n">A</span><span class="o">%</span><span class="mi">2</span><span class="n">F</span><span class="o">%</span><span class="mi">2</span><span class="no">Flocalhost</span><span class="o">%</span><span class="mi">3</span><span class="no">A12345</span><span class="o">%</span><span class="mi">2</span><span class="no">Fauth</span><span class="o">%</span><span class="mi">2</span><span class="no">Fdemo</span><span class="o">%</span><span class="mi">2</span><span class="no">Fcallback</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">response_type</span><span class="o">=</span><span class="n">code</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击<code>Authorize</code>后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">12345</span><span class="o">/</span><span class="n">auth</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">callback</span>
</span><span class='line'>    <span class="p">?</span><span class="n">code</span><span class="o">=</span><span class="mi">21</span><span class="n">e1c81db4e619a23d4ed46134884104225d4189baa005220bd9b358be8b591a</span>
</span><span class='line'>          <span class="o">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
</span><span class='line'>          <span class="no">Grant</span> <span class="no">Code</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>postman</code>来获取access_token</p>

<p><img src="http://user-image.logdown.io/user/2580/blog/2567/post/145023/YZa3unuQgSf2kUkoSMDF_oauth2-token-request-zh.png" alt="" /></p>

<p>未完待续。。。。。。写得还不够完整。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中 Rake 的知识]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/09/14/rails-zhong-rake-de-zhi-shi/"/>
    <updated>2014-09-14T00:39:14+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/09/14/rails-zhong-rake-de-zhi-shi</id>
    <content type="html"><![CDATA[<h3>1、什么是Rack?</h3>

<p>其实 Rails 就是一个 Rack app。</p>

<p> Rack 为使用 Ruby 开发的网页程序提供了小型模块化，适应性极高的接口。Rack 尽量使用最简单的方式封装 HTTP 请求和响应，为服务器、框架和二者之间的软件（中间件）提供了统一的 API，只要调用一个简单的方法就能完成一切操作。</p>

<p>当然， Rack 还包含了许多东西，如处理静态文件，缓存， Log 等。</p>

<p><code>这里的Rack可跟Rake不同</code></p>

<h3>2、Rails 是如何启动的？</h3>

<p>我们会在命令行打 <code>rails s</code></p>

<p>这条命令其实是运行 app/rails， 而 rails 的内容为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="no">APP_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/application&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../config/boot&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/commands&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 s 参数 则会调用 Rails::Server 模块</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">::</span><span class="no">Server</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="no">APP_PATH</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>  <span class="n">server</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 Rails::Server 又是继承 Rake::Server</p>

<h3>3、逻辑</h3>

<p>一切从Rack开始. 几乎所有的ruby web framework都是rack app. Rack对象响应call方法, 返回三元素的array, 分别是status code, header, content body. 只要你的项目符合以上三个要求, 就是一个合法的rack app. 可以运行它, 在浏览器访问, 看到完整的响应内容. 所以, 主流程即是request与response的地程. 我们所做的事情就是在中间加入一些自己的东西.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span><span class="p">},</span> <span class="o">[</span><span class="s2">&quot;Hello Rack!&quot;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">Mongrel</span><span class="o">.</span><span class="n">run</span> <span class="no">HelloWorld</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="ss">:Port</span> <span class="o">=&gt;</span> <span class="mi">9292</span>
</span></code></pre></td></tr></table></div></figure>


<p>一、 http request 到达 web server 后会即被rack封装, 而后你得到一个env对象. 它包含了客户的请求类型(get/post/put/delete/..), 请求的地址(env[&lsquo;PATH_INFO&rsquo;], QUERY_STRING)等等.</p>

<ol>
<li><p>通过分析env, 我们知道客户的请求是指向哪个controller#action. 而后查看路由表我们的app能否响应此请求.</p></li>
<li><p>路由表在新建app对象时通过routes方法来定义, 具体的做法是接受一个block, block内调用match, get, post等方法时, 生成路由规则加入路由表. 路由表里包含路径字符串的匹配正则, controller, action, params等等.</p></li>
<li><p>参照上一条, 在路由规则中检查 env[&lsquo;PATH_INFO&rsquo;], 若匹配, 就知道了指向哪个controller的哪个action, 以及其params. 通过 ctrl_const = Object.const_get(params[:controller].capitalize)来得到相应的controller.</p></li>
<li><p>通过 ctrl_const.new(env).call(params[:action]) 可以调用到相应的方法.</p></li>
<li><p>到这一步, 已经初步描述了一个请求从客户端到服务器端并指向需要的controller#action的基本过程. 也即处理request的过程完成.</p></li>
</ol>


<p>二、Response的过程:</p>

<ol>
<li><p>在ctrl_const.new上调用action后新的对象内就会拥有相应的实例变量. 这时通过Tiltgem, 按规则生成目标view的名字, 找到它, 而后render, render时将self作为scope传入. 至此view里可以调用action里所有的实例变量.Tilt.new(view).render self 得到了应该返回的html的内容.</p></li>
<li><p>上一步render得到的只是Controller#action对应的view, 需要将它交给layout处理.同样的使用Tilt, 将上一步得到的partial view 放到block中提交过去. 这样layout中的&lt;%= yield %>关键字生效. 至此, 得到完整的html内容.</p></li>
<li><p>Rack要求调用call后的返回的值是一个三值的array, 分别是[status code, head content, body].上一步得到的是html内容就是body部分.</p></li>
</ol>


<h4>4、Rails中的中间件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">your</span><span class="o">/</span><span class="n">project</span><span class="o">/</span><span class="n">path</span>
</span><span class='line'><span class="n">rake</span> <span class="n">middleware</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Sendfile</span>
</span><span class='line'><span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Static</span>
</span><span class='line'><span class="n">use</span> <span class="c1">#&lt;ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x007fd93e3aee58&gt;</span>
</span><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Runtime</span>
</span><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">MethodOverride</span>
</span><span class='line'><span class="err">等等</span>
</span><span class='line'>
</span><span class='line'><span class="no">Action</span> <span class="no">Controller</span> <span class="err">的很多功能都以中间件的形式实现。下面解释各个中间件的作用。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Sendfile</span><span class="err">：设置服务器上的</span> <span class="n">X</span><span class="o">-</span><span class="no">Sendfile</span> <span class="err">报头。通过</span> <span class="n">config</span><span class="o">.</span><span class="n">action_dispatch</span><span class="o">.</span><span class="n">x_sendfile_header</span> <span class="err">选项设置。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Static</span><span class="err">：用来服务静态资源文件。如果选项</span> <span class="n">config</span><span class="o">.</span><span class="n">serve_static_assets</span> <span class="err">为</span> <span class="kp">false</span><span class="err">，则禁用这个中间件。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Lock</span><span class="err">：把</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;rack.multithread&quot;</span><span class="o">]</span> <span class="err">旗标设为</span> <span class="kp">false</span><span class="err">，程序放入互斥锁中。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">Strategy</span><span class="o">::</span><span class="no">LocalCache</span><span class="o">::</span><span class="no">Middleware</span><span class="err">：在内存中保存缓存，非线程安全。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Runtime</span><span class="err">：设置</span> <span class="n">X</span><span class="o">-</span><span class="no">Runtime</span> <span class="err">报头，即执行请求的时长，单位为秒。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">MethodOverride</span><span class="err">：如果指定了</span> <span class="n">params</span><span class="o">[</span><span class="ss">:_method</span><span class="o">]</span> <span class="err">参数，会覆盖所用的请求方法。这个中间件实现了</span> <span class="no">PUT</span> <span class="err">和</span> <span class="no">DELETE</span> <span class="err">方法。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">RequestId</span><span class="err">：在响应中设置一个唯一的</span> <span class="n">X</span><span class="o">-</span><span class="no">Request</span><span class="o">-</span><span class="no">Id</span> <span class="err">报头，并启用</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Request</span><span class="c1">#uuid 方法。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">::</span><span class="no">Rack</span><span class="o">::</span><span class="no">Logger</span><span class="err">：请求开始时提醒日志，请求完成后写入日志。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">ShowExceptions</span><span class="err">：补救程序抛出的所有异常，调用处理异常的程序，使用特定的格式显示给用户。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">DebugExceptions</span><span class="err">：如果在本地开发，把异常写入日志，并显示一个调试页面。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">RemoteIp</span><span class="err">：检查欺骗攻击的</span> <span class="no">IP</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Reloader</span><span class="err">：提供“准备”和“清理”回调，协助开发环境中的代码重新加载功能。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Callbacks</span><span class="err">：在处理请求之前调用“准备”回调。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">::</span><span class="no">CheckPending</span><span class="err">：检查是否有待运行的迁移，如果有就抛出</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">PendingMigrationError</span> <span class="err">异常。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">ConnectionAdapters</span><span class="o">::</span><span class="no">ConnectionManagement</span><span class="err">：请求处理完成后，清理活跃的连接，除非在发起请求的环境中把</span> <span class="n">rack</span><span class="o">.</span><span class="n">test</span> <span class="err">设为</span> <span class="kp">true</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">QueryCache</span><span class="err">：启用</span> <span class="no">Active</span> <span class="no">Record</span> <span class="err">查询缓存。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Cookies</span><span class="err">：设置请求的</span> <span class="n">cookies</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Session</span><span class="o">::</span><span class="no">CookieStore</span><span class="err">：负责把会话存储在</span> <span class="n">cookies</span> <span class="err">中。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Flash</span><span class="err">：设置</span> <span class="no">Flash</span> <span class="err">消息的键。只有设定了</span> <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">session_store</span> <span class="err">选项时才可用。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">ParamsParser</span><span class="err">：把请求中的参数出入</span> <span class="n">params</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Head</span><span class="err">：把</span> <span class="no">HEAD</span> <span class="err">请求转换成</span> <span class="no">GET</span> <span class="err">请求，并处理。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">ConditionalGet</span><span class="err">：添加对“条件</span> <span class="no">GET</span><span class="err">”的支持，如果页面未修改，就不响应。</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">ETag</span><span class="err">：为所有字符串类型的主体添加</span> <span class="no">ETags</span> <span class="err">报头。</span><span class="no">ETags</span> <span class="err">用来验证缓存。</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://ruby-china.org/topics/21517">https://ruby-china.org/topics/21517</a></p>

<p><a href="http://wp.xdite.net/?p=1557">http://wp.xdite.net/?p=1557</a></p>
]]></content>
  </entry>
  
</feed>
