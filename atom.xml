<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LinJunzhu's Blog]]></title>
  <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/atom.xml" rel="self"/>
  <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/"/>
  <updated>2015-09-06T23:19:35+08:00</updated>
  <id>https://github.com/linjunzhu/linjunzhu.github.io.git/</id>
  <author>
    <name><![CDATA[林俊柱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用monit监控进程]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/08/14/ru-he-shi-yong-monitjian-kong-jin-cheng/"/>
    <updated>2015-08-14T12:27:29+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/08/14/ru-he-shi-yong-monitjian-kong-jin-cheng</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>前阵子服务器上的 puma 偶尔会挂掉，puma 不像 unicorn 有 master 进程保护着。因此就需要用 monit 来监控进程，当 puma 挂掉时自动重启</p>

<h2>安装</h2>

<p>Ubuntu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">aptitude</span> <span class="n">install</span> <span class="n">monit</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他系统的安装方式：
<a href="https://mmonit.com/wiki/Monit/Installation">官网 Wiki</a></p>

<h2>介绍</h2>

<p>配置文件位于：<code>/etc/monit/monitrc</code></p>

<p>打开 Web 服务，查看监控情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">set</span> <span class="n">httpd</span> <span class="n">port</span> <span class="mi">2812</span> <span class="ow">and</span>
</span><span class='line'>    <span class="n">use</span> <span class="n">address</span> <span class="mi">172</span><span class="o">.</span><span class="mi">16</span><span class="o">.</span><span class="mi">10</span><span class="o">.</span><span class="mi">6</span>
</span><span class='line'>    <span class="n">allow</span> <span class="n">localhost</span>   <span class="c1"># 允许本地访问</span>
</span><span class='line'>    <span class="n">allow</span> <span class="mi">172</span><span class="o">.</span><span class="mi">16</span><span class="o">.</span><span class="mi">20</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">255</span><span class="o">.</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span> <span class="c1">#允许本 IP 段访问</span>
</span><span class='line'>    <span class="n">allow</span> <span class="ss">admin</span><span class="p">:</span><span class="n">monit</span>      <span class="c1"># require user &#39;admin&#39; with password &#39;monit&#39;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>说下配置文件默认配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="err">检查周期，单位为秒</span><span class="o">--&gt;</span>
</span><span class='line'><span class="n">set</span> <span class="n">daemon</span> <span class="mi">120</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">日志文件位置</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">set</span> <span class="n">logfile</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">monit</span><span class="o">.</span><span class="n">log</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">存储</span> <span class="n">monit</span> <span class="err">实例的唯一</span> <span class="no">ID</span><span class="o">--&gt;</span>
</span><span class='line'><span class="n">set</span> <span class="n">idfile</span> <span class="sr">/var/</span><span class="n">lib</span><span class="o">/</span><span class="n">monit</span><span class="o">/</span><span class="nb">id</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">存放监控进程的情况</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">set</span> <span class="n">statefile</span> <span class="sr">/var/</span><span class="n">lib</span><span class="o">/</span><span class="n">monit</span><span class="o">/</span><span class="n">state</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">设置邮件</span><span class="o">--&gt;</span>
</span><span class='line'><span class="c1"># set mailserver mail.bar.baz,               # primary mailserver</span>
</span><span class='line'><span class="c1">#                backup.bar.baz port 10025,  # backup mailserver on port 10025</span>
</span><span class='line'><span class="c1">#                localhost                   # fallback relay</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 如果没配置 email, 会自动丢弃 alert</span>
</span><span class='line'><span class="c1"># 该设置可以保存 aler</span>
</span><span class='line'><span class="n">set</span> <span class="n">eventqueue</span>
</span><span class='line'>      <span class="n">basedir</span> <span class="sr">/var/</span><span class="n">lib</span><span class="o">/</span><span class="n">monit</span><span class="o">/</span><span class="n">events</span>
</span><span class='line'>      <span class="n">slots</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="no">Email</span> <span class="err">格式</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="c1">## set mail-format {</span>
</span><span class='line'><span class="c1">##      from: monit@$HOST</span>
</span><span class='line'><span class="c1">##   subject: monit alert --  $EVENT $SERVICE</span>
</span><span class='line'><span class="c1">##   message: $EVENT Service $SERVICE</span>
</span><span class='line'><span class="c1">##                 Date:        $DATE</span>
</span><span class='line'><span class="c1">##                 Action:      $ACTION</span>
</span><span class='line'><span class="c1">##                 Host:        $HOST</span>
</span><span class='line'><span class="c1">##                 Description: $DESCRIPTION</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">##            Your faithful employee,</span>
</span><span class='line'><span class="c1">##            Monit</span>
</span><span class='line'><span class="c1">## }</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="no">Email</span> <span class="err">发件人</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="c1"># set mail-format { from: monit@foo.bar }</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="no">Email</span> <span class="err">接收人</span><span class="o">--&gt;</span>
</span><span class='line'><span class="c1"># set alert sysadm@foo.bar                       # receive all alerts</span>
</span><span class='line'><span class="c1"># set alert manager@foo.bar only on { timeout }  # receive just service-</span>
</span><span class='line'><span class="c1">#                                                # timeout alert</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="err">开启</span> <span class="n">http</span> <span class="err">服务，查看监控情况</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="n">httpd</span> <span class="n">port</span> <span class="mi">2812</span> <span class="ow">and</span>
</span><span class='line'>    <span class="n">use</span> <span class="n">address</span> <span class="mi">172</span><span class="o">.</span><span class="mi">16</span><span class="o">.</span><span class="mi">10</span><span class="o">.</span><span class="mi">6</span>  <span class="c1"># only accept connection from localhost</span>
</span><span class='line'>    <span class="c1">#allow localhost</span>
</span><span class='line'>    <span class="c1">#allow 172.16.20.0/255.255.255.0</span>
</span><span class='line'>    <span class="c1">#allow 10.0.0.0        # allow localhost to connect to the server and</span>
</span><span class='line'>    <span class="n">allow</span> <span class="ss">admin</span><span class="p">:</span><span class="n">monit</span>      <span class="c1"># require user &#39;admin&#39; with password &#39;monit&#39;</span>
</span><span class='line'>   <span class="c1"># allow @monit           # allow users of group &#39;monit&#39; to connect (rw)</span>
</span><span class='line'>   <span class="c1"># allow @users readonly  # allow users of group &#39;users&#39; to connect readonly</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="sr">/etc/moni</span><span class="n">t</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/*</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们会在在<code>monitrc</code> 文件中的末尾看到这句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 包含该文件夹下的配置</span>
</span><span class='line'><span class="kp">include</span> <span class="sr">/etc/moni</span><span class="n">t</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/*</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此我们可以给每个要监控的进程写个<code>conf</code>配置文件。</p>

<h2>监控 Nginx</h2>

<p>在<code>/etc/monit/conf.d</code>下新建文件<code>nginx.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">check</span> <span class="n">process</span> <span class="n">nginx</span> <span class="n">with</span> <span class="n">pidfile</span> <span class="sr">/opt/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">logs</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>  <span class="n">start</span> <span class="n">program</span> <span class="o">=</span> <span class="s2">&quot;/etc/init.d/nginx start&quot;</span>
</span><span class='line'>  <span class="n">stop</span> <span class="n">program</span>  <span class="o">=</span> <span class="s2">&quot;/etc/init.d/nginx stop&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">www</span><span class="o">-</span><span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<h2>监控 Puma</h2>

<p>在<code>/etc/monit/conf.d</code>下新建文件<code>puma.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">check</span> <span class="n">process</span> <span class="n">puma_glassx</span>
</span><span class='line'>  <span class="n">with</span> <span class="n">pidfile</span> <span class="s2">&quot;/mnt/glassx/shared/tmp/pids/puma.pid&quot;</span>
</span><span class='line'>  <span class="n">start</span> <span class="n">program</span> <span class="o">=</span> <span class="s2">&quot;/usr/bin/sudo -u deployer /bin/bash -c &#39;cd /mnt/glassx/current &amp;&amp; ~/.rvm/bin/rvm ruby-2.1.2 do bundle exec puma -C /mnt/glassx/shared/puma.rb --daemon&#39;&quot;</span>
</span><span class='line'>  <span class="n">stop</span> <span class="n">program</span> <span class="o">=</span> <span class="s2">&quot;/usr/bin/sudo -u deployer /bin/bash -c &#39;cd /mnt/glassx/current &amp;&amp; ~/.rvm/bin/rvm ruby-2.1.2 do bundle exec pumactl -S /mnt/glassx/shared/tmp/pids/puma.state stop&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们手动 kill 掉进程，过一会就会发现进程又自动启动了~</p>

<h2>搭配 Capistrano</h2>

<p>打开<code>capfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Load DSL and Setup Up Stages</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/setup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/deploy&#39;</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/sidekiq&#39;</span>
</span><span class='line'><span class="c1"># 打开 monit 的监控 tasks</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/sidekiq/monit&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/puma&#39;</span>
</span><span class='line'><span class="c1"># 打开 monit 的监控 tasks</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/puma/monit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Loads custom tasks from `lib/capistrano/tasks&#39; if you have any defined.</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;lib/capistrano/tasks/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于<code>sidekiq</code>会在跑<code>deploy</code>的时候就执行 monit 相关任务，并且需要<code>sudo</code>权限，很麻烦，所以我们可以手动关掉，等到部署完成后再执行任务上传 monit 脚本</p>

<p>打开<code>deploy.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:sidekiq_default_hooks</span><span class="p">,</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>跑完<code>deploy</code>后，执行以下两条命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 将 monit 的监控配置上传到服务器</span>
</span><span class='line'><span class="n">cap</span> <span class="n">production</span> <span class="ss">puma</span><span class="p">:</span><span class="ss">monit</span><span class="p">:</span><span class="n">config</span>
</span><span class='line'><span class="n">cap</span> <span class="n">production</span> <span class="ss">sidekiq</span><span class="p">:</span><span class="ss">monit</span><span class="p">:</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两条命令在执行时需要<code>sudo</code>权限，原因是调用了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">mv</span> <span class="sr">/tmp/moni</span><span class="n">t</span><span class="o">.</span><span class="n">conf</span> <span class="sr">/etc/moni</span><span class="n">t</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">puma_glassx</span><span class="o">.</span><span class="n">conf</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">mv</span> <span class="sr">/tmp/moni</span><span class="n">t</span><span class="o">.</span><span class="n">conf</span> <span class="sr">/etc/moni</span><span class="n">t</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">sidekiq_glassx</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为我们只是上传有关 monit 的配置脚本而已，只需执行一次，因此我们在执行失败后，进入服务器手动输入这两条命令，即可完成。</p>

<h2>详细资料</h2>

<p>官网 WIKI：</p>

<p><a href="https://mmonit.com/wiki/Monit/ConfigurationExamples#NginX">https://mmonit.com/wiki/Monit/ConfigurationExamples#NginX</a></p>

<p><a href="https://mmonit.com/monit/documentation/monit.html#CONFIGURATION-EXAMPLES">https://mmonit.com/monit/documentation/monit.html#CONFIGURATION-EXAMPLES</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails中「错误信息」的实践规划]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/07/08/railszhong-cuo-wu-xin-xi-yi-ji-i18nde-shi-jian-gui-hua/"/>
    <updated>2015-07-08T11:15:01+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/07/08/railszhong-cuo-wu-xin-xi-yi-ji-i18nde-shi-jian-gui-hua</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>在我还是一个 Rails 新手的时候，曾纠结过，如何更好的规划显示错误信息，以及实现 I18N。前几天整理一个实习生的代码，发现他对错误信息的规划毫无章法，所以就写下这 blog, Rails 新手可以看看。</p>

<h1>基本概念</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;Email 不得为空&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 此时会调用 account.valid?，该 valid? 会调用所有validate，通过则 true,否则为 false</span>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">save</span>   <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">valid?</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">empty?</span>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;linjunzhugg@gmail.com&#39;</span>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">valid?</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">save</span>   <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>来看下源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File activemodel/lib/active_model/validations.rb, line 331</span>
</span><span class='line'><span class="k">def</span> <span class="nf">valid?</span><span class="p">(</span><span class="n">context</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">current_context</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">validation_context</span> <span class="o">=</span> <span class="n">validation_context</span><span class="p">,</span> <span class="n">context</span>
</span><span class='line'>  <span class="n">errors</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="n">run_validations!</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">validation_context</span> <span class="o">=</span> <span class="n">current_context</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># File activemodel/lib/active_model/validations.rb, line 394</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run_validations!</span>
</span><span class='line'>  <span class="n">_run_validate_callbacks</span>
</span><span class='line'>  <span class="n">errors</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面可以看到，valid? 会将验证结果放在对象的 errors中，如果对象的 errors 没东西，那么会返回 true，验证通过，返回 false，则验证不通过，save 会失败。</p>

<h1>开始实践</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># 不要在这里手动写 message，应该在 locals 中的 yml 文件写</span>
</span><span class='line'>  <span class="c1"># validates_presence_of :email, :message =&gt; &quot;Email 不得为空&quot;</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:email</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># users_controller.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># save 失败后会将错误信息存入  @user.errors</span>
</span><span class='line'>    <span class="c1"># 就不用自己在这里写错误信息了</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails 有默认的错误信息，我们可以根据需要自定义错误信息</p>

<h1>对应错误信息 Key</h1>

<p>观看 Wiki: <a href="http://guides.ruby-china.org/i18n.html">http://guides.ruby-china.org/i18n.html</a></p>

<h1>自定义错误信息</h1>

<p><code>validates_presence_of</code>的错误信息 key 是 <code>blank</code>，Active Record 会按照下面的顺序寻找<code>blank</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">blank</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有继承链，则会往继承链上找：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Admin</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">admin</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">admin</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">activerecord</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">blank</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">blank</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么我们可以在 locales 内的 yml 文件中做文章:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">zh</span><span class="o">-</span><span class="ss">CN</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">activerecord</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">attributes</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">user</span><span class="p">:</span>
</span><span class='line'>        <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;Email&#39;</span>
</span><span class='line'>        <span class="ss">password</span><span class="p">:</span> <span class="s1">&#39;密码&#39;</span>
</span><span class='line'>      <span class="ss">work_order</span><span class="p">:</span>
</span><span class='line'>        <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;标题&#39;</span>
</span><span class='line'>        <span class="ss">question</span><span class="p">:</span> <span class="s1">&#39;问题&#39;</span>
</span><span class='line'>    <span class="ss">errors</span><span class="p">:</span>
</span><span class='line'>      <span class="c1"># 执行 errors.full_message 会按照此格式输出</span>
</span><span class='line'>      <span class="nb">format</span><span class="p">:</span> <span class="o">!</span> <span class="s1">&#39;%{attribute}%{message}&#39;</span>
</span><span class='line'>      <span class="c1"># 这里作为通用的错误信息</span>
</span><span class='line'>      <span class="ss">messages</span><span class="p">:</span>
</span><span class='line'>        <span class="ss">blank</span><span class="p">:</span> <span class="s2">&quot;%{attribute} 不能为空&quot;</span>
</span><span class='line'>        <span class="ss">invalid</span><span class="p">:</span> <span class="s2">&quot;%{attribute} 格式不正确&quot;</span>
</span><span class='line'>        <span class="ss">taken</span><span class="p">:</span> <span class="s2">&quot;%{attribute} 已经被使用&quot;</span>
</span><span class='line'>      <span class="c1"># 这里作为针对性的 model 错误信息</span>
</span><span class='line'>      <span class="ss">models</span><span class="p">:</span>
</span><span class='line'>        <span class="ss">user</span><span class="p">:</span>
</span><span class='line'>          <span class="ss">attributes</span><span class="p">:</span>
</span><span class='line'>            <span class="ss">password</span><span class="p">:</span>
</span><span class='line'>              <span class="ss">too_short</span><span class="p">:</span> <span class="s1">&#39;密码 不得小于6位&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">zh</span><span class="o">-</span><span class="ss">CN</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">activerecord</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">attributes</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">user</span><span class="p">:</span>
</span><span class='line'>        <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;Email&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">avtiverecord</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">errors</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">messages</span><span class="p">:</span>
</span><span class='line'>        <span class="ss">blank</span><span class="p">:</span> <span class="s2">&quot;%{attribute} 不能为空&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">不要这么写，这样后面的</span> <span class="n">activerecord</span> <span class="err">会覆盖掉前面的东西，而不是作为一个</span> <span class="n">namespace</span> <span class="err">的存在。</span>
</span></code></pre></td></tr></table></div></figure>


<h1>显示错误信息</h1>

<p>我们回到 controller 再看下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># users_controller.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># 直接在 view 层去显示错误信息</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># users_helper.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">show_error</span> <span class="n">model</span><span class="p">,</span> <span class="n">column</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s1">&#39;errors&#39;</span><span class="p">)</span><span class="o">[</span><span class="n">column</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="n">sanitize</span> <span class="s2">&quot;&lt;div class=&#39;error-msg&#39;&gt;* </span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s1">&#39;errors&#39;</span><span class="p">)</span><span class="o">[</span><span class="n">column</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">&lt;/div&gt;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># users/new.html.erb</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">oooooooooxxxxxxxxx</span>
</span><span class='line'>  <span class="c1"># 此时这里就可以按照需求显示出我们在 yml 中自定义的错误信息了</span>
</span><span class='line'>  <span class="n">show_error</span><span class="p">(</span><span class="vi">@user</span><span class="p">,</span> <span class="ss">:avatar</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/body&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>非 Active Record 操控错误信息</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># users_controller.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">user_pass?</span>
</span><span class='line'>    <span class="c1"># 自己在 yml 中定义错误信息</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span>  <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;web.messages.success&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span>  <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;web.messages.failed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>自定义 validate 该如何定义错误信息</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:file_size</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">file_size</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">avatar</span><span class="o">.</span><span class="n">file</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">to_f</span><span class="o">/</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">500</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">[</span><span class="ss">:avatar</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;activerecord.errors.models.user.attribuets.avatar.too_long&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>为何在这里调用 errors[:avatar]，错误信息就会放到 @user 中呢？</p>

<p>因为<code>validate</code>是在<code>@user</code>进行<code>save</code>时，才会调用，可以说是实例方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">file_size</span>
</span><span class='line'>    <span class="nb">p</span> <span class="nb">self</span>   <span class="o">=&gt;</span> <span class="err">会发现其实是当前实例</span> <span class="vi">@user</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式只是简单的将错误信息放入<code>errors</code>，而且在<code>yml</code>并不能够获取<code>%{attribute}参数</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">errors</span><span class="o">[</span><span class="ss">:avatar</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;activerecord.errors.models.user.attribuets.avatar.too_long&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来更进一步：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">file_size</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">avatar</span><span class="o">.</span><span class="n">file</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">to_f</span><span class="o">/</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">500</span>
</span><span class='line'>    <span class="c1"># 这样就会调用到`model`的错误信息 (:column, :event_key)</span>
</span><span class='line'>    <span class="c1"># 也不用写那么长了</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">[</span><span class="ss">:avatar</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">errors</span><span class="o">.</span><span class="n">generate_message</span><span class="p">(</span><span class="ss">:avatar</span><span class="p">,</span> <span class="ss">:too_long</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>移除column错误产生的<code>field_with_errors</code></h1>

<p>在 form 表单中，如果某个 column 有相关的 errors 信息， Rails 会自动在该<code>column</code>相关的元素父层加多一个 div</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field_with_errors&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;job_client_email&quot;</span><span class="o">&gt;</span><span class="ss">Email</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field_with_errors&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;email&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;wrong email&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;job[client_email]&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;job_client_email&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重写掉<code>config/application.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 原先</span>
</span><span class='line'><span class="vi">@field_error_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">html_tag</span><span class="p">,</span> <span class="n">instance</span><span class="o">|</span>
</span><span class='line'>  <span class="s2">&quot;&lt;div class=</span><span class="se">\&quot;</span><span class="s2">field_with_errors</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">html_tag</span><span class="si">}</span><span class="s2">&lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 重写后(当前也可以根据需求自己改造)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_view</span><span class="o">.</span><span class="n">field_error_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">html_tag</span><span class="p">,</span> <span class="n">instance</span><span class="o">|</span>
</span><span class='line'>  <span class="n">html_tag</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano3+Puma+Nginx部署应用]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/06/16/capistrano3-plus-puma-plus-nginxbu-shu-ying-yong/"/>
    <updated>2015-06-16T13:28:45+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/06/16/capistrano3-plus-puma-plus-nginxbu-shu-ying-yong</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Puma 是支持 Ruby 的一个 Web 应用服务器，基于多线程。</p>

<h2>使用环境</h2>

<ol>
<li>Capistrano 3.x</li>
<li>Rails4.2</li>
<li>Ruby2.2</li>
<li>RVM</li>
<li>Puma</li>
<li>Nginx</li>
</ol>


<h2>安装</h2>

<p>在<code>gemfile</code>中添加支持的 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-bundler&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rvm&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># puma 是一个 Gem,服务器不需要安装其他的</span>
</span><span class='line'>  <span class="n">gem</span> <span class="err">&#39;</span><span class="n">puma</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cap</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p><code>capfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/setup&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/deploy&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/puma&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;lib/capistrano/tasks/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>deploy.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config valid only for current version of Capistrano</span>
</span><span class='line'><span class="n">lock</span> <span class="s1">&#39;3.4.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;xgroup&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@github.com:linjunzhugg/xx.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/mnt/xgroup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :linked_files is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml config/oauth2.yml config/redis.yml config/secrets.yml}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for linked_dirs is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:clear_cache</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">10</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Here we can do anything such as:</span>
</span><span class='line'>      <span class="c1"># within release_path do</span>
</span><span class='line'>      <span class="c1">#   execute :rake, &#39;cache:clear&#39;</span>
</span><span class='line'>      <span class="c1"># end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:finishing</span><span class="p">,</span> <span class="s1">&#39;deploy:cleanup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>production.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Simple Role Syntax</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_type</span><span class="p">,</span> <span class="ss">:user</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_ruby_string</span><span class="p">,</span> <span class="s1">&#39;ruby-2.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s2">&quot;master&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;deployer&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{app}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 针对 puma 的配置</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_rackup</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span> <span class="s1">&#39;config.ru&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_state</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/tmp/pids/puma.state&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_pid</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/tmp/pids/puma.pid&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_bind</span><span class="p">,</span> <span class="s2">&quot;unix://</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/tmp/sockets/puma.sock&quot;</span>    <span class="c1">#accept array for multi-bind</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_conf</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/puma.rb&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_access_log</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log/puma_error.log&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_error_log</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log/puma_access.log&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_role</span><span class="p">,</span> <span class="ss">:app</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_env</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:rack_env</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:rails_env</span><span class="p">,</span> <span class="s1">&#39;production&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_threads</span><span class="p">,</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">120</span><span class="o">]</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_workers</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_worker_timeout</span><span class="p">,</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_init_active_record</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:puma_preload_app</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 最终会创建 shared/puma.rb，将配置写进去，然后调用</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>envrioments/production.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Disable serving static files from the `/public` folder by default sinc</span>
</span><span class='line'><span class="c1"># Apache or NGINX already handles this.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">serve_static_files</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_SERVE_STATIC_FILES&#39;</span><span class="o">].</span><span class="n">present</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># important!!!</span>
</span><span class='line'><span class="c1"># 在 production.rb 有这么个配置，决定服务器是否伺服静态文件，默认服务器没设这个变量，因此为 false, 默认不伺服静态文件</span>
</span></code></pre></td></tr></table></div></figure>


<h2>服务器配置</h2>

<p><code>xgroup.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">upstream</span> <span class="n">xgroup</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">server</span> <span class="ss">unix</span><span class="p">:</span><span class="sr">/mnt/x</span><span class="n">group</span><span class="o">/</span><span class="n">shared</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">sockets</span><span class="o">/</span><span class="n">puma</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="n">xx</span>
</span><span class='line'>  <span class="n">root</span> <span class="sr">/mnt/x</span><span class="n">group</span><span class="o">/</span><span class="n">current</span><span class="o">/</span><span class="kp">public</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 由于服务器不伺服静态文件，所以自己需要手动配置</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">~*</span> <span class="sr">/assets/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">gzip_static</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>    <span class="n">expires</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="n">add_header</span> <span class="no">Cache</span><span class="o">-</span><span class="no">Control</span> <span class="kp">public</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//x</span><span class="n">group</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 也可以这么做：</span>
</span><span class='line'>
</span><span class='line'><span class="n">upstream</span> <span class="n">xgroup</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">server</span> <span class="ss">unix</span><span class="p">:</span><span class="sr">/mnt/x</span><span class="n">group</span><span class="o">/</span><span class="n">shared</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">sockets</span><span class="o">/</span><span class="n">puma</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="n">xx</span>
</span><span class='line'>  <span class="n">root</span> <span class="sr">/mnt/x</span><span class="n">group</span><span class="o">/</span><span class="n">current</span><span class="o">/</span><span class="kp">public</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 先去访问机器上对应的路径文件，访问不了再去 @xgroup</span>
</span><span class='line'>  <span class="c1"># 如果不加这句，会访问不了静态文件  </span>
</span><span class='line'>  <span class="n">try_files</span> <span class="vg">$uri</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span> <span class="vg">$uri</span> <span class="vi">@xgroup</span><span class="p">;</span>
</span><span class='line'>  <span class="n">location</span> <span class="vi">@xgroup</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//x</span><span class="n">group</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Over~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[content-type与json]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/06/10/content-typeyu-json/"/>
    <updated>2015-06-10T18:00:47+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/06/10/content-typeyu-json</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近有两个 Android 同事在调用我写的 API 时，向我反映调用有问题，仔细一查，发现是客户端所设置的 Content-Type 与 Accept 有关系。所以写一下，后续有同事还有疑问，就可以丢这文章给他了~~</p>

<h2>Content-Type</h2>

<p>该 header 头是用来告诉服务器，请求体是如何进行编码的，以便服务器进行相对应的解码。</p>

<p>一般来说，有如下几种:</p>

<ol>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>application/json</li>
<li>application/xml</li>
<li>text/html</li>
<li>text/plain</li>
</ol>


<p>等等</p>

<h3>application/x-www-form-urlencoded</h3>

<p>这是我们最常见的 content-type 头了，我们使用浏览器原生 form 表单，提交时便会自动设置 content-type 为这个，其中提交的数据按照：<code>key1=val1&amp;key2=val2</code>进行编码，key val 会进行 URL 转码</p>

<p>注意：content-type 头仅仅只是告诉服务器要如何解码，跟浏览器发送请求时对请求体如何编码无关。</p>

<p>也就是说，此时用 form 表单提交，但是 content-type 手动设置为 application/json，那么浏览器还是会以 form 形式对请求体编码。</p>

<h3>multipart/form-data</h3>

<p>当我们需要上传文件时，就会用到这种方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Content</span><span class="o">-</span><span class="ss">Type</span><span class="p">:</span><span class="n">multipart</span><span class="o">/</span><span class="n">form</span><span class="o">-</span><span class="n">data</span><span class="p">;</span> <span class="n">boundary</span><span class="o">=----</span><span class="no">WebKitFormBoundaryrGKCBY7qhFd3TrwA</span>
</span><span class='line'>
</span><span class='line'><span class="o">------</span><span class="no">WebKitFormBoundaryrGKCBY7qhFd3TrwA</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="ss">Disposition</span><span class="p">:</span> <span class="n">form</span><span class="o">-</span><span class="n">data</span><span class="p">;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;text&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">title</span>
</span><span class='line'><span class="o">------</span><span class="no">WebKitFormBoundaryrGKCBY7qhFd3TrwA</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="ss">Disposition</span><span class="p">:</span> <span class="n">form</span><span class="o">-</span><span class="n">data</span><span class="p">;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;file&quot;</span><span class="p">;</span> <span class="n">filename</span><span class="o">=</span><span class="s2">&quot;chrome.png&quot;</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="ss">Type</span><span class="p">:</span> <span class="n">image</span><span class="o">/</span><span class="n">png</span>
</span><span class='line'>
</span><span class='line'><span class="no">PNG</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="n">content</span> <span class="n">of</span> <span class="n">chrome</span><span class="o">.</span><span class="n">png</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">------</span><span class="no">WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><span class="o">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>浏览器会以<code>multipart/form-data</code>形式进行编码，同时设置 content-type</p>

<h3>application/json</h3>

<p>这种方式在当今 restful 盛行的年代，特别常用。</p>

<p>我们只需要将 json 格式的参数附带到请求体便是，同时手动设置 content-type 为 application/json ( jquery 中的 ajax,设置某个参数为 json即可，还有其他的，主要看框架是否会自动处理，否则就手动设置）</p>

<h2>Accept</h2>

<p>该 header 头是告诉服务器，客户端需要什么格式的响应。</p>

<ol>
<li>Accept : application/json</li>
<li>Accept : text/html</li>
</ol>


<h2>要求服务器返回响应的格式</h2>

<h3>一、</h3>

<p>平常客户端设置该 Accept 参数，即可要求服务端返回响应类型的数据。</p>

<h3>二、</h3>

<p>直接在 URL 尾部添加 <code>.json</code>，这种方式需要服务端的支持，告诉服务端，我需要<code>json</code>的响应</p>

<p>在 Rails 中，如果附带<code>.json</code>，会自动解析成一个参数 params[:format] = &lsquo;json&#8217;，之后便能通过代码针对不同解析返回不同数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rails 会自动处理 Accept 以及 .json 两种情况</span>
</span><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">groups_url</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>三、</h3>

<p>在 Rails 中设置默认 format</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">defaults</span><span class="p">:</span> <span class="p">{</span><span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样服务器就会默认有 format 为 json 的参数</p>

<p>那我同时设置了<code>Accept</code>以及<code>format</code>怎么办？</p>

<p>在 Rails 中，<code>format</code>的优先级高于<code>Accept</code></p>

<h2>同事遇到的问题</h2>

<p>1、调用接口时，反应接口返回了<code>500</code>，看了下，发现是服务器接收到的请求头为：content-type: application/json，但是请求体却是以<code>application/x-www-form-urlencoded</code>的形式进行编码的，因此两者不对称，解析出错。</p>

<p>2、调用接口时，返回的并不是 json 数据，check 后，发现调用接口时，没加 Accept: application/json，并且 URL 尾部没加<code>.json</code>，因此服务器就果断返回<code>text/html</code>对应的数据回去啦~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Circleci]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/04/22/shi-yong-circleci/"/>
    <updated>2015-04-22T12:11:21+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/04/22/shi-yong-circleci</id>
    <content type="html"><![CDATA[<p>这货棒棒的好用！</p>

<p>我们每次部署任务时，都会跑测试，测试通过再手动跑部署命令。而有了这货，就可以自动跑测试，跑完自动部署。</p>

<h2>第一步</h2>

<p>先上<a href="https://circleci.com/">Circleci官网</a>注册账号。默认有一个<code>free container</code>，如果该项目是<code>public</code>的，那么有四个<code>free container</code>。也就是你可以同时 hold 四个项目</p>

<h2>第二步</h2>

<p>选择账号，选择仓库，建立容器container</p>

<h2>第三步</h2>

<p>只要在 master 上面有新的 commit</p>

<p>就会自动直接跑了！！！
卧槽！！！
什么配置都不用啊！！！！</p>

<p>(当然只是build项目，跑测试，部署到哪里还是要自己添加命令的）</p>

<p>因为 Circleci 会自动检测你是什么项目，然后采取不同的默认配置进行跑你的项目。</p>

<h2>circle.yml</h2>

<p>通过该配置文件你可以做很多事情，默认可以不用去动他，如果想添加自己的东西，可以写一些参数覆盖掉默认配置。</p>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">machine</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">ruby</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">version</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>  <span class="ss">services</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">redis</span>
</span><span class='line'><span class="ss">general</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">branches</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">only</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">master</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">staging</span>
</span><span class='line'><span class="ss">deployment</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">production</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">branch</span><span class="p">:</span> <span class="n">master</span>
</span><span class='line'>    <span class="ss">commands</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>指明了需要什么 branch，如何部署，该跑什么 services.默认的services有<code>mysql``Postgres``Redis``MongoDB</code></p>

<h2>容器</h2>

<p>每一个项目它都会给我们生成一个 VM，相当于一个虚拟机，因此我们还可以自己<code>ssh</code>上 VM，进行查看问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB跨域与同源]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/04/21/webkua-yu-yu-tong-yuan/"/>
    <updated>2015-04-21T20:08:09+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/04/21/webkua-yu-yu-tong-yuan</id>
    <content type="html"><![CDATA[<p>这几天遇到<code>跨域</code>跟<code>同源</code>的问题。整理下知识点。</p>

<h1>同源策略</h1>

<p>浏览器有一个很重要的概念——同源策略(Same-Origin Policy)。所谓同源是指，域名，协议，端口相同。不同源的客户端脚(javascript、ActionScript)本在没明确授权的情况下，不能读写对方的资源。</p>

<p>如果Web世界没有同源策略，当你登录Gmail邮箱并打开另一个站点时，这个站点上的JavaScript就可以跨域读取你的Gmail邮箱数据，这样整个Web世界就无隐私可言了。</p>

<p>不同源举例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 同源要求同域名同协议同端口</span>
</span><span class='line'><span class="err">域名：</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">bigertech</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">bigertech</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">bigertech</span><span class="o">.</span><span class="n">cn</span>
</span><span class='line'>
</span><span class='line'><span class="err">协议：</span>
</span><span class='line'><span class="n">http</span><span class="err">、</span><span class="n">https</span>
</span><span class='line'>
</span><span class='line'><span class="err">端口</span>
</span><span class='line'><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">3000</span><span class="err">、</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">3001</span>
</span></code></pre></td></tr></table></div></figure>


<p>常见的：</p>

<p>我的 A 站点，发了个 AJAX 请求到 B 站点，会收到这样的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">No</span> <span class="s1">&#39;Access-Control-Allow-Origin&#39;</span> <span class="n">header</span> <span class="n">is</span> <span class="n">present</span> <span class="n">on</span> <span class="n">the</span> <span class="n">requested</span> <span class="n">resource</span>
</span></code></pre></td></tr></table></div></figure>


<h1>解决方法</h1>

<p>1、在 Rails 中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after_action</span> <span class="ss">:set_access_control_headers</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">set_access_control_header</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Request-Method&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这里偷懒指定了所有域名都允许跨域，一般来说是指定我们允许的域名</p>

<p>2、使用<code>JSONP</code>方式</p>

<p>JSONP(JSON with Padding)是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）</p>

<p>虽然浏览器有<code>同源策略</code>，但是<code>HTML</code>中的<code>img,script</code>等标签是不用遵循同源策略的， JSONP 则是利用了 script 这个特点。</p>

<p>服务端：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># callback 是 rails 直接支持 JSONP 的参数</span>
</span><span class='line'><span class="c1"># hello 一般是客户端给过来的 callback 函数名</span>
</span><span class='line'><span class="c1"># `callback函数` 将在客户端进行执行 script</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>   <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">hello</span><span class="p">:</span> <span class="ss">:world</span><span class="p">},</span> <span class="ss">callback</span><span class="p">:</span> <span class="n">hello</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 关闭 csrf 防护</span>
</span><span class='line'><span class="c1"># 因为返回格式为 xxx()，属于危险字符script</span>
</span><span class='line'><span class="c1"># protect_from_forgery with: :exception</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 返回结果</span>
</span><span class='line'><span class="sr">/**/</span><span class="n">hello</span><span class="p">({</span><span class="s2">&quot;hello&quot;</span><span class="ss">:&quot;world&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 方式1</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;localhost:3001/students&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 方式2 ( 使用 jquery )</span>
</span><span class='line'><span class="n">function</span> <span class="n">hello</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;something&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$.</span><span class="n">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">jsonp</span><span class="p">:</span> <span class="s1">&#39;callback函数名&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">dataType</span><span class="p">:</span> <span class="s2">&quot;jsonp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">url</span><span class="p">:</span> <span class="s2">&quot;http://localhost:3001/students&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">success</span><span class="p">:</span> <span class="n">function</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1"># 一旦返回将会自动执行hello()</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="ss">error</span><span class="p">:</span> <span class="n">function</span><span class="p">(</span><span class="no">XMLHttpRequest</span><span class="p">,</span> <span class="n">textStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Tips</h1>

<p>虽然说有<code>同源策略</code>的存在，站点 A 拿不到站点 B 的信息。但其实站点 B 已经处理完请求 response 回去了，只不过被站点 A 的浏览器给拦截了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 站点 B，此时已经成功处理请求返回 response 了</span>
</span><span class='line'><span class="no">Started</span> <span class="no">GET</span> <span class="s2">&quot;/students&quot;</span> <span class="k">for</span> <span class="o">::</span><span class="mi">1</span> <span class="n">at</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">21</span> <span class="mi">20</span><span class="p">:</span><span class="mi">32</span><span class="p">:</span><span class="mi">32</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">StudentsController</span><span class="c1">#index as */*</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">200</span> <span class="no">OK</span> <span class="k">in</span> <span class="mi">1</span><span class="n">ms</span> <span class="p">(</span><span class="ss">Views</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span> <span class="o">|</span> <span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，如果你在后台代码中 / Shell 中进行访问请求的话：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 是成功返回信息的</span>
</span><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3001</span><span class="o">/</span><span class="n">students</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span>   <span class="sr">/**/</span><span class="n">hello</span><span class="p">({</span><span class="s2">&quot;hello&quot;</span><span class="ss">:&quot;world&quot;</span><span class="p">})</span><span class="o">%</span>
</span></code></pre></td></tr></table></div></figure>


<p>有人说这样子那同源策略有什么用？不是一下子就被破解了么？</p>

<p>首先，<code>同源策略</code>是浏览器的行为。</p>

<p>其次，当你登录了网银后，打开<code>站点A</code>，此时<code>站点A</code>向<code>网银</code>发送一条<code>request</code>，注意，此时是会附带你<code>网银cookies</code>过去的，相当于你在<code>网银</code>自己发的<code>request</code>一样，如果没有<code>同源策略</code>，这时你的<code>网银</code>就相当于别人的了。。。（当然网银的安全程度远远大于此- -)</p>

<p>而如果你用后台进行发送请求的话，是不会附带任何<code>cookies</code>的。因此也就无效了。</p>

<p>注意 <code>postman</code>是可以成功请求的。（不知道postman做了什么，总之postman没有阻止跨域的情况)</p>

<h2>XSS 与 CSRF</h2>

<p>说起安全，这两者可是 WEB 届大名鼎鼎的漏洞明星啊！</p>

<p>XSS :  跨站脚本攻击</p>

<p>CSRF : 跨站请求伪造攻击。</p>

<p>以下這篇文章写得非常好，值得一看。
<a href="http://snoopyxdy.blog.163.com/blog/static/60117440201281294147873/">http://snoopyxdy.blog.163.com/blog/static/60117440201281294147873/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails-CSRF-Explore]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/04/20/rails-csrf-explore/"/>
    <updated>2015-04-20T22:52:59+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/04/20/rails-csrf-explore</id>
    <content type="html"><![CDATA[<h2>目录</h2>

<ol>
<li>引言</li>
<li>session</li>
<li>CSRF</li>
<li>真相大白</li>
<li>破解？</li>
</ol>


<h2>一、引言</h2>

<p>这段时间一直在想，Rails 的 CSRF token 要破解不是很简单么？<code>GET</code>请求到网页拿到 token，随后发送恶意<code>POST</code>请求到服务器不就破解了么？事实证明我还是 Too young too simple.</p>

<h2>二、尝试</h2>

<ol>
<li><p>写了个程序在<code>ruby</code>中去<code>GET</code>其他服务器的网页，获取到<code>token</code>后，伪造恶意<code>POST</code>请求，附带<code>token</code>，结果<code>402 invalid token</code></p></li>
<li><p>真实打开浏览器，获取网页中<code>token</code>，随后复制该<code>token</code>，在<code>ruby</code>中恶意伪造<code>POST</code>请求并附带<code>token</code>，结果还是<code>402 invalid token</code></p></li>
<li><p>真实打开浏览器，获取token，打开<code>postman</code>，发送<code>POST</code>请求。成功<code>200</code></p></li>
</ol>


<p>这是为什么呢？</p>

<h2>二、session</h2>

<p>在 Rails 中，默认的session存储方式是：<code>ActionDispatch::Session::CookieStore</code></p>

<p>也就是默认将<code>session</code>的内容存放到客户端<code>cookie</code>中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">_glassx_session</span><span class="p">:</span>
</span><span class='line'><span class="no">TE9xZ3Zud1dxRFYxdEtSek5mYldTMkpnZ1NWUlF5SjdzODVRSkJYNGN6VmNDc1VGb1lzSGJPU0FLYWhoMU5ZSHZCeXUwNTFWdWFQaWpKZmZSUC96c0dWbFdDcmlZK3RTcENabXZoaFVScWx1SWlxR1dEbmcwU1BXSDBZWUVOVW1EN0ZscmZpWkJsOFBZajZST0Z3VWxJM09NOGVTRFp2djRyYVB4SVJZNkVWRlM4dmw0TVNYb01jOGJYdVRXKzYxY1pyeXNtT0VkVWZ4YjZFcTdVU1FLVEU2aXlXbGRIOWY3c0Q1THlPRGtWeFhOb1BCd1M0S3hOQ04xTHNSajh3MC0tS3I0UVZkK2tuWGx0d1BDSVp3b1diZz09</span><span class="o">--</span><span class="n">cd6094c15ae50026d0377b6c32b7e0986b447d74</span>
</span></code></pre></td></tr></table></div></figure>


<p>session中的数据保存在cookie中时是先marshal后，然后利用密码来加密的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">marshal</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">---</span><span class="n">digest_with_secret_key</span><span class="p">(</span><span class="n">marshal</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里所用<code>secret key</code>则是我们在<code>config/secrets.yml</code>设置的。</p>

<p>加密的原因是防止 session 被偷看，并且<code>防止 session 被修改</code>。</p>

<h2>三、CSRF</h2>

<p>我们在访问服务器的网页时，会找到这样的 token</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;csrf-param&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;authenticity_token&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;csrf-token&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;yT5/q+GxMDy96ISmdNfE4esNrc8YZOBUrQefXO21tJ19iGD1XjRkJ2/ELC1A952U5qDp3vpo6MhhHQB8fOmivw==&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这<code>token</code>是服务器生成后返回的。</p>

<p>具体流程是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 生成加密的token（也就是我们在网页上见到的csrf-token)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">masked_authenticity_token</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'>  <span class="n">one_time_pad</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_bytes</span><span class="p">(</span><span class="no">AUTHENTICITY_TOKEN_LENGTH</span><span class="p">)</span>
</span><span class='line'>  <span class="n">encrypted_csrf_token</span> <span class="o">=</span> <span class="n">xor_byte_strings</span><span class="p">(</span><span class="n">one_time_pad</span><span class="p">,</span> <span class="n">real_csrf_token</span><span class="p">(</span><span class="n">session</span><span class="p">))</span>
</span><span class='line'>  <span class="n">masked_token</span> <span class="o">=</span> <span class="n">one_time_pad</span> <span class="o">+</span> <span class="n">encrypted_csrf_token</span>
</span><span class='line'>  <span class="no">Base64</span><span class="o">.</span><span class="n">strict_encode64</span><span class="p">(</span><span class="n">masked_token</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 生成 _csrf_token，并且将其放入`session[:_csrf_token]`中</span>
</span><span class='line'><span class="k">def</span> <span class="nf">real_csrf_token</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:_csrf_token</span><span class="o">]</span> <span class="o">||=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">base64</span><span class="p">(</span><span class="no">AUTHENTICITY_TOKEN_LENGTH</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Base64</span><span class="o">.</span><span class="n">strict_decode64</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:_csrf_token</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 验证 token 是否有效（这段代码我简化过）</span>
</span><span class='line'><span class="k">def</span> <span class="nf">valid_authenticity_token?</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">encoded_masked_token</span><span class="p">)</span>
</span><span class='line'>  <span class="n">masked_token</span> <span class="o">=</span> <span class="no">Base64</span><span class="o">.</span><span class="n">strict_decode64</span><span class="p">(</span><span class="n">encoded_masked_token</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">masked_token</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="no">AUTHENTICITY_TOKEN_LENGTH</span>
</span><span class='line'>       <span class="n">compare_with_real_token</span> <span class="n">masked_token</span><span class="p">,</span> <span class="n">session</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">masked_token</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="no">AUTHENTICITY_TOKEN_LENGTH</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>     <span class="n">one_time_pad</span> <span class="o">=</span> <span class="n">masked_token</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">AUTHENTICITY_TOKEN_LENGTH</span><span class="o">]</span>
</span><span class='line'>       <span class="n">encrypted_csrf_token</span> <span class="o">=</span> <span class="n">masked_token</span><span class="o">[</span><span class="no">AUTHENTICITY_TOKEN_LENGTH</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>       <span class="n">csrf_token</span> <span class="o">=</span> <span class="n">xor_byte_strings</span><span class="p">(</span><span class="n">one_time_pad</span><span class="p">,</span> <span class="n">encrypted_csrf_token</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">compare_with_real_token</span> <span class="n">csrf_token</span><span class="p">,</span> <span class="n">session</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 开始验证</span>
</span><span class='line'><span class="k">def</span> <span class="nf">compare_with_real_token</span><span class="p">(</span><span class="n">unmasked_token</span><span class="p">,</span> <span class="n">session</span><span class="p">)</span>
</span><span class='line'>   <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">SecurityUtils</span><span class="o">.</span><span class="n">secure_compare</span><span class="p">(</span><span class="n">unmasked_token</span><span class="p">,</span> <span class="n">real_csrf_token</span><span class="p">(</span><span class="n">session</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从源码可以看出，服务器会将生成的<code>_csrf_token</code>放入用户的<code>session</code>中，当客户端将<code>csrf_token</code>随着<code>request</code>发送过来时，服务器会将<code>csrf_token</code>转换回非加密，随后与<code>session</code>中的<code>_csrf_token</code>进行验证。</p>

<h2>四、真相大白</h2>

<ol>
<li>验证时需要<code>session内的_csrf_token</code>，而用<code>ruby</code>代码直接发送http请求时是不会附带<code>cookies</code>的，所以验证肯定不会通过，这也是上面尝试第一二步失败的原因。</li>
<li>使用<code>postman</code>是会自带<code>cookies</code>发送过去的，因此验证通过。</li>
</ol>


<h3>Tips</h3>

<p>附带<code>cookies</code>是浏览器的行为</p>

<h2>五、破解？</h2>

<p>这时有人会问，<code>rails</code>是开源的，有人看了源码之后，拿到网页的<code>csrf_token</code>，按照步骤一步步转换回非加密状态，不就破解了？</p>

<p>还是 too young!</p>

<p>在服务器是将<code>session[_csrf_token]</code>跟用户的<code>csrf_token</code>进行验证，就算你将<code>csrf_token</code>还原了也没用，还是需要<code>session[_csrf_token]</code>，而<code>session</code>是经过<code>secret</code>加密过的，因为无法篡改<code>session</code>，因而也破解不了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Ruby生成二维码]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/03/06/shi-yong-rubysheng-cheng-er-wei-ma/"/>
    <updated>2015-03-06T15:53:15+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/03/06/shi-yong-rubysheng-cheng-er-wei-ma</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>偶尔项目中会用到二维码，这时生成二维码有几种方式：</p>

<ol>
<li>自己动手，丰衣足食，自己来生成</li>
<li>通过调用网络API来拉取二维码</li>
</ol>


<p>但是，由于担心网络的不稳定 或者 项目只能对内部开放，此时就需要第一种方式来实现了。</p>

<h2>所需 Gem</h2>

<ol>
<li>gem &lsquo;qrencoder&rsquo;</li>
<li>gem &lsquo;rqrencoder-magick&rsquo;</li>
<li>gem &lsquo;rqrcode_png&rsquo;</li>
</ol>


<h2>Begin</h2>

<h3>1. 先安装本机库 <code>qrencode</code></h3>

<p>Mac 用户：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install qrencode</span></code></pre></td></tr></table></div></figure>


<p>Linux 用户：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install qrencode</span></code></pre></td></tr></table></div></figure>


<h3>2. 安装 <code>qrencoder</code> 这个 gem</h3>

<p>项目主页： <a href="https://github.com/harrisj/qrencoder">https://github.com/harrisj/qrencoder</a></p>

<p>安装之前需要先安装依赖库，否则会安装不上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install libqrencode-dev python-qrencode qrencode
</span></code></pre></td></tr></table></div></figure>


<p>安装时需要指定路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install qrencoder –with-opt-include<span class="o">=</span>/usr/local/include –with-opt-lib<span class="o">=</span>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


<p><code>gem qrencoder</code></p>

<h3>3. 安装 <code>rqrencoder-magick</code> 和 <code>rqrencoder</code></h3>

<p>前者是利用了<code>RMagick</code>来生成二维码，因此需要事先安装 <code>RMagick</code>，安装方法就不说了。</p>

<p>在 <code>gemfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;rqrencoder-magick&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>shell</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install rqrencoder –with-opt-include<span class="o">=</span>/usr/local/include –with-opt-lib<span class="o">=</span>/usr/local/lib
</span></code></pre></td></tr></table></div></figure>


<h3>4. 安装<code>rqrcode_png</code></h3>

<p><code>gem rqrcode_png</code></p>

<p>这个 Gem 可以为生成的二维码指定<code>宽度</code>和<code>高度</code></p>

<h3>5. <code>DEMO</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 生成二维码</span>
</span><span class='line'><span class="nv">qr</span> <span class="o">=</span> RQRCode::QRCode.new<span class="o">(</span> self.code, :size <span class="o">=</span>&gt; 1, :level <span class="o">=</span>&gt; :l <span class="o">)</span>
</span><span class='line'><span class="nv">png</span> <span class="o">=</span> qr.to_img
</span><span class='line'>png.resize<span class="o">(</span>300, 300<span class="o">)</span>.save<span class="o">(</span>path<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 不足</h3>

<p>这种方式生成的二维码图片会比现今网上提供的api所生成的二维码要「难扫」「复杂」，所以如果对二维码的扫描难度有要求的话，就&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Mosquitto]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/shi-yong-mosquitto/"/>
    <updated>2015-01-30T16:04:40+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/shi-yong-mosquitto</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>这段时间团队需要跟 Google Glass 进行交互，因此要做一个推送机制。而 MQTT 协议的推送是当今最火热的一个。</p>

<p>Mosquitto 则是实现了 MQTT 协议的服务。</p>

<h2>安装</h2>

<p>在 Ubuntu 下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">add</span><span class="o">-</span><span class="n">repository</span> <span class="ss">ppa</span><span class="p">:</span><span class="n">mosquitto</span><span class="o">-</span><span class="n">dev</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">-</span><span class="n">ppa</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果显示<code>apt-add-repository</code>没有识别，则可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">software</span><span class="o">-</span><span class="n">properties</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p>安装完成后，所有配置都会在 <code>/etc/mosquitto</code>目录下。其中最重要的则是<code>mosquitto.conf</code> 文件，以下则是配置文件内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># General configuration</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端心跳的间隔时间</span>
</span><span class='line'><span class="c1">#retry_interval 20</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 系统状态的刷新时间</span>
</span><span class='line'><span class="c1">#sys_interval 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 系统资源的回收时间，0表示尽快处理</span>
</span><span class='line'><span class="c1">#store_clean_interval 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务进程的PID</span>
</span><span class='line'><span class="c1">#pid_file /var/run/mosquitto.pid</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务进程的系统用户</span>
</span><span class='line'><span class="c1">#user mosquitto</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端心跳消息的最大并发数</span>
</span><span class='line'><span class="c1">#max_inflight_messages 10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端心跳消息缓存队列</span>
</span><span class='line'><span class="c1">#max_queued_messages 100</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 用于设置客户端长连接的过期时间，默认永不过期</span>
</span><span class='line'><span class="c1">#persistent_client_expiration</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Default listener</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务绑定的IP地址</span>
</span><span class='line'><span class="c1">#bind_address</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 服务绑定的端口号</span>
</span><span class='line'><span class="c1">#port 1883</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 允许的最大连接数，-1表示没有限制</span>
</span><span class='line'><span class="c1">#max_connections -1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cafile：CA证书文件</span>
</span><span class='line'><span class="c1"># capath：CA证书目录</span>
</span><span class='line'><span class="c1"># certfile：PEM证书文件</span>
</span><span class='line'><span class="c1"># keyfile：PEM密钥文件</span>
</span><span class='line'><span class="c1">#cafile</span>
</span><span class='line'><span class="c1">#capath</span>
</span><span class='line'><span class="c1">#certfile</span>
</span><span class='line'><span class="c1">#keyfile</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 必须提供证书以保证数据安全性</span>
</span><span class='line'><span class="c1">#require_certificate false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 若require_certificate值为true，use_identity_as_username也必须为true</span>
</span><span class='line'><span class="c1">#use_identity_as_username false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 启用PSK（Pre-shared-key）支持</span>
</span><span class='line'><span class="c1">#psk_hint</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</span>
</span><span class='line'><span class="c1"># as the output of that command.</span>
</span><span class='line'><span class="c1">#ciphers</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Persistence</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 消息自动保存的间隔时间</span>
</span><span class='line'><span class="c1">#autosave_interval 1800</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 消息自动保存功能的开关</span>
</span><span class='line'><span class="c1">#autosave_on_changes false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 持久化功能的开关</span>
</span><span class='line'><span class="n">persistence</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 持久化DB文件</span>
</span><span class='line'><span class="c1">#persistence_file mosquitto.db</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 持久化DB文件目录</span>
</span><span class='line'><span class="c1">#persistence_location /var/lib/mosquitto/</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Logging</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 4种日志模式：stdout、stderr、syslog、topic</span>
</span><span class='line'><span class="c1"># none 则表示不记日志，此配置可以提升些许性能</span>
</span><span class='line'><span class="n">log_dest</span> <span class="n">none</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#还有一种写入文件的模式</span>
</span><span class='line'><span class="n">log_dest</span> <span class="n">file</span> <span class="s1">&#39;/var/lib/mosquitto/mosquitto.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 选择日志的级别（可设置多项）</span>
</span><span class='line'><span class="c1">#log_type error</span>
</span><span class='line'><span class="c1">#log_type warning</span>
</span><span class='line'><span class="c1">#log_type notice</span>
</span><span class='line'><span class="c1">#log_type information</span>
</span><span class='line'><span class="c1">#log_type all</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是否记录客户端连接信息</span>
</span><span class='line'><span class="c1">#connection_messages true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是否记录日志时间</span>
</span><span class='line'><span class="c1">#log_timestamp true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Security</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 客户端ID的前缀限制，可用于保证安全性</span>
</span><span class='line'><span class="c1">#clientid_prefixes</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 允许匿名用户</span>
</span><span class='line'><span class="c1">#allow_anonymous true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 用户/密码文件，默认格式：username:password</span>
</span><span class='line'><span class="c1">#password_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PSK格式密码文件，默认格式：identity:key</span>
</span><span class='line'><span class="c1">#psk_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># pattern write sensor/%u/data</span>
</span><span class='line'><span class="c1"># ACL权限配置，常用语法如下：</span>
</span><span class='line'><span class="c1"># 用户限制：user &lt;username&gt;</span>
</span><span class='line'><span class="c1"># 话题限制：topic [read|write] &lt;topic&gt;</span>
</span><span class='line'><span class="c1"># 正则限制：pattern write sensor/%u/data</span>
</span><span class='line'><span class="c1">#acl_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'><span class="c1"># Bridges</span>
</span><span class='line'><span class="c1"># =================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 允许服务之间使用“桥接”模式（可用于分布式部署）</span>
</span><span class='line'><span class="c1">#connection &lt;name&gt;</span>
</span><span class='line'><span class="c1">#address &lt;host&gt;[:&lt;port&gt;]</span>
</span><span class='line'><span class="c1">#topic &lt;topic&gt; [[[out | in | both] qos-level] local-prefix remote-prefix]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设置桥接的客户端ID</span>
</span><span class='line'><span class="c1">#clientid</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接断开时，是否清除远程服务器中的消息</span>
</span><span class='line'><span class="c1">#cleansession false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是否发布桥接的状态信息</span>
</span><span class='line'><span class="c1">#notifications true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设置桥接模式下，消息将会发布到的话题地址</span>
</span><span class='line'><span class="c1"># $SYS/broker/connection/&lt;clientid&gt;/state</span>
</span><span class='line'><span class="c1">#notification_topic</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设置桥接的keepalive数值</span>
</span><span class='line'><span class="c1">#keepalive_interval 60</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接模式，目前有三种：automatic、lazy、once</span>
</span><span class='line'><span class="c1">#start_type automatic</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接模式automatic的超时时间</span>
</span><span class='line'><span class="c1">#restart_timeout 30</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接模式lazy的超时时间</span>
</span><span class='line'><span class="c1">#idle_timeout 60</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接客户端的用户名</span>
</span><span class='line'><span class="c1">#username</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 桥接客户端的密码</span>
</span><span class='line'><span class="c1">#password</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># bridge_cafile：桥接客户端的CA证书文件</span>
</span><span class='line'><span class="c1"># bridge_capath：桥接客户端的CA证书目录</span>
</span><span class='line'><span class="c1"># bridge_certfile：桥接客户端的PEM证书文件</span>
</span><span class='line'><span class="c1"># bridge_keyfile：桥接客户端的PEM密钥文件</span>
</span><span class='line'><span class="c1">#bridge_cafile</span>
</span><span class='line'><span class="c1">#bridge_capath</span>
</span><span class='line'><span class="c1">#bridge_certfile</span>
</span><span class='line'><span class="c1">#bridge_keyfile</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 自己的配置可以放到以下目录中</span>
</span><span class='line'><span class="n">include_dir</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>权限</h2>

<p>为了避免任何人都可以往服务器去 pull&amp;push，我们需要设置权限。</p>

<p>使用自带工具进行设置账号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#add a count and then will ask you to enter a passwd</span>
</span><span class='line'><span class="n">mosquitto_passwd</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">passwd</span> <span class="n">glassx</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># delete</span>
</span><span class='line'><span class="n">mosquitto_passwd</span> <span class="o">-</span><span class="n">D</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">passwd</span> <span class="n">glassx</span>
</span></code></pre></td></tr></table></div></figure>


<h2>启动</h2>

<p>启动服务很简单，直接运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mosquitto</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/etc/mos</span><span class="n">quitto</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">.</span><span class="n">conf</span> <span class="o">-</span><span class="n">d</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#-c 表示加载指定配置文件</span>
</span><span class='line'><span class="c1">#-d 表示以后台服务运行</span>
</span><span class='line'><span class="c1">#-p 表示监听某个端口（默认为1883)</span>
</span><span class='line'><span class="c1">#-v 表示亢长的日志记录模式，相当于设置 log_type all</span>
</span></code></pre></td></tr></table></div></figure>


<p>mosquitto 是个异步 IO 框架，经过测试可以处理 20000 个以上的客户端连接。</p>

<h2>推送</h2>

<p>上面所创建的只是服务器， MQTT 有三个角色， 发布角色，服务器角色，消费角色。 此时我们便使用 Ruby 来实现发布角色。</p>

<p>我们会使用到一个叫做 <code>mqtt</code> 的 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mqtt&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Publish example</span>
</span><span class='line'><span class="no">MQTT</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mqtt://glassx:glassxpw@127.0.0.1&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">c</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s1">&#39;topic&#39;</span><span class="p">,</span> <span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># # Subscribe example</span>
</span><span class='line'><span class="c1"># MQTT::Client.connect(&#39;test.mosquitto.org&#39;) do |c|</span>
</span><span class='line'><span class="c1">#   # If you pass a block to the get method, then it will loop</span>
</span><span class='line'><span class="c1">#   c.get(&#39;test&#39;) do |topic,message|</span>
</span><span class='line'><span class="c1">#     puts &quot;#{topic}: #{message}&quot;</span>
</span><span class='line'><span class="c1">#   end</span>
</span><span class='line'><span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>接收</h2>

<p>接收则是各个客户端的实现了，这里就不写了。</p>

<h2>引用</h2>

<p>官网：<a href="http://mosquitto.org/">http://mosquitto.org/</a></p>

<p>简要教程：<a href="http://blog.csdn.net/shagoo/article/details/7910598">http://blog.csdn.net/shagoo/article/details/7910598</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部署 RabbitMQ 经验]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/bu-shu-rabbitmq-jing-yan/"/>
    <updated>2015-01-30T16:04:25+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2015/01/30/bu-shu-rabbitmq-jing-yan</id>
    <content type="html"><![CDATA[<h2>引用</h2>

<p>在项目中，将一些无需即时返回且耗时的操作提取出来，放入消息队列，进行异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。</p>

<p>RabbitMQ 是一个在 AMQP 基础上完整的，可复用的企业消息系统。他遵循Mozilla Public License开源协议。</p>

<h2>安装</h2>

<p>Ubuntu 下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">rabbitmq</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">debian</span><span class="o">/</span> <span class="n">testing</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="n">wget</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">rabbitmq</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rabbitmq</span><span class="o">-</span><span class="n">signing</span><span class="o">-</span><span class="n">key</span><span class="o">-</span><span class="kp">public</span><span class="o">.</span><span class="n">asc</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">key</span> <span class="n">add</span> <span class="n">rabbitmq</span><span class="o">-</span><span class="n">signing</span><span class="o">-</span><span class="n">key</span><span class="o">-</span><span class="kp">public</span><span class="o">.</span><span class="n">asc</span>
</span><span class='line'>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">rabbitmq</span><span class="o">-</span><span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#/etc/default/rabbitmq-server</span>
</span><span class='line'><span class="n">ulimit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">1024</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 开启服务</span>
</span><span class='line'><span class="n">invoke</span><span class="o">-</span><span class="n">rc</span><span class="o">.</span><span class="n">d</span> <span class="n">rabbitmq</span><span class="o">-</span><span class="n">server</span> <span class="n">stop</span><span class="o">/</span><span class="n">start</span><span class="o">/</span><span class="n">etc</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 开启 WEB 管理</span>
</span><span class='line'><span class="n">rabbitmq</span><span class="o">-</span><span class="n">plugins</span> <span class="n">enable</span> <span class="n">rabbitmq_management</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意事项</h2>

<ol>
<li>要自己添加 /etc/rabbitmq/rabbitmq.config 才行</li>
<li>默认只有本机才能用 guest/guest 账号登陆。否则需要在rabbitmq.config 添加<code>[{rabbit, [{loopback_users, []}]}].</code></li>
<li>rabbitq.config 的格式是：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 就算删除了里面的参数配置，也不能删除这个格式。</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'><span class="o">].</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可能出现的错误</h2>

<ol>
<li>总是提示</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="ss">ls</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">access</span> <span class="sr">/etc/</span><span class="n">rabbitmq</span><span class="o">/</span><span class="n">rabbitmq</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="p">:</span> <span class="no">No</span> <span class="n">such</span> <span class="n">file</span> <span class="ow">or</span> <span class="n">directory</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因： 妈蛋是缺了目录啊！手动创建就可以了，之前一直以为是缺了文件，原来是目录，注意了 <code>conf.d</code> <code>.d</code> 这个结尾的一般都是目录</p>

<h2>懒</h2>

<p>具体就不写了，不过有篇文章写得很好，看看就明白了。</p>

<p><a href="https://ruby-china.org/topics/22332">https://ruby-china.org/topics/22332</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Ruby 中用 SSH 来跟服务器进行通信]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/zai-ruby-zhong-yong-ssh-lai-gen-fu-wu-qi-jin-xing-tong-xin/"/>
    <updated>2014-12-26T15:01:21+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/zai-ruby-zhong-yong-ssh-lai-gen-fu-wu-qi-jin-xing-tong-xin</id>
    <content type="html"><![CDATA[<h1>在Ruby中用SSH跟服务器进行交流</h1>

<h2>前言</h2>

<p>Net::SSH和Net::SCP是两个Ruby操作SSH的gem包。</p>

<p>Net::SSH相当于cmd，专门用于执行命令；</p>

<p>Net::SCP专门用于传输文件。</p>

<p>它们俩结合，可以做任何SSH client能做的事情。</p>

<h2>所需 Gem</h2>

<ol>
<li>gem &lsquo;net-ssh&rsquo;</li>
<li>gem &lsquo;net-scp&rsquo;</li>
</ol>


<h2>Begin</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Net</span><span class="o">::</span><span class="no">SSH</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_ip&quot;</span><span class="o">]</span><span class="p">,</span> <span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_user&quot;</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ssh</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 创建文件夹</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">exec!</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;if [ ! -d </span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> ]; then</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">\</span>
</span><span class='line'>          <span class="s2">&quot;mkdir </span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">;&quot;</span> <span class="p">\</span>
</span><span class='line'>          <span class="s2">&quot;fi&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 开始上传</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">scp</span><span class="o">.</span><span class="n">upload!</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">backup_sql_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">backup_sql_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 客户端开始还原</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">exec!</span><span class="p">(</span><span class="s2">&quot;mysql -u&quot;</span> <span class="o">+</span> <span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_mysql_user&quot;</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s2">&quot; -p&quot;</span> <span class="o">+</span> <span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">_server_mysql_pwd&quot;</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s2">&quot; red_mansions &lt; </span><span class="si">#{</span><span class="no">MYSQL_SYNC_CONFIG</span><span class="o">[</span><span class="s1">&#39;endpoint_backup_path&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">backup_sql_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>引用</h2>

<p><a href="http://rubyer.me/blog/1133/">http://rubyer.me/blog/1133/</a></p>

<p><a href="http://www.infoq.com/cn/articles/ruby-file-upload-ssh-intro">http://www.infoq.com/cn/articles/ruby-file-upload-ssh-intro</a></p>

<p><a href="https://gist.github.com/lajunta/7305741">https://gist.github.com/lajunta/7305741</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 rsync]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-rsync/"/>
    <updated>2014-12-26T15:00:40+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-rsync</id>
    <content type="html"><![CDATA[<h1>使用rsync</h1>

<h2>1. 服务器端</h2>

<p><code>/etc/rsyncd.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">uid</span> <span class="o">=</span> deploy
</span><span class='line'><span class="nv">gid</span> <span class="o">=</span> deploy
</span><span class='line'>use <span class="nv">chroot</span> <span class="o">=</span> no
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 4
</span><span class='line'>pid <span class="nv">file</span> <span class="o">=</span> /var/run/rsyncd.pid
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/run/rsyncd.lock
</span><span class='line'>log <span class="nv">file</span> <span class="o">=</span> /var/log/rsyncd.log
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="nb">test</span><span class="o">]</span>
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /var/test
</span><span class='line'>ignore errors
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">list</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>auth <span class="nv">users</span> <span class="o">=</span> fuck
</span><span class='line'>secrets <span class="nv">file</span> <span class="o">=</span> /etc/backserver.pas
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>/etc/backserver.pas</code> （ 需要设置权限400）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hello:world   <span class="o">(</span>该账号密码最好不跟服务器一样）
</span></code></pre></td></tr></table></div></figure>


<p><code>usr/bin/rsync --daemon</code> 启动服务</p>

<p><code>echo "/usr/local/rsync/bin/rsync --daemon" &gt;&gt; /etc/rc.local</code> 开机自启动</p>

<h2>2. 客户端</h2>

<h3>2.1 同步方式</h3>

<h4>2.1.1. 第一种方式是 服务器–客户端方式。</h4>

<p>这种方式，服务器启动 daemon 守护线程，监听端口 873，并配置需要同步的模块，然后客户端连接 873 端口，认证并同步。</p>

<p>其中，同步所使用的账号密码是 rsync  单独配置的，与系统无关。</p>

<p>服务端运行rsync进程在daemon模式下， 客户端是普通的rsync进程。</p>

<h4>2.1.2. 使用 ssh 方式</h4>

<p>本机 rsync 进程 直接通过 ssh 通道连接到远程， 并在远程ssh通道执行命令</p>

<p>两者是走不同协议，不同端口的，因此第一种方式服务器是不需要启动 rsync 服务的，当然还是需要安装这个程序</p>

<h3>2.2 使用账号密码登录（此时服务器需要启动 rsync &ndash;daemon 服务）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USER@HOST::MODE  <span class="c"># mode 是服务器设置好的模块名，这里不能用路径,注意两个冒号</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/etc/rsync_client.pas</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>glassx <span class="c"># 只需要配置连接时使用的密码即可，必须与A服务器上定义的密码相同.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>chmod 600 /etc/rsync_client.pas</code></p>

<p><code>usr/bin/rsync -vzrtopg --progress --delete --password-file=/etc/rsync_client.secrets  hello@192.168.10.240::test   /var/rsync/test</code></p>

<p>跟在IP后的<code>test</code> 是指服务端配置的模块</p>

<h3>2.3 使用SSH （ 此时服务器不需要启动 rsync &ndash;daemon 服务）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USER@HOST:Folder <span class="c"># 注意只有一个冒号,rsync由此判断使用ssh通道。而不是直接连接远端的873端口。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 使用了SSH后，就不能再用 :test 了，而是要跟纯路径。</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>usr/bin/rsync -vzrtopg --progress --delete -e ssh deploy@192.168.10.240:/home/deploy/test   /home/deploy/test</code></p>

<p>注意权限的问题，本地文件夹要有足够权限去同步文件（也不能在该命令前加 sudo, 这样用ssh时会错乱，如果用密码连接则可以）</p>

<h3>2.4 参考</h3>

<p><a href="http://blog.sina.com.cn/s/blog_544f183101013zlo.html">http://blog.sina.com.cn/s/blog_544f183101013zlo.html</a></p>

<p><a href="http://tech.huweishen.com/gongju/1529.html">http://tech.huweishen.com/gongju/1529.html</a></p>

<p><a href="http://www.cszhi.com/20120312/rsync-simple.html">http://www.cszhi.com/20120312/rsync-simple.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mina 简介使用]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/mina-jian-jie-shi-yong/"/>
    <updated>2014-12-26T15:00:12+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/mina-jian-jie-shi-yong</id>
    <content type="html"><![CDATA[<h1>说下 Mina</h1>

<h2>一、基本使用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;ruby&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mina</span> <span class="n">init</span>    <span class="o">=&gt;</span>  <span class="err">生成</span> <span class="n">config</span><span class="o">/</span><span class="n">deploy</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/deploy.rb</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span>  <span class="c1"># 部署用户</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="s1">&#39;your.server.com&#39;</span>   <span class="c1"># 域名</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/var/www/flipstack.com&#39;</span> <span class="c1"># 部署路径</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span> <span class="s1">&#39;git@github.......xxx&#39;</span> <span class="c1">#git 仓库</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span> <span class="c1">#分支</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:shared_paths</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;config/database.yml&#39;</span><span class="p">,</span> <span class="s1">&#39;public/system&#39;</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span> <span class="c1">#共享文件夹</span>
</span><span class='line'>
</span><span class='line'><span class="err">然后：</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span>
</span><span class='line'><span class="ss">task</span><span class="p">:</span> <span class="n">environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">invoke</span> <span class="ss">:&#39;rvm:use[ruby-2.0.0@rails4.0.4]&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">.</span>
</span><span class='line'><span class="c1"># 主要为 deploy 做准备，创建各个文件夹</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:setup</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/log&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/log&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/config&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/config&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/qrcodes&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/qrcodesZip&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/uploads&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/public/system&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/coupons&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/coupons&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[mkdir -p &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/couponsZip&quot;]</span>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[chmod g+rx,u+rwx &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/couponsZip&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">queue!</span> <span class="sx">%[touch &quot;</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sx">/shared/config/database.yml&quot;]</span>
</span><span class='line'>  <span class="n">queue</span>  <span class="sx">%[echo &quot;-----&gt; Be sure to edit &#39;shared/config/database.yml&#39;.&quot;]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 编写部署任务</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:deploy</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">deploy</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Put things that will set up an empty directory into a fully set-up</span>
</span><span class='line'>    <span class="c1"># instance of your project.</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;sidekiq:quiet&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;git:clone&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;deploy:link_shared_paths&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;bundle:install&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;rails:db_migrate&#39;</span>
</span><span class='line'>    <span class="n">invoke</span> <span class="ss">:&#39;rails:assets_precompile&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">to</span> <span class="ss">:launch</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">queue</span> <span class="s2">&quot;if [ -d </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp ]</span>
</span><span class='line'><span class="s2">      then</span>
</span><span class='line'><span class="s2">        touch </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp/restart.txt</span>
</span><span class='line'><span class="s2">      else</span>
</span><span class='line'><span class="s2">        mkdir </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp</span>
</span><span class='line'><span class="s2">        touch </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/current/tmp/restart.txt </span>
</span><span class='line'><span class="s2">      fi&quot;</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:&#39;sidekiq:restart&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>终端执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mina</span> <span class="n">setup</span>
</span><span class='line'>
</span><span class='line'><span class="n">mina</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<h2>二、应该要注意的 <code>point</code></h2>

<p>1、我们可以自己写 task 任务</p>

<p>2、queue 命令用在执行 bash 命令，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:logs</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">queue</span> <span class="s1">&#39;echo &quot;Contents of the log file are as follows:&quot;&#39;</span>
</span><span class='line'>     <span class="n">queue</span> <span class="s2">&quot;tail -f /var/log/apache.log&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、invoke 命令用在引用已经写好的 task 任务，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:down</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">invoke</span> <span class="ss">:maintenance</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:maintenance</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">queue</span> <span class="s1">&#39;touch maintenance.txt&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>4、Mina 已经有一些已经写好的 task 任务，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">invoke</span> <span class="ss">:&#39;git:clone&#39;</span>
</span><span class='line'><span class="n">invoke</span> <span class="ss">:&#39;bundle:install&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#我一开始以为这是执行 bash 命令，让我理不清 invoke 跟 queue 的关系</span>
</span></code></pre></td></tr></table></div></figure>


<p>5、<code>run!</code> 这个命令是指 SSH 进主机，然后执行所有已经 queue 的命令。这个命令会在 Rake 退出前，自动调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 当 rake 退出时会调用。</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mina_cleanup</span>
</span><span class='line'>    <span class="n">run!</span> <span class="k">if</span> <span class="n">commands</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>6、<code>command</code> 包含所有已经 queue 的任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queue</span> <span class="s2">&quot;sudo restart&quot;</span>
</span><span class='line'><span class="n">queue</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">to</span> <span class="ss">:clean</span> <span class="k">do</span>     <span class="c1"># 这里 clean 的queue 会被放到 :clean 命名空间下</span>
</span><span class='line'>  <span class="n">queue</span> <span class="s2">&quot;rm&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;sudo restart&quot;</span><span class="p">,</span> <span class="s2">&quot;true&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">commands</span><span class="p">(</span><span class="ss">:clean</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;rm&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">注意了，</span><span class="n">commands</span> <span class="err">是一个方法，而不是变量</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 源代码</span>
</span><span class='line'><span class="k">def</span> <span class="nf">commands</span><span class="p">(</span><span class="n">aspect</span><span class="o">=</span><span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="vi">@commands</span> <span class="o">||=</span> <span class="k">begin</span>
</span><span class='line'>    <span class="vi">@to</span> <span class="o">=</span> <span class="ss">:default</span>
</span><span class='line'>    <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">)</span><span class="o">[</span><span class="n">aspect</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">因此如果要清空</span> <span class="n">commands</span><span class="err">，应该是执行</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@commands</span><span class="o">[</span><span class="ss">:default</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>7、<code>isolate</code> 命令会开辟一个新的 block，包含 queue 的任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queue</span> <span class="s2">&quot;sudo restart&quot;</span>
</span><span class='line'><span class="n">queue</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;sudo restart&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="s2">&quot;reload&quot;</span>
</span><span class='line'>  <span class="n">commands</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;reload&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="s1">&#39;sudo restart&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>8、已被 invoke 的 task, 再次被 invoke 时，是不会再次被执行的，除非：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 该参数表明再次invoke时会继续执行一次。</span>
</span><span class='line'><span class="n">invoke</span> <span class="ss">:setup</span><span class="p">,</span> <span class="p">{</span><span class="ss">reenable</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 注意，任务是否已经被 invoke 过，并不是通过 commands 内的值来判断的，因此就算 commands 清空了，task 还是会被标记成已 invoke 过的。</span>
</span></code></pre></td></tr></table></div></figure>


<p>9、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:hello</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;hellooooooooo&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:world</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">deploy_to</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span><span class="o">-&gt;</span> <span class="n">mina</span> <span class="n">hello</span> <span class="n">world</span>
</span><span class='line'>
</span><span class='line'><span class="o">===&gt;</span>  <span class="s1">&#39;hellooooooooo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">说明</span> <span class="n">mina</span> <span class="n">task1</span> <span class="n">task2</span> <span class="err">是可以串行执行的，并且任务</span><span class="mi">1</span><span class="err">的环境会跟任务</span><span class="mi">2</span><span class="err">相连。（同个执行环境）</span>
</span><span class='line'><span class="err">通常用在设置不同的</span> <span class="n">stage</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、多机部署</h2>

<h3>一、将同一项目部署到多个服务器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;multi deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:multi_deploy</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">domains</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="n">run!</span>    <span class="o">=&gt;</span> <span class="c1"># 注意这里一定要加上 run! ，才会立即运行命令</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;finish to deploy&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>自己写的一个 task, 这时候遇到一个难题，发现 invoke :deploy ，当第一次循环的时候正常，第二次循环的时候，会部署两次。</p>

<p>效果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>  <span class="p">(</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我的 domains  是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13 192.168.0.14]</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么效果会是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">12</span>
</span><span class='line'>
</span><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">13</span>
</span><span class='line'>
</span><span class='line'> <span class="k">begin</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">14</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'> <span class="n">finish</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">14</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deploying</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>  <span class="p">(</span> <span class="n">server</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">14</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>发觉最终总是会多部署最后一个server</p>

<p>于是我用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="s2">&quot;命令集合：</span><span class="si">#{</span><span class="n">commands</span><span class="p">(</span><span class="ss">:default</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>来查看，也没有什么异常。</p>

<p>然后我又做了下实验：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy_primary</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;begin to deploy primary </span><span class="si">#{</span><span class="n">primary_domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">primary_domain</span>
</span><span class='line'>  <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>  <span class="n">invoke</span> <span class="ss">:mysql_sync</span>
</span><span class='line'>  <span class="n">run!</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;finish to deploy primary </span><span class="si">#{</span><span class="n">primary_domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">commands</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原因</h3>

<p>在 rake 退出前会自动调用 <code>run!</code> 这个方法，因此到最后是会多执行一次 commands 内的命令的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mina_cleanup!</span>
</span><span class='line'>  <span class="n">run!</span> <span class="k">if</span> <span class="n">commands</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>解决方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;multi deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:multi_deploy</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">isolate</span> <span class="k">do</span>   <span class="c1"># =&gt;  开辟一个新的 block (这样isolate外面的commands为[]）</span>
</span><span class='line'>    <span class="n">domains</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'>      <span class="c1"># 这里其实只 invoke 了一次，之所以执行了三次，是因为有三次 run!</span>
</span><span class='line'>      <span class="c1"># 而 domain 参数并不是写进 commands 的，而是在 run! 的时候进行处理</span>
</span><span class='line'>      <span class="c1"># 因此这里可以成功的分别部署到三台机器</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="n">run!</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;finish to deploy&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># rake 任务退出时执行 run!, 但此时 commands 为 []</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>二、将同一项目部署到同一机器的两个目录</h3>

<p>因为该项目需要做全站国际化，因此我将它分别部署为两套 server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy_all</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">sequence</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy </span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">sequence</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/xshare_en&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/xshare_zh&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="n">run!</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;end to deploy </span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这么做的后果是：部署了两次到 <code>/home/deploy/xshare_en</code>去了。</p>

<h3>原因</h3>

<p>1、 <code>deploy_to</code> 的值是直接写进 <code>commands</code> 内的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[.</span><span class="n">.</span><span class="o">.</span><span class="n">Setting</span> <span class="n">up</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span><span class="n">xshare_zh</span><span class="p">\</span><span class="s2">&quot; &amp;&amp; (</span><span class="se">\n</span><span class="s2">  mkdir -p </span><span class="se">\&quot;</span><span class="s2">/home/deploy/xshare_zh</span><span class="se">\&quot;</span><span class="s2"> &amp;&amp;</span><span class="se">\n</span><span class="s2">  chown -R `whoami` </span><span class="se">\&quot;</span><span class="s2">/home/deploy/xshare_zh</span><span class="se">\&quot;</span><span class="s2"> &amp;&amp;</span><span class="se">\n</span><span class="s2">  chmod g+rx,u+rwx </span><span class="se">\&quot;</span><span class="s2">/home/deploy/xshare_zh</span><span class="se">\&quot;</span><span class="s2"> &amp;&amp;\....]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、这里 <code>:deploy</code> 只 <code>invoke</code> 了一次，因此 commands 内的值是没有变化的，所以相当于执行了两次一样的第一次<code>commands</code></p>

<h3>尝试1</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy_all</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">sequence</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy </span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">sequence</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/xshare_en&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/xshare_zh&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1"># 重复 invoke</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="ss">reenable</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">run!</span>
</span><span class='line'>      <span class="c1"># 清空 commands</span>
</span><span class='line'>      <span class="vi">@commands</span><span class="o">[</span><span class="ss">:default</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;end to deploy </span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果还是没达到预料中的结果。</p>

<p>因为<code>task deploy</code> 中还 <code>invoke</code> 了其他的 <code>task</code>,比如<code>git:clone</code>，因此其他的<code>task</code>只算invoke了一次，就算我手动将<code>deploy</code>所引用的<code>task</code>全部都加<code>reenable</code>参数，还是不行，因为难保其他task没invoke另外的task</p>

<h3>尝试2</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy_all</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">sequence</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 尝试将两者区分开block</span>
</span><span class='line'>    <span class="n">isolate</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy </span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">sequence</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/xshare_en&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/xshare_zh&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1"># 重复 invoke</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="n">run!</span>
</span><span class='line'>      <span class="c1"># 清空 commands</span>
</span><span class='line'>      <span class="vi">@commands</span><span class="o">[</span><span class="ss">:default</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;end to deploy </span><span class="si">#{</span><span class="n">sequence</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但还是失败，:deploy 是否被 invoke,跟 isolate 无关，因为 isolate 控制的只是 commands 而已。</p>

<h3>解决</h3>

<p><code>没找到好办法，暂时分开task执行，不过这种使用场景也比较少。</code></p>

<h2>单独执行命令</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:mysql_sync</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="sx">%[cd </span><span class="si">#{</span><span class="n">deploy_to!</span><span class="si">}</span><span class="sx">/current &amp;&amp; whenever -i &#39;mysql_sync&#39;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当初单独执行这个 task  的时候，一直提示找不到 whenever 这个命令，令人纳闷，最终发现需要加上环境。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:mysql_sync</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">queue</span> <span class="sx">%[cd </span><span class="si">#{</span><span class="n">deploy_to!</span><span class="si">}</span><span class="sx">/current &amp;&amp; whenever -i &#39;mysql_sync&#39;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>重复的 queue</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:domains</span><span class="p">,</span> <span class="sx">%w[192.168.0.12 192.168.0.13]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;multi deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:multi_deploy</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">isolate</span> <span class="k">do</span>   <span class="c1"># =&gt;  开辟一个新的 block ( 不过为何能解决我还没弄懂）</span>
</span><span class='line'>    <span class="n">domains</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">domain</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;begin to deploy</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="n">domain</span>
</span><span class='line'>      <span class="n">invoke</span> <span class="ss">:deploy</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>         <span class="n">queue</span> <span class="s1">&#39;do something one&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>         <span class="n">queue</span> <span class="s1">&#39;do something two&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">run!</span>    <span class="o">=&gt;</span> <span class="c1"># 注意这里一定要加上 run! ，才会立即运行命令</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;finish to deploy&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子的话，当第二次循环时，会执行 <code>one</code> 和 <code>two</code> 两个 queue, 因为第一次循环时， <code>one</code> 已经 queued 了，进入了 commands，因此第二次循环时，会执行这个命令 （  执行所有 commands)</p>

<p>这是个难点。我还没找到解决方法。只能说分开来执行,或者写脚本根据不同服务器执行不同命令</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Capistrano 来部署应用]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-capistrano-lai-bu-shu-ying-yong/"/>
    <updated>2014-12-26T14:58:57+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/shi-yong-capistrano-lai-bu-shu-ying-yong</id>
    <content type="html"><![CDATA[<h1>使用 Capistrano 部署应用</h1>

<h2>前言</h2>

<p>由于 Mina 一直以简单好用为著称，因此一直都是用 Mina 来部署应用。但是  Mina 也有局限性，之前的多机部署就遇到了难题，于是学习下如何用 Capistrano 来部署 Rails 应用</p>

<h2>使用环境</h2>

<ol>
<li>Capistrano 3.x</li>
<li>Rails4.1</li>
<li>Ruby2.0</li>
<li>RVM</li>
</ol>


<h2>安装</h2>

<p>在<code>gemfile</code>中添加支持的 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-bundler&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rvm&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>初始化</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cap</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中有几个比较重要的文件：</p>

<ol>
<li>Capfile用来配置Capistrano</li>
<li>deploy.rb是一些共用task的定义</li>
<li>production.rb / staging.rb用来定义具体的stage的tasks。</li>
</ol>


<p>通过 <code>cap -vT</code> 可以查看当前可用的 task</p>

<h2>配置</h2>

<p><code>capfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Load DSL and Setup Up Stages</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/setup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Includes default deployment tasks</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/deploy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 配置支持的插件</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Loads custom tasks from `lib/capistrano/tasks&#39; if you have any defined.</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;lib/capistrano/tasks/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>deploy.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config valid only for Capistrano 3.1</span>
</span><span class='line'><span class="n">lock</span> <span class="s1">&#39;3.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;student_lottery&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@bitbucket.org:linjunzhugg/student_lottery.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default branch is :master</span>
</span><span class='line'><span class="c1"># ask :branch, proc { `git rev-parse --abbrev-ref HEAD`.chomp }.call</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default deploy_to directory is /var/www/my_app</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/student_lottery&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :scm is :git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :format is :pretty</span>
</span><span class='line'><span class="c1"># set :format, :pretty</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :log_level is :debug</span>
</span><span class='line'><span class="c1"># set :log_level, :debug</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :pty is false</span>
</span><span class='line'><span class="c1"># set :pty, true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :linked_files is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for linked_dirs is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:rvm_ruby_version</span><span class="p">,</span> <span class="s1">&#39;ruby-2.0.0-p481@rails4.0.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for default_env is {}</span>
</span><span class='line'><span class="c1"># set :default_env, { path: &quot;/opt/ruby/bin:$PATH&quot; }</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for keep_releases is 5</span>
</span><span class='line'><span class="c1"># set :keep_releases, 5</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Restart application&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Your restart mechanism here, for example:</span>
</span><span class='line'>      <span class="c1"># execute :touch, release_path.join(&#39;tmp/restart.txt&#39;)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 就是这里插入的任务</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:clear_cache</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">10</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Here we can do anything such as:</span>
</span><span class='line'>      <span class="c1"># within release_path do</span>
</span><span class='line'>      <span class="c1">#   execute :rake, &#39;cache:clear&#39;</span>
</span><span class='line'>      <span class="c1"># end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>config/production.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span><span class='line'><span class="c1"># roles 的存在是方便我们针对某个 role 来执行相应的 task</span>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;192.168.0.13&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;deploy&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{app, web}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure>


<h2>开始部署</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span>  <span class="c1"># 开始部署</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时有人疑惑了，咦？这条命令的 task 在哪呢？我要如何定义自己的task 呢？</p>

<p>根据官方文档：一旦运行 <code>cap production deploy</code> ，就默认有以下这些任务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">starting</span>    <span class="o">-</span> <span class="n">start</span> <span class="n">a</span> <span class="n">deployment</span><span class="p">,</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">everything</span> <span class="n">is</span> <span class="n">ready</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">started</span>     <span class="o">-</span> <span class="n">started</span> <span class="n">hook</span> <span class="p">(</span><span class="k">for</span> <span class="n">custom</span> <span class="n">tasks</span><span class="p">)</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">updating</span>    <span class="o">-</span> <span class="n">update</span> <span class="n">server</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">with</span> <span class="n">a</span> <span class="kp">new</span> <span class="n">release</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">updated</span>     <span class="o">-</span> <span class="n">updated</span> <span class="n">hook</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">publishing</span>  <span class="o">-</span> <span class="n">publish</span> <span class="n">the</span> <span class="kp">new</span> <span class="n">release</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">published</span>   <span class="o">-</span> <span class="n">published</span> <span class="n">hook</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">finishing</span>   <span class="o">-</span> <span class="n">finish</span> <span class="n">the</span> <span class="n">deployment</span><span class="p">,</span> <span class="n">clean</span> <span class="n">up</span> <span class="n">everything</span>
</span><span class='line'><span class="ss">deploy</span><span class="p">:</span><span class="n">finished</span>    <span class="o">-</span> <span class="n">finished</span> <span class="n">hook</span>
</span></code></pre></td></tr></table></div></figure>


<p>而我们之前在 <code>capfile</code> 中添加了以下的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 配置支持的插件</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些会自动在 starting  updating 等任务中插入 before after 任务，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deploy</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">starting</span>
</span><span class='line'>    <span class="o">[</span><span class="n">before</span><span class="o">]</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">ensure_stage</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">set_shared_assets</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="n">check</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">started</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">updating</span>
</span><span class='line'>    <span class="ss">git</span><span class="p">:</span><span class="n">create_release</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="ss">symlink</span><span class="p">:</span><span class="n">shared</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">updated</span>
</span><span class='line'>    <span class="o">[</span><span class="n">before</span><span class="o">]</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">bundle</span>
</span><span class='line'>    <span class="o">[</span><span class="n">after</span><span class="o">]</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">migrate</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">compile_assets</span>
</span><span class='line'>      <span class="ss">deploy</span><span class="p">:</span><span class="n">normalize_assets</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">publishing</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="ss">symlink</span><span class="p">:</span><span class="n">release</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">published</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">finishing</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="n">cleanup</span>
</span><span class='line'>  <span class="ss">deploy</span><span class="p">:</span><span class="n">finished</span>
</span><span class='line'>    <span class="ss">deploy</span><span class="p">:</span><span class="n">log_revision</span>
</span></code></pre></td></tr></table></div></figure>


<p>从中我们可以看到里面有 bundle   migrate 等任务。</p>

<h2>其他插件</h2>

<p>比如 sidekiq 的自动重启，可以加上 <code>capistrano-sidekiq</code>  gem</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 使用 LVM 来进行硬盘扩容]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/linux-shi-yong-lvm-lai-jin-xing-ying-pan-kuo-rong/"/>
    <updated>2014-12-26T14:56:45+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/linux-shi-yong-lvm-lai-jin-xing-ying-pan-kuo-rong</id>
    <content type="html"><![CDATA[<h1>Linux 使用 LVM 进行硬盘扩容</h1>

<h2>前言</h2>

<p>这阵子某个项目的服务器硬盘爆了，导致服务出现了异常，汗，现在用着 Google 和 阿里云 的云服务器，但发现两者都没有直接扩容的功能。因此需要用到 LVM 来对硬盘进行动态扩容，不过并不能在云服务器的默认硬盘上，需要另外购置一块硬盘</p>

<h2>什么是 LVM？</h2>

<p>LVM 的全名是 Logical Volumn Manager，逻辑卷轴管理员，其中有几个概念： PV VG LV PE</p>

<p>PV 指将硬盘转成 <code>Linux LVM</code> 格式</p>

<p>PE 是 LVM 的最小存储区块。</p>

<p><img src="http://linux.vbird.org/linux_basic/0420quota/pe_vg.gif" alt="" /></p>

<h2>对硬盘进行分区</h2>

<p>先切换到 root 用户</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">su</span> <span class="o">-</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看系统已经识别的硬盘</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="o">-</span><span class="n">l</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 显示主要信息，会发现有两块硬盘，sdb 则是我们刚刚购置的硬盘</span>
</span><span class='line'><span class="no">Disk</span> <span class="sr">/dev/s</span><span class="ss">da</span><span class="p">:</span> <span class="mi">10</span><span class="o">.</span><span class="mi">7</span> <span class="no">GB</span><span class="p">,</span> <span class="mi">10737418240</span> <span class="n">bytes</span>
</span><span class='line'><span class="no">Disk</span> <span class="sr">/dev/s</span><span class="ss">db</span><span class="p">:</span> <span class="mi">75</span><span class="o">.</span><span class="mi">2</span> <span class="no">GB</span><span class="p">,</span> <span class="mi">75161927680</span> <span class="n">bytes</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="sr">/dev/s</span><span class="n">db</span>      <span class="c1"># 对硬盘进行操作</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>  <span class="nb">p</span><span class="p">(</span><span class="err">显示分区情况</span><span class="p">)</span>
</span><span class='line'>   <span class="n">n</span><span class="p">(</span><span class="err">新建分区</span><span class="p">)</span>
</span><span class='line'>   <span class="n">e</span><span class="p">(</span><span class="err">创建扩展分区</span><span class="p">)</span>
</span><span class='line'>   <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="p">(</span><span class="err">创建逻辑分区</span><span class="p">)</span>
</span><span class='line'>   <span class="n">t</span><span class="p">(</span><span class="err">设置磁盘</span><span class="no">Hex</span> <span class="n">code</span><span class="p">)</span><span class="err">——</span><span class="o">&gt;</span><span class="c1">#8e(LinuxLVM)——&gt;#w(保存操作)</span>
</span><span class='line'> <span class="sb">```</span>
</span><span class='line'>
</span><span class='line'><span class="sb"> ```</span><span class="n">ruby</span>
</span><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="sr">/dev/s</span><span class="n">db</span>
</span><span class='line'><span class="err">$</span> <span class="nb">p</span>
</span><span class='line'>
</span><span class='line'><span class="err">会发现：</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Device</span> <span class="no">Boot</span>      <span class="no">Start</span>     <span class="no">End</span>      <span class="no">Blocks</span>      <span class="no">Id</span>     <span class="no">System</span>
</span><span class='line'>    <span class="sr">/dev/s</span><span class="n">db1</span>          <span class="mi">1</span>       <span class="mi">2080</span>     <span class="mi">1048288</span><span class="o">+</span>     <span class="mi">5</span>     <span class="no">Extended</span>
</span><span class='line'>    <span class="sr">/dev/s</span><span class="n">db5</span>          <span class="mi">1</span>       <span class="mi">2080</span>     <span class="mi">1048257</span>      <span class="mi">8</span><span class="n">e</span>    <span class="no">Linux</span> <span class="no">LVM</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的逻辑分区 sdb5 已经成功的成为了 <code>Linux LVM</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">partprobe</span> <span class="p">(</span> <span class="err">让</span> <span class="n">kernel</span> <span class="err">重新读取磁盘分区表，即刻生效）</span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装 LVM</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">lvm2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建 PV</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">pvcreate</span> <span class="sr">/dev/s</span><span class="n">db5</span>      <span class="c1"># 将此分区转换成为 PV</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">pvs</span>    <span class="c1"># 显示所有 PV 情况</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">PV</span>         <span class="no">VG</span>   <span class="no">Fmt</span>  <span class="no">Attr</span> <span class="no">PSize</span>  <span class="no">PFree</span>
</span><span class='line'>  <span class="sr">/dev/s</span><span class="n">db5</span>       <span class="n">lvm2</span> <span class="n">a</span><span class="o">-</span>   <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时发现还没有一个VG</p>

<h2>创建 VG</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">vgcreate</span> <span class="n">vg_data</span> <span class="sr">/dev/s</span><span class="n">db5</span>     <span class="c1"># 这里的 vg_data 是自定义的</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">vgs</span>   <span class="c1"># 显示所有 VG </span>
</span><span class='line'>
</span><span class='line'>  <span class="no">VG</span>      <span class="c1">#PV #LV #SN Attr   VSize  VFree</span>
</span><span class='line'>  <span class="n">vg_data</span>   <span class="mi">1</span>   <span class="mi">0</span>   <span class="mi">0</span> <span class="n">wz</span><span class="o">--</span><span class="n">n</span><span class="o">-</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">pvs</span>  <span class="c1"># 显示所有 PV</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">PV</span>         <span class="no">VG</span>      <span class="no">Fmt</span>  <span class="no">Attr</span> <span class="no">PSize</span>  <span class="no">PFree</span>
</span><span class='line'>  <span class="sr">/dev/s</span><span class="n">db5</span>  <span class="n">vg_data</span> <span class="n">lvm2</span> <span class="n">a</span><span class="o">-</span>   <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span> <span class="mi">70</span><span class="o">.</span><span class="mo">00</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 会发现 PV 下有个 VG 了  </span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建 LV</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">lvcreate</span> <span class="o">-</span><span class="n">n</span> <span class="n">lv_data</span> <span class="o">-</span><span class="n">L</span> <span class="mi">69</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span> <span class="n">vg_data</span>  <span class="c1"># 另外的 0.5 G 需要用于其他用途</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">lvs</span>  <span class="c1"># 显示所有 LV</span>
</span><span class='line'>
</span><span class='line'><span class="no">LV</span>      <span class="no">VG</span>      <span class="no">Attr</span>   <span class="no">LSize</span>  <span class="no">Origin</span> <span class="no">Snap</span><span class="o">%</span>  <span class="no">Move</span> <span class="no">Log</span> <span class="no">Copy</span><span class="o">%</span>  <span class="no">Convert</span>
</span><span class='line'>  <span class="n">lv_data</span> <span class="n">vg_data</span> <span class="o">-</span><span class="n">wi</span><span class="o">-</span><span class="n">a</span><span class="o">-</span> <span class="mi">69</span><span class="o">.</span><span class="mi">50</span><span class="n">g</span>
</span></code></pre></td></tr></table></div></figure>


<h2>格式化分区</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">mkfs</span><span class="o">.</span><span class="n">ext4</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>
</span><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="o">-</span><span class="n">l</span>
</span><span class='line'><span class="err">$</span> <span class="n">mount</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span> <span class="sr">/mnt/</span>   <span class="c1"># 挂到 mnt 下</span>
</span></code></pre></td></tr></table></div></figure>


<h2>以后如何动态扩容？</h2>

<ol>
<li>用 fdisk 設定新的具有 8e system ID 的 partition</li>
<li>利用 pvcreate 建置 PV</li>
<li>利用 vgextend 將 PV 加入我們的 vg_data</li>
<li>用 lvresize 將新加入的 PV 內的 PE 加入 lv_data 中</li>
<li>透過 resize2fs 將檔案系統的容量確實增加！</li>
</ol>


<h3>实际操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">fdisk</span> <span class="sr">/dev/s</span><span class="n">db10</span>   <span class="o">=&gt;</span> <span class="err">其他动作参考上面</span>
</span><span class='line'><span class="err">$</span> <span class="n">partprobe</span>
</span><span class='line'><span class="err">$</span> <span class="n">pvcreate</span> <span class="sr">/dev/s</span><span class="n">db10</span>
</span><span class='line'><span class="err">$</span> <span class="n">vgextend</span> <span class="n">vg_data</span> <span class="sr">/dev/s</span><span class="n">db10</span>
</span><span class='line'><span class="err">$</span> <span class="n">vgdisplay</span> <span class="c1"># 显示 VG 的具体信息，会看到剩余的 PE ，假设为 90个</span>
</span><span class='line'><span class="err">$</span> <span class="n">lvresize</span> <span class="o">-</span><span class="n">l</span> <span class="o">+</span><span class="mi">90</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>    <span class="c1"># 放大 LV</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时 LVM 扩容了，但是档案系统还显示原先的大小</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resize2fs</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>  <span class="c1"># 完整将 LV 容量扩充到整个 filesystem</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># df /mnt/lvm   # 查看大小</span>
</span></code></pre></td></tr></table></div></figure>


<h2>机子重启后自动挂载</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$blkid</span> <span class="sr">/dev/</span><span class="n">vg_data</span><span class="o">/</span><span class="n">lv_data</span>  <span class="c1"># 查看该设备的 UUID</span>
</span><span class='line'><span class="err">$</span> <span class="n">vim</span> <span class="sr">/etc/</span><span class="n">fstab</span>   <span class="c1"># 编辑自动挂载的名单</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="err">》</span><span class="no">UUID</span><span class="o">=</span><span class="mi">1</span><span class="n">eb099f3</span><span class="o">-</span><span class="mi">5332</span><span class="o">-</span><span class="mi">43</span><span class="n">d7</span><span class="o">-</span><span class="n">a98d</span><span class="o">-</span><span class="mi">6</span><span class="n">c1238572cd5</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span><span class="n">red_mansions</span>        <span class="n">ext4</span>    <span class="n">defaults</span> <span class="mi">0</span>   <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">df</span> <span class="o">-</span><span class="no">TH</span>  <span class="c1"># 查看下所有设备</span>
</span><span class='line'>
</span><span class='line'><span class="no">Filesystem</span>     <span class="no">Type</span>      <span class="no">Size</span>  <span class="no">Used</span> <span class="no">Avail</span> <span class="no">Use</span><span class="o">%</span> <span class="no">Mounted</span> <span class="n">on</span>
</span><span class='line'><span class="sr">/dev/s</span><span class="n">da1</span>      <span class="n">ext4</span>       <span class="mi">11</span><span class="n">G</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="n">G</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span>  <span class="mi">27</span><span class="o">%</span> <span class="o">/</span>
</span><span class='line'><span class="n">udev</span>           <span class="n">devtmpfs</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>  <span class="mi">8</span><span class="o">.</span><span class="mi">2</span><span class="n">k</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">1</span><span class="o">%</span> <span class="sr">/dev</span>
</span><span class='line'><span class="sr">tmpfs          tmpfs     389M  242k  388M   1% /</span><span class="n">run</span>
</span><span class='line'><span class="n">none</span>           <span class="n">tmpfs</span>     <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>     <span class="mi">0</span>  <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/</span><span class="n">lock</span>
</span><span class='line'><span class="n">none</span>           <span class="n">tmpfs</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>     <span class="mi">0</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/s</span><span class="n">hm</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>  <span class="n">mount</span> <span class="o">-</span><span class="n">a</span> <span class="c1"># 按照 fstab 文件重新挂载一遍</span>
</span><span class='line'><span class="err">$</span>  <span class="n">df</span> <span class="o">-</span><span class="no">TH</span>
</span><span class='line'>
</span><span class='line'><span class="no">Filesystem</span>                  <span class="no">Type</span>      <span class="no">Size</span>  <span class="no">Used</span> <span class="no">Avail</span> <span class="no">Use</span><span class="o">%</span> <span class="no">Mounted</span> <span class="n">on</span>
</span><span class='line'><span class="sr">/dev/s</span><span class="n">da1</span>                   <span class="n">ext4</span>       <span class="mi">11</span><span class="n">G</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="n">G</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span>  <span class="mi">27</span><span class="o">%</span> <span class="o">/</span>
</span><span class='line'><span class="n">udev</span>                        <span class="n">devtmpfs</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>  <span class="mi">8</span><span class="o">.</span><span class="mi">2</span><span class="n">k</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">1</span><span class="o">%</span> <span class="sr">/dev</span>
</span><span class='line'><span class="sr">tmpfs                       tmpfs     389M  242k  388M   1% /</span><span class="n">run</span>
</span><span class='line'><span class="n">none</span>                        <span class="n">tmpfs</span>     <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>     <span class="mi">0</span>  <span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">M</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/</span><span class="n">lock</span>
</span><span class='line'><span class="n">none</span>                        <span class="n">tmpfs</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>     <span class="mi">0</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">G</span>   <span class="mi">0</span><span class="o">%</span> <span class="sr">/run/s</span><span class="n">hm</span>
</span><span class='line'><span class="sr">/dev/m</span><span class="n">apper</span><span class="o">/</span><span class="n">vg_data</span><span class="o">-</span><span class="n">lv_data</span> <span class="n">ext4</span>       <span class="mi">74</span><span class="n">G</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="n">G</span>   <span class="mi">63</span><span class="n">G</span>  <span class="mi">11</span><span class="o">%</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span><span class="n">red_mansions</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 会发现设备已经挂载上去了。</span>
</span></code></pre></td></tr></table></div></figure>


<h2>给 设备 赋予授权</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">chown</span> <span class="o">-</span><span class="n">R</span> <span class="ss">deploy</span><span class="p">:</span><span class="n">deploy</span> <span class="sr">/home/</span><span class="n">deploy</span><span class="o">/</span>  <span class="c1"># 因为默认属于 root 权限</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://linux.vbird.org/linux_basic/0420quota.php#lvm">http://linux.vbird.org/linux_basic/0420quota.php#lvm</a>
<a href="http://www.ichiayi.com/wiki/tech/lvm">http://www.ichiayi.com/wiki/tech/lvm</a>
<a href="http://allen7111382.blog.51cto.com/202304/268562">http://allen7111382.blog.51cto.com/202304/268562</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[后台任务 VS 消息队列 -「译」]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/hou-tai-ren-wu-vs-xiao-xi-dui-lie-%5Byi-%5D/"/>
    <updated>2014-12-26T14:56:25+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/hou-tai-ren-wu-vs-xiao-xi-dui-lie-[yi-]</id>
    <content type="html"><![CDATA[<h1>后台任务 VS 消息队列</h1>

<p>一件常见的事情，我看到工程师们认为消息队列跟后台任务是相等的。这是他们所忽略的：消息队列是一个后台任务的超集。所有的信息进程都在后台完成，但是后台任务并没有通过消息队列来完成。</p>

<p>拿一个简单的使用例子：当一个用户注册时，我想要去发一条欢迎 email，正常你会想在后台发送这封 Email，因此不影响用户的使用体验，但你真的需要去安装 ActiveMQ，RabbitMQ 或者 Resque 去做这些吗？显然不需要。</p>

<p>在建造一个复杂的系统时消息队列是一个基本的建筑模式。你的许多系统组件也许被不同团队所编写，但是他们用队列实现消息发送来通信，一个组件可以发送消息给另外一个组件说：“请发送这封邮件”。但是消息队列系统有它们的代价：它们是复杂的，因为他们被设计成你的分发系统的地基，他们必须被部署和监控，他们必须是可靠并且高可用的。</p>

<p>很多人安装消息队列去运行简单的后台程序，我认为并不需要这么复杂，我有一个简单的问题：“我是在让两个不同的子系统进行通信还是仅仅在衍生相同的工作？”几乎每一个网站都会立即面临注册邮件案例。想想在用户的浏览器投票结果中，执行一些操作可能需要30-60秒的时间，衍生出单独的线程去运行这些工程是完全充足且太过于简单的，这也是我 girl_friday 项目背后的原因，我想要一个简单并且可靠的方式去运行后台任务，而不需要复杂的消息队列系统。</p>

<h2>总结</h2>

<p>总的来说， 简单的任务用 sidekiq 等后台任务来处理即可。</p>

<p>MQ 适用于比较大型的，异构系统，多个系统间的相互通信。</p>

<p>MQ 是 sidekiq 的超集。</p>

<p>Sidekiq 背后的原理是将任务都放入队列，然后用多个线程去运行任务。</p>

<h2>Sidekiq 使用场景</h2>

<p>比如发邮件，完成一些耗时的任务等。</p>

<p>代码大概是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/workers/hard_worker.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HardWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1"># 这里系统会不断将任务压入队列，然后启动线程去执行任务</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Doing hard work&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>MQ 使用场景</h2>

<p>将一堆任务压入消息队列，然后让其他系统取出任务进行实现。</p>

<p>虽然我也可以将「发邮件」压入消息队列，然后在系统内取出进行发邮件，不过总归大材小用</p>

<p>代码大概是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 发布者</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Publisher</span>
</span><span class='line'>  <span class="c1"># In order to publish message we need a exchange name.</span>
</span><span class='line'>  <span class="c1"># Note that RabbitMQ does not care about the payload -</span>
</span><span class='line'>  <span class="c1"># we will be using JSON-encoded strings</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">exchange</span><span class="p">,</span> <span class="n">message</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="c1"># grab the fanout exchange</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">fanout</span><span class="p">(</span><span class="s2">&quot;blog.</span><span class="si">#{</span><span class="n">exchange</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># and simply publish message</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">channel</span>
</span><span class='line'>    <span class="vi">@channel</span> <span class="o">||=</span> <span class="n">connection</span><span class="o">.</span><span class="n">create_channel</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We are using default settings here</span>
</span><span class='line'>  <span class="c1"># The `Bunny.new(...)` is a place to</span>
</span><span class='line'>  <span class="c1"># put any specific RabbitMQ settings</span>
</span><span class='line'>  <span class="c1"># like host or port</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">||=</span> <span class="no">Bunny</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 消费者</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># dashboard/app/workers/posts_worker.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sneakers</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>  <span class="c1"># This worker will connect to &quot;dashboard.posts&quot; queue</span>
</span><span class='line'>  <span class="c1"># env is set to nil since by default the actuall queue name would be</span>
</span><span class='line'>  <span class="c1"># &quot;dashboard.posts_development&quot;</span>
</span><span class='line'>  <span class="n">from_queue</span> <span class="s2">&quot;dashboard.posts&quot;</span><span class="p">,</span> <span class="ss">env</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># work method receives message payload in raw format</span>
</span><span class='line'>  <span class="c1"># in our case it is JSON encoded string</span>
</span><span class='line'>  <span class="c1"># which we can pass to RecentPosts service without</span>
</span><span class='line'>  <span class="c1"># changes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">raw_post</span><span class="p">)</span>
</span><span class='line'>    <span class="no">RecentPosts</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">raw_post</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ack!</span> <span class="c1"># we need to let queue know that message was received</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">然后还有</span> <span class="no">Exchange</span> <span class="n">queue</span> <span class="err">绑定啊之类的</span>
</span></code></pre></td></tr></table></div></figure>


<p>相信看完代码会对两者的区别更清晰点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dalli -「译」]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/dalli-%5Byi-%5D/"/>
    <updated>2014-12-26T14:55:59+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/12/26/dalli-[yi-]</id>
    <content type="html"><![CDATA[<h1>Dalli</h1>

<p>Dalli 对于 memcached 服务是一个高性能的纯Ruby 客户端，它工作于 1.4+ 版本的 memcached，因为它使用了较新的二进制协议。它被认为是 memcache-client gem 的替代品。</p>

<p>  这个名字是一位葡萄牙画家的有名画作的变种。</p>

<p>  Dalli的最初版本是 CouchBase 赞助的，非常感谢他！</p>

<h2>设计</h2>

<p>在维护 memcache-client 两年后，因为一些特殊的原因我决定去写 Dalli。</p>

<ol>
<li>代码太过老旧以及粗糙，大部分的代码是单独的 1000 行 .rb 文件</li>
<li>它的许多参数都很少被使用并且复杂化了代码库</li>
<li>实施监控钩子的时候没有单独的店</li>
<li>使用太旧的文本协议，降低了未处理的性能</li>
</ol>


<p>所以有一些笔记，Dailli:</p>

<ol>
<li>使用确切相同的算法去选择一个服务，因此存在的 memcached集群运行起 TB级的数据跟 memcache-client 一样</li>
<li>在 Ruby 1.9.2 中大约比 memcache-client 快百分之20</li>
<li>包含详细的“阻塞点”方法，能够处理所有请求；这些通过检测工具能够被 hook 来追踪 memcached的使用情况</li>
<li>在管理环境下支持 SASL</li>
<li>提供正确的故障切换和可调控的超时</li>
</ol>


<h1>支持 Ruby 版本</h1>

<p>Dalli应该工作于：</p>

<ol>
<li>JRuby 1.6+</li>
<li>Ruby 1.9.3+</li>
<li>Rubinius 2.0</li>
</ol>


<p>如果你有问题，请提 issue</p>

<h1>安装和使用</h1>

<p>记住，Dalli要求 memcached 1.4+，你可以通过 <code>memcached -h</code> 来检查版本。请注意 memcached 1.2.8 版本和 Mac OS X Snow Leopadrd 不兼容。通过 Homebrew 来安装 memacached 1.4.x</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">memcached</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Ubuntu 上你可以通过运行以下命令来安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">memcached</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用下面这段代码来确认安装情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">dalli</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;dalli&#39;</span>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="s2">&quot;app_v1&quot;</span><span class="p">,</span> <span class="ss">:compress</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="n">dc</span> <span class="o">=</span> <span class="no">Dalli</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;localhost:11211&#39;</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="n">dc</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="n">dc</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这测试套件要求 memcached 1.4.3+ 和激活的 SASL。Dalli 没有运行时依赖并且以后也不会有。你可以自定义安装 &lsquo;kgio&rsquo; gem 去给 Dalli 提升 百分之20到30的运行提升。</p>

<h2>在 Rails3.X 和 Rails4.X 的使用</h2>

<p>在你的 gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;dalli&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>config/environments/production.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里是一个更全面的例子，在这个 Rails App 中，设置了一天内的最大缓存，压缩过大的数据和对所有记录进行命名空间规划，如果你有多个 APP 并且要共享缓存的值，可以移除命名空间。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="s1">&#39;cache-1.example.com&#39;</span><span class="p">,</span> <span class="s1">&#39;cache-2.example.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="no">NAME_OF_RAILS_APP</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:compress</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的服务器在<code>ENV["MEMCACHE_SERVERS"]</code>有特别的设置（比如在 Heroku使用第三方缓存服务时），在服务器中简单的提供<code>nil</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="no">NAME_OF_RAILS_APP</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:compress</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 Dalli 为了20分钟后 Rails 的 session 存储过期， 在<code>config/initializers/session_store.rb</code>中：</p>

<p>针对 Rails >= 3.2.4 :</p>

<pre><code class="`ruby"> Rails.application.config.session_store ActionDispatch::Session::CacheStore, :expire_after =&gt; 20.minutes
</code></pre>

<p>针对 Rails 3.X :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_dispatch/middleware/session/dalli_store&#39;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">session_store</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="ss">:memcache_server</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;host1&#39;</span><span class="p">,</span> <span class="s1">&#39;host2&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions&#39;</span><span class="p">,</span> <span class="ss">:key</span> <span class="o">=&gt;</span> <span class="s1">&#39;_foundation_session&#39;</span><span class="p">,</span> <span class="ss">:expire_after</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="o">.</span><span class="n">minutes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dalli 不支持 Rails 2.X。</p>

<h1>Rails 和多线程</h1>

<p>如果你使用 Puma 或者其他的多线程 APP SERVER，在 Dalli 2.7 中，你可以使用Dalli 客户端池，并且确认 Rails.cache 并不会变成多线程的资源。你必须添加 <code>gem 'connection_pool</code> 到你的 gemfile 中，以及加上 <code>:pool_size</code> 到 <code>dalli_store</code> 配置中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="s1">&#39;cache-1.example.com&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:pool_size</span> <span class="o">=&gt;</span> <span class="mi">5</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后你可以像平常一样使用 Rails 的 cache，并且 Rails.cache 会使用连接池，或者你可以检验 Dalli 客户端指向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">300</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="s1">&#39;bar&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">dalli</span><span class="o">.</span><span class="n">with</span> <span class="k">do</span> <span class="o">|</span><span class="n">client</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># client is a Dalli::Client instance which you can</span>
</span><span class='line'>  <span class="c1"># use ONLY within this block</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>配置</h1>

<p><code>Dalli:Client</code>接受以下的参数，所有的时间都在几秒内。</p>

<p><code>expires_in</code> : 全局默认 TTL 的 key 为 0，意味着不过期</p>

<p><code>namespace</code> : 如果有规定，预先考虑每一个key和它的值提供一个简单的命名空间，默认是 nil</p>

<p><code>failover</code> ：boolean 值，如果为 true 并且当主要的服务崩溃时，Daill 将会切换到另一个服务，默认为 true</p>

<p><code>threadsafe</code> : boolean 值，如果为 true，Dalli 会确保只有一个线程在给定的时间内使用socket，默认为 true, 设置为 false 是很危险的。</p>

<p><code>serializer</code> : 能够使对象进行存储。</p>

<p><code>compress</code> : boolean  值， 如果为true, Dalli 将会用 gzip 来压缩超过 1K 的数据，默认为 false</p>

<p><code>compression_min_size</code>  ：当超过这个数值时就尝试压缩，默认为1K</p>

<p><code>compression_max_size</code> ：低于这个数值时才尝试压缩，默认为无限</p>

<p><code>compressor</code> : 被压缩的对象将被存储，默认为 zlib，通过<code>Dalli::Compressor</code>来实现。如果正被压缩的数据使用 nginx 的 HttpMemcachedModule， 设置</p>

<p><code>memcached_gzip_flag 2</code> 并且使用 <code>Dalli::GzipCompressor</code></p>

<p><code>keepalive</code> : boolean值，如果为 true, Dalli 将会使 socket 长久连接，默认为 true</p>

<p><code>socket_timeout</code> : 所有的 socket 操作超时时间，默认为 0.5</p>

<p><code>socket_max_failures</code> : 当socket 超时后，socket 操作失败，一个相同的操作将会重试，当处于一个非常缓慢的网络问题时，并不会即时去执行，默认为2</p>

<p><code>socket_failure_delay</code> : 重试一个 socket 操作之前，这段时间进程将会睡眠，默认为 0.01，设置为 nil 将无延迟</p>

<p><code>down_retry_delay</code> : 当一个服务因为许多失败明显的崩溃了，仅仅会在这段时间服务将会再次检查以求正常运行。不要将这个值设置得太低，不然每一个到达崩溃服务的请求也许会固定在最大的 socket_timeout，默认为 1 秒</p>

<h1>监控</h1>

<p><code>telnet 127.0.0.1 11211</code>  连接上 memcache</p>

<p>输入 <code>stats</code> 获得状态</p>

<h1>反省</h1>

<p>第一次翻译，翻译得太生硬太渣了。。。</p>

<h1>疑惑</h1>

<p>看了官方文档，写着：“使用 memcached 来存储缓存时， Rails 会使用默认附带安装的 Dalli gem。” 但是我并没有看到有 Dalli gem 的安装，而且配置也跟 Dalli 有差别。</p>

<p>自带：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:mem_cache_store</span><span class="p">,</span> <span class="s2">&quot;cache-1.example.com&quot;</span><span class="p">,</span> <span class="s2">&quot;cache-2.example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dalli:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span><span class="p">,</span> <span class="s2">&quot;cache-1.example.com&quot;</span><span class="p">,</span> <span class="s2">&quot;cache-2.example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是为毛- -！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- 恢复撤销篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-resume/"/>
    <updated>2014-10-24T23:13:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-resume</id>
    <content type="html"><![CDATA[<h3>1、取消本地修改，恢复到上一次的commit</h3>

<p>如果你的本地文件修改得一团乱，但是还没有提交，可以通过下面的命令恢复到上次提交时的状态( 其实就是恢复到上次的 commit，因此这次的本地修改自然没了）（<code>注意是修改，不包括添加文件</code>）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard</span></code></pre></td></tr></table></div></figure>


<p>这条命令将会取消掉本地的所有修改，恢复到上一次我们的commit信息</p>

<h3>2、取消 git add 的文件</h3>

<p>有时我们会不小心git add . 所有文件，想反悔，取消某些add的文件。那么可以(还原暂存区)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset HEAD xxxx</span></code></pre></td></tr></table></div></figure>


<h3>3、取消对文件的修改</h3>

<p>如果觉得刚才对XX文件的修改没有必要，想要恢复，那么:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- xxx</span></code></pre></td></tr></table></div></figure>


<h3>4、取消已经提交的修改</h3>

<p>如果已经做了一个提交(commit),并且马上后悔了。那么可以创建一个新的提交，在新提交里撤销老的提交所做的修改</p>

<p>创建一个新的，撤销(revert)了前期修改的提交(commit)是很容易的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git revert HEAD</span></code></pre></td></tr></table></div></figure>


<p>这样就创建了一个撤销了上次提交(HEAD)的新提交</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gir revert HEAD^</span></code></pre></td></tr></table></div></figure>


<p>撤销上上次</p>

<h3>5、Tips</h3>

<h4>回滚到某一次 commit</h4>

<p><code>git reset --hard aa89cd6bcc</code></p>

<p>这样会回滚到某个commit状态，只要知道commit id 就可以</p>

<h4>回滚后反悔怎么办？</h4>

<p><code>git reflog</code> 记录了我们的每一次命令（ commit、merge 等信息）</p>

<p>根据这命令来查出我们的历史 commit id，然后 <code>git reset</code>即可</p>

<ol>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset &ndash;hard commit_id。</p></li>
<li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p></li>
<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</li>
<li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout &ndash; file。</p></li>
<li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p></li>
</ol>


<h3>6. 取消已经 push 的行为（重建分支）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 备份到另一分支，以防万一</span>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="n">old_master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 推送备份分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="ss">old_master</span><span class="p">:</span><span class="n">old_master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 本地仓库回退到某一版本</span>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">-</span><span class="n">hard</span> <span class="n">xxxx</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 删除远程分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="ss">:master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 推送本地还原后的分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 取消已经 push 的行为（强制 PUSH）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 本地仓库回退到某一版本</span>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">-</span><span class="n">hard</span> <span class="n">xxxx</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 强制 PUSH，此时远程分支已经恢复成指定的 commit 了</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span> <span class="o">--</span><span class="n">force</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000">廖雪峰 Git 教程</a></p>

<p><a href="http://git-scm.com">Git 官方</a></p>

<p><a href="http://git-scm.com/book/zh">Git 官方教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- rebase 篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-rebase/"/>
    <updated>2014-10-24T22:12:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-rebase</id>
    <content type="html"><![CDATA[<h2>git merge 和 git rebase</h2>

<p>两者都是合并分支的功能，但是区别在于:</p>

<p>假如合并前是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>D---E master
</span><span class='line'>     /
</span><span class='line'>A---B---C---F origin/master</span></code></pre></td></tr></table></div></figure>


<p>使用merge后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  D--------E  
</span><span class='line'> /          \
</span><span class='line'>A---B---C---F----G   master, origin/master</span></code></pre></td></tr></table></div></figure>


<p>使用rebase后，就不会有G这个结点</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A---B---C---F---D'---E'   master, origin/master</span></code></pre></td></tr></table></div></figure>


<h4>Tips</h4>

<p>1、D’, E’ 的 commit SHA 序號跟本來 D, E 是不同的，因為算是砍掉重新 commit 了。</p>

<p>2、因为使用<code>rebase</code>算是砍掉 D E 重新commit ,那么这里就可能会造成两次冲突，需要修改两次。而merge只需要修改一次</p>

<p>3、因此如果是小规模改动，冲突不会太大的话，建议使用rebase,否则使用merge。</p>

<p>使用reabse的好处是可以让分支不会那么乱，呈线性。</p>

<h4>进行合并</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">两条分支：</span> <span class="n">dev</span> <span class="err">和</span> <span class="n">master</span><span class="err">，此时</span> <span class="n">dev</span> <span class="err">需要合并回</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rebase 方式</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span> <span class="n">git</span> <span class="n">rebase</span> <span class="n">master</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">master</span><span class="p">)</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">dev</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># merge 方式</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">master</span><span class="p">)</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">dev</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rebase 方式，此时dev和master的指针都是同时指向最新的commit点</span>
</span><span class='line'><span class="c1"># 但是 origin/dev 指针头消失了。因此</span>
</span><span class='line'><span class="c1"># 如果要继续使用 dev, 需要先 pull 一下，跟 远端仓库的 dev 最新 commit 点进行一次 merge ( 当然结果是一个空 commit,此时可以 push --force)</span>
</span><span class='line'><span class="c1"># 此时 dev 分支的 nerwork 图是：</span>
</span><span class='line'><span class="c1"># * b6fa04b (HEAD, master, dev, origin/master) dev01 ( 10 seconds ago )</span>
</span><span class='line'><span class="c1"># 原因见下面</span>
</span></code></pre></td></tr></table></div></figure>


<h4>解决冲突</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 解决冲突后</span>
</span><span class='line'><span class="o">-------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># merge 方式</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s1">&#39;xx&#39;</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rebase 方式</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">rebase</span> <span class="o">--</span><span class="n">continue</span>
</span></code></pre></td></tr></table></div></figure>


<h4>pull 时使用 rebase 方式</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="o">--</span><span class="n">rebase</span> <span class="p">(</span> <span class="err">适合同个分支</span> <span class="err">）</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&ndash;no-ff</h4>

<p>因为两条分支在合并时，当第一条分支完全没做修改时，此时 Git 会用到<code>Fast forward</code>模式，将 HEAD 指向第二条分支的最新 commit 去，这时候我们可以用该参数来禁止<code>fast forward</code>模式。</p>

<p><code>git merge --no-ff</code>这参数的作用跟<code>rebase</code>恰恰相反，是故意弄出一条分支线，表明某些 commit 是为了实现某个功能的。</p>

<p>适用于分支间的合并</p>

<h3>Tips</h3>

<p>一般分支间的 rebase 合并使用场景是：</p>

<p>1、我自己需要实现某个功能，于是开个分支 new_menu，不提交到远程分支。开发完毕用 rebase 弄回 dev 分支</p>

<p>2、一旦分支提交到远程分支，最好不要使用 rebase 进行分支间的合并了，会造成混乱。</p>

<p>3、一般来说，使用 rebase 后的 new_menu 分支就当做废弃了，如果还需要重新使用的话，继续从 dev 分支 new 出一条分支来。</p>

<p>4、在实验中我发现，一旦在 dev 进行 rebase master,那么 origin/dev 的指向就消失了，那是因为 dev 的原先 commit 全部消失了，进行重新 commit，因此本地的 origin/dev 也没得指向了。所以才会造成要 push 时要先<code>pull</code>的现象，(也就是 master分支上的最新commit点,「此时dev也是指向最新commit点」，会跟远程服务器上的origin/dev最新commit点进行merge)因此我们可以用<code>git push --force</code> 强制 push 来解决。</p>

<p>如果是<code>pull</code>:
<img src="http://data-storage.qiniudn.com/2546D03D-A4B6-4765-9DF4-0154F62606DC.png" alt="" /></p>

<p><img src="http://data-storage.qiniudn.com/C142553B-FE45-42B3-BC10-92111A969C3F.png" alt="" /></p>

<p>如果是<code>git push --force</code> 的话就会成为一条直线。</p>

<h2>整理 commit</h2>

<p>在一个 branch 上开发一段时间后，commit 看起来会很杂乱，或者很多无谓的 commit 点，那么我们可以使用 rabase 来将多个 commit 合并成一个。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">log</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">b1</span>
</span><span class='line'><span class="n">b2</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span><span class="err">要变成</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 拿到 a 的 SHA-1 后</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="mi">49687</span><span class="n">a0a646954afdf3f4dae1f914ea793341ea2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pick</span> <span class="mo">033</span><span class="n">beb4</span> <span class="n">b1</span>
</span><span class='line'><span class="n">pick</span> <span class="n">d426a8a</span> <span class="n">b2</span>
</span><span class='line'><span class="c1"># Rebase 49687a0..d426a8a onto 49687a0</span>
</span><span class='line'><span class="c1"># pick = use commit </span>
</span><span class='line'><span class="c1"># squash = use commit, but meld into previous commit</span>
</span><span class='line'><span class="c1"># pick 会执行该 commit, squash 则将该 commit 合并到前一个 commit</span>
</span></code></pre></td></tr></table></div></figure>


<p>于是我们修改成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pick</span> <span class="mo">033</span><span class="n">beb4</span> <span class="n">b1</span>
</span><span class='line'><span class="n">squash</span> <span class="n">d426a8a</span> <span class="n">b2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 保存退出后会要求输入新的 commit 信息，后可通过 git log 查看。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<p>1、这功能的使用场景是 commit 还没有 push 到远程分支，一旦 push 到远程分支就不要用了。( 虽然可以用 &ndash;force 强制 push，视情况而定 )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git -- Push 和 Pull 篇]]></title>
    <link href="https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-push-pull/"/>
    <updated>2014-10-24T21:12:33+08:00</updated>
    <id>https://github.com/linjunzhu/linjunzhu.github.io.git/blog/2014/10/24/git-push-pull</id>
    <content type="html"><![CDATA[<h2>git push</h2>

<h4>将本地仓库的更新推送到远程仓库 remote</h4>

<p><code>git push [remote-name] [branch-name]</code></p>

<p><code>git push origin master</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果当前分支跟远程分支有 tracking 关系，那么将会自动推送当前分支到对应的远程分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 如果主机名只有一个 origin，那么连 origin 都可以省略</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span>
</span></code></pre></td></tr></table></div></figure>


<h4>查看 tracking 关系：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">.</span><span class="n">/</span><span class="o">.</span><span class="n">git</span><span class="o">/</span><span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 此时没有 tracking 关系</span>
</span><span class='line'><span class="o">==&gt;</span>
</span><span class='line'><span class="o">[</span><span class="n">core</span><span class="o">]</span>
</span><span class='line'>  <span class="n">repositoryformatversion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">filemode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">bare</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">logallrefupdates</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">ignorecase</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">precomposeunicode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:linjunzhu</span><span class="o">/</span><span class="n">test_branch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/*</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">origin</span><span class="o">/*</span>
</span></code></pre></td></tr></table></div></figure>


<h4>添加 tracking 关系</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">dev</span>  <span class="p">(</span><span class="err">这句同时指定了</span> <span class="n">origin</span> <span class="err">为默认主机</span><span class="p">)</span>
</span><span class='line'><span class="err">或者</span>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">u</span> <span class="n">dev</span> <span class="n">origin</span><span class="o">/</span><span class="n">dev</span>
</span><span class='line'><span class="err">或者</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">set</span><span class="o">-</span><span class="n">upstream</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h4>查看 tracking 关系</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">.</span><span class="n">/</span><span class="o">.</span><span class="n">git</span><span class="o">/</span><span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 此时有 tracking 关系</span>
</span><span class='line'><span class="o">==&gt;</span>
</span><span class='line'><span class="o">[</span><span class="n">core</span><span class="o">]</span>
</span><span class='line'>  <span class="n">repositoryformatversion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">filemode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">bare</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">logallrefupdates</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">ignorecase</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">precomposeunicode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:linjunzhu</span><span class="o">/</span><span class="n">test_branch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/*</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">origin</span><span class="o">/*</span>
</span><span class='line'><span class="o">[</span><span class="n">branch</span> <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">remote</span> <span class="o">=</span> <span class="n">origin</span>
</span><span class='line'>  <span class="n">merge</span> <span class="o">=</span> <span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h2>git pull</h2>

<h3>拉取更新</h3>

<p>将远程仓库的更新拉取到本地的「远程仓库」并且进行「merge」操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 相当于两步操作</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<p>如果当前分支跟远程分支是没有 tracking 关系的，那么执行<code>git pull</code>后，会 download 远程仓库的所有分支代码到本地的 origin/分支上，但是不会合并，相当于 <code>git fetch</code> 命令一样。</p>

<h2>git pull 和 git fetch 的使用区别</h2>

<ol>
<li><p><code>git pull origin master</code>: 意思是从远程端下载最新版本到当前分支，并且自动合并</p></li>
<li><p><code>git fetch origin master</code>: 意思是从远程端下载最新版本到当前分支，但是并不合并。因此如果是git fetch 的话，就需要做两步操作。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">log</span> <span class="o">-</span><span class="nb">p</span> <span class="n">master</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>   <span class="p">(</span><span class="err">查看修改内容</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span>  <span class="n">merge</span> <span class="n">orgin</span><span class="o">/</span><span class="n">master</span>    <span class="p">(</span><span class="err">合并分支</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">或者进行</span> <span class="n">rebase</span>
</span><span class='line'>
</span><span class='line'><span class="err">下章讲解</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tips</h2>

<h4>一、<code>不带任何参数的 git push</code>有两种模式</h4>

<ol>
<li><code>matching</code>模式，会推送所有<code>对应远程分支</code>的<code>本地分支</code>。</li>
<li><code>simple</code>模式，只推送当前分支 (如果有 tracking 关系的话)</li>
</ol>


<p>默认没有设置，需要打下命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">push</span><span class="o">.</span><span class="n">default</span> <span class="n">simple</span>
</span></code></pre></td></tr></table></div></figure>


<h4>二、关于<code>push</code>and<code>pull</code></h4>

<p>一般如果没把握，最好写全。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">dev</span>
</span><span class='line'><span class="n">git</span> <span class="n">pull</span> <span class="n">origin</span> <span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<h4>三、切换远程分支</h4>

<p>当小伙伴的新建分支 push 到远程分支，我们也想要拉取这条分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果当前分支没有tracking关系，那么git fetch 默认拉取所有分支</span>
</span><span class='line'><span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="n">test_branch</span>
</span><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="n">test_branch</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
